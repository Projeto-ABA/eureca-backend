/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:05:11 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsMetricsPerTerm;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnrollmentsMetricsPerTerm_ESTest extends EnrollmentsMetricsPerTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 0, 2591, 0.0);
      enrollmentsMetricsPerTerm0.setTerm((String) null);
      enrollmentsMetricsPerTerm0.getTerm();
      assertEquals(0.0, enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
      assertEquals(0, enrollmentsMetricsPerTerm0.getEnrollmentsCount());
      assertEquals(2591, enrollmentsMetricsPerTerm0.getClassesCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("JHQ @'|&g,z35=~}E/F", 2759, 2759, 0.0);
      enrollmentsMetricsPerTerm0.getTerm();
      assertEquals(0.0, enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
      assertEquals(2759, enrollmentsMetricsPerTerm0.getEnrollmentsCount());
      assertEquals(2759, enrollmentsMetricsPerTerm0.getClassesCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("bftko7UXAg&", 1, 1, 1);
      int int0 = enrollmentsMetricsPerTerm0.getEnrollmentsCount();
      assertEquals(1, enrollmentsMetricsPerTerm0.getClassesCount());
      assertEquals(1.0, enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("-SzaSP,'f", 125, 125, 1432.6908);
      enrollmentsMetricsPerTerm0.setEnrollmentsCount((-951));
      int int0 = enrollmentsMetricsPerTerm0.getEnrollmentsCount();
      assertEquals((-951), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("qDu1-BXEM@Fd705J", (-1758), 0, (-1758));
      int int0 = enrollmentsMetricsPerTerm0.getClassesCount();
      assertEquals((-1758), enrollmentsMetricsPerTerm0.getEnrollmentsCount());
      assertEquals(0, int0);
      assertEquals((-1758.0), enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", (-1843), (-1843), (-1843));
      int int0 = enrollmentsMetricsPerTerm0.getClassesCount();
      assertEquals((-1843), int0);
      assertEquals((-1843), enrollmentsMetricsPerTerm0.getEnrollmentsCount());
      assertEquals((-1843.0), enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 0, 2591, 0.0);
      enrollmentsMetricsPerTerm0.setAverageEnrollmentsPerClass(2591);
      double double0 = enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass();
      assertEquals(2591.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", (-742), 0, (-742));
      double double0 = enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass();
      assertEquals((-742), enrollmentsMetricsPerTerm0.getEnrollmentsCount());
      assertEquals((-742.0), double0, 0.01);
      assertEquals(0, enrollmentsMetricsPerTerm0.getClassesCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("JHQ @'|&g,z35=~}E/F", 2759, 2759, 0.0);
      enrollmentsMetricsPerTerm0.compareTo(enrollmentsMetricsPerTerm0);
      assertEquals(0.0, enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
      assertEquals(2759, enrollmentsMetricsPerTerm0.getEnrollmentsCount());
      assertEquals(2759, enrollmentsMetricsPerTerm0.getClassesCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 406, 406, (-848.891988515961));
      enrollmentsMetricsPerTerm0.setTerm("Dpu");
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm1 = new EnrollmentsMetricsPerTerm("", (-1843), (-1843), (-1843));
      int int0 = enrollmentsMetricsPerTerm0.compareTo(enrollmentsMetricsPerTerm1);
      assertEquals(4, int0);
      assertEquals((-1843), enrollmentsMetricsPerTerm1.getClassesCount());
      assertEquals((-1843), enrollmentsMetricsPerTerm1.getEnrollmentsCount());
      assertEquals((-1843.0), enrollmentsMetricsPerTerm1.getAverageEnrollmentsPerClass(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("EnrollmentsMetricsPerTerm{term='", 731, 731, 731);
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm1 = new EnrollmentsMetricsPerTerm("j+(kW:", 731, 1, 1);
      int int0 = enrollmentsMetricsPerTerm0.compareTo(enrollmentsMetricsPerTerm1);
      assertEquals((-37), int0);
      assertEquals(1, enrollmentsMetricsPerTerm1.getClassesCount());
      assertEquals(731, enrollmentsMetricsPerTerm1.getEnrollmentsCount());
      assertEquals(1.0, enrollmentsMetricsPerTerm1.getAverageEnrollmentsPerClass(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 1, 39, 1);
      // Undeclared exception!
      try { 
        enrollmentsMetricsPerTerm0.compareTo("EnrollmentsMetricsPerTerm{term='', enrollmentsCount=125, classesCount=39, averageEnrollmentsPerClass=125.0}");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsMetricsPerTerm
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsMetricsPerTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 0, 2591, 0.0);
      enrollmentsMetricsPerTerm0.getTerm();
      assertEquals(0, enrollmentsMetricsPerTerm0.getEnrollmentsCount());
      assertEquals(2591, enrollmentsMetricsPerTerm0.getClassesCount());
      assertEquals(0.0, enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 0, 2591, 0.0);
      String string0 = enrollmentsMetricsPerTerm0.toString();
      assertEquals("EnrollmentsMetricsPerTerm{term='', enrollmentsCount=0, classesCount=2591, averageEnrollmentsPerClass=0.0}", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 0, 2591, 0.0);
      enrollmentsMetricsPerTerm0.setClassesCount((-2075));
      assertEquals((-2075), enrollmentsMetricsPerTerm0.getClassesCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 0, 2591, 0.0);
      // Undeclared exception!
      try { 
        enrollmentsMetricsPerTerm0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsMetricsPerTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 0, 2591, 0.0);
      double double0 = enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass();
      assertEquals(0, enrollmentsMetricsPerTerm0.getEnrollmentsCount());
      assertEquals(2591, enrollmentsMetricsPerTerm0.getClassesCount());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 1, 39, 1);
      int int0 = enrollmentsMetricsPerTerm0.getClassesCount();
      assertEquals(1.0, enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
      assertEquals(39, int0);
      assertEquals(1, enrollmentsMetricsPerTerm0.getEnrollmentsCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 0, 2591, 0.0);
      int int0 = enrollmentsMetricsPerTerm0.getEnrollmentsCount();
      assertEquals(0, int0);
      assertEquals(0.0, enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
      assertEquals(2591, enrollmentsMetricsPerTerm0.getClassesCount());
  }
}
