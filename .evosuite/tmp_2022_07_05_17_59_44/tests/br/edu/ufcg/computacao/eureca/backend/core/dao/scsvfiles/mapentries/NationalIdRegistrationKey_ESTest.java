/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 22:08:02 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.NationalIdRegistrationKey;
import br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum;
import br.edu.ufcg.computacao.eureca.backend.core.models.Student;
import br.edu.ufcg.computacao.eureca.backend.core.models.StudentStatus;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NationalIdRegistrationKey_ESTest extends NationalIdRegistrationKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      boolean boolean0 = nationalIdRegistrationKey0.equals(nationalIdRegistrationKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("IGNORE_TYPE_VARIABLE_OR_WILDCARD", "y", "IGNORE_TYPE_VARIABLE_OR_WILDCARD", "F{T4s_$VFm&KKu$S8f", "y", "IGNORE_TYPE_VARIABLE_OR_WILDCARD", "y", "y", "IGNORE_TYPE_VARIABLE_OR_WILDCARD", "F{T4s_$VFm&KKu$S8f", "F{T4s_$VFm&KKu$S8f", "1qFZC2a9tn@]vI)", studentStatus0, ">)&Gl}6gk", ">)&Gl}6gk", "IGNORE_TYPE_VARIABLE_OR_WILDCARD", "numHashFunctions (%s) must be > 0", ":", "U:", ";CC", "numHashFunctions (%s) must be > 0", "IGNORE_TYPE_VARIABLE_OR_WILDCARD", (Curriculum) null, 0, 0, 0, 0, (-1670), (-1670), 0, 0, (-1670), (-1.0), (-1670), 0, 0, 2366, 0, (-1.0));
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey(student0);
      assertEquals("IGNORE_TYPE_VARIABLE_OR_WILDCARD", nationalIdRegistrationKey0.getRegistration());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.NationalIdRegistrationKey", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.NationalIdRegistrationKey");
      String string0 = nationalIdRegistrationKey0.getRegistration();
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.NationalIdRegistrationKey", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey("r5", "r5");
      nationalIdRegistrationKey0.setRegistration("");
      String string0 = nationalIdRegistrationKey0.getRegistration();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.NationalIdRegistrationKey", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.NationalIdRegistrationKey");
      String string0 = nationalIdRegistrationKey0.getNationalId();
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.NationalIdRegistrationKey", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      nationalIdRegistrationKey0.setNationalId("");
      String string0 = nationalIdRegistrationKey0.getNationalId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = null;
      try {
        nationalIdRegistrationKey0 = new NationalIdRegistrationKey((NationalIdRegistrationKey) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.NationalIdRegistrationKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      String string0 = nationalIdRegistrationKey0.getNationalId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      String string0 = nationalIdRegistrationKey0.getRegistration();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      NationalIdRegistrationKey nationalIdRegistrationKey1 = new NationalIdRegistrationKey(":", "");
      boolean boolean0 = nationalIdRegistrationKey1.equals(nationalIdRegistrationKey0);
      assertEquals("", nationalIdRegistrationKey1.getRegistration());
      assertEquals(":", nationalIdRegistrationKey1.getNationalId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      NationalIdRegistrationKey nationalIdRegistrationKey1 = new NationalIdRegistrationKey("null:null", "null:null");
      nationalIdRegistrationKey0.setRegistration("null:null");
      boolean boolean0 = nationalIdRegistrationKey0.equals(nationalIdRegistrationKey1);
      assertFalse(boolean0);
      assertFalse(nationalIdRegistrationKey1.equals((Object)nationalIdRegistrationKey0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      NationalIdRegistrationKey nationalIdRegistrationKey1 = new NationalIdRegistrationKey("null:null", "null:null");
      boolean boolean0 = nationalIdRegistrationKey0.equals(nationalIdRegistrationKey1);
      assertFalse(nationalIdRegistrationKey1.equals((Object)nationalIdRegistrationKey0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      NationalIdRegistrationKey nationalIdRegistrationKey1 = new NationalIdRegistrationKey((String) null, (String) null);
      boolean boolean0 = nationalIdRegistrationKey0.equals(nationalIdRegistrationKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      boolean boolean0 = nationalIdRegistrationKey0.equals(";");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      boolean boolean0 = nationalIdRegistrationKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey("Q(:E_", "Q(:E_");
      NationalIdRegistrationKey nationalIdRegistrationKey1 = new NationalIdRegistrationKey(nationalIdRegistrationKey0);
      assertTrue(nationalIdRegistrationKey1.equals((Object)nationalIdRegistrationKey0));
      
      nationalIdRegistrationKey0.setRegistration("97xShj.,UT(?T");
      boolean boolean0 = nationalIdRegistrationKey1.equals(nationalIdRegistrationKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      nationalIdRegistrationKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey("Q(:E_", "Q(:E_");
      nationalIdRegistrationKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = null;
      try {
        nationalIdRegistrationKey0 = new NationalIdRegistrationKey((Student) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.NationalIdRegistrationKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      nationalIdRegistrationKey0.setRegistration("null:null");
      NationalIdRegistrationKey nationalIdRegistrationKey1 = new NationalIdRegistrationKey(nationalIdRegistrationKey0);
      boolean boolean0 = nationalIdRegistrationKey0.equals(nationalIdRegistrationKey1);
      assertTrue(nationalIdRegistrationKey1.equals((Object)nationalIdRegistrationKey0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      String string0 = nationalIdRegistrationKey0.toString();
      assertEquals("null:null", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey("K>*\"K.)Ll8w>9fLe", "K>*\"K.)Ll8w>9fLe");
      NationalIdRegistrationKey nationalIdRegistrationKey1 = new NationalIdRegistrationKey("K>*\"K.)Ll8w>9fLe", "K>*\"K.)Ll8w>9fLe");
      boolean boolean0 = nationalIdRegistrationKey0.equals(nationalIdRegistrationKey1);
      assertTrue(boolean0);
  }
}
