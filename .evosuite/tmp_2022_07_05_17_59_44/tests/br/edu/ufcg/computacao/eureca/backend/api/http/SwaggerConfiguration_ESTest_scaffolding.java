/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Jul 05 23:18:57 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class SwaggerConfiguration_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "br.edu.ufcg.computacao.eureca.backend.api.http.SwaggerConfiguration"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "Cp1252"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "C:\\Users\\RAFELI~1.SIL\\AppData\\Local\\Temp\\"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "C:\\Users\\r.a.felix.da.silva\\Documents\\Eureca\\eureca-backend"); 
    java.lang.System.setProperty("user.home", "C:\\Users\\r.a.felix.da.silva"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "r.a.felix.da.silva"); 
    java.lang.System.setProperty("user.timezone", "America/Sao_Paulo"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SwaggerConfiguration_ESTest_scaffolding.class.getClassLoader() ,
      "org.springframework.plugin.metadata.SimplePluginMetadata",
      "springfox.documentation.spi.schema.GenericTypeNamingStrategy",
      "com.google.common.collect.Lists$RandomAccessPartition",
      "springfox.documentation.service.Contact",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.ImmutableEnumMap",
      "springfox.documentation.builders.RequestHandlerSelectors",
      "com.google.common.collect.Collections2",
      "com.google.common.base.JdkPattern",
      "springfox.documentation.spi.service.DocumentationPlugin",
      "com.google.common.collect.Lists$RandomAccessListWrapper",
      "com.google.common.collect.ImmutableEnumSet",
      "org.springframework.util.MimeType",
      "com.google.common.base.Predicates$ObjectPredicate",
      "com.google.common.base.Optional",
      "com.google.common.collect.Lists$TransformingRandomAccessList",
      "com.google.common.collect.Sets$2",
      "com.google.common.collect.Sets$3",
      "com.google.common.base.Converter",
      "com.google.common.collect.Sets$1",
      "com.google.common.collect.Maps$8",
      "com.google.common.base.Predicates$AndPredicate",
      "com.google.common.collect.BiMap",
      "com.google.common.base.Function",
      "com.google.common.collect.ImmutableSet",
      "com.google.common.collect.Lists$AbstractListWrapper",
      "com.google.common.collect.ImmutableMap",
      "org.springframework.http.MediaType",
      "springfox.documentation.builders.PathSelectors",
      "com.google.common.base.Predicates$NotPredicate",
      "com.google.common.collect.SortedMapDifference",
      "com.google.common.collect.Sets",
      "springfox.documentation.annotations.ApiIgnore",
      "com.google.common.base.CommonPattern",
      "org.springframework.context.annotation.Configuration",
      "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap",
      "springfox.documentation.builders.ApiInfoBuilder",
      "org.springframework.plugin.metadata.PluginMetadata",
      "com.google.common.base.Predicate",
      "org.springframework.util.CollectionUtils",
      "com.google.common.collect.Lists$StringAsImmutableList",
      "com.google.common.collect.Lists$2",
      "com.google.common.base.Present",
      "springfox.documentation.spi.service.contexts.ApiSelector",
      "com.google.common.collect.Lists$1",
      "com.google.common.collect.Multiset",
      "org.springframework.util.LinkedCaseInsensitiveMap",
      "com.google.common.collect.Sets$SetView",
      "org.springframework.http.MediaType$1",
      "com.google.common.base.Predicates$ObjectPredicate$1",
      "org.springframework.http.MediaType$2",
      "com.google.common.collect.Lists$Partition",
      "springfox.documentation.service.ApiInfo",
      "com.google.common.collect.Lists",
      "com.google.common.collect.ImmutableList",
      "springfox.documentation.builders.RequestHandlerSelectors$2",
      "springfox.documentation.spring.web.plugins.ApiSelectorBuilder",
      "springfox.documentation.swagger2.annotations.EnableSwagger2",
      "org.springframework.util.MimeType$SpecificityComparator",
      "com.google.common.base.Predicates",
      "springfox.documentation.builders.RequestHandlerSelectors$1",
      "com.google.common.collect.Lists$TransformingSequentialList",
      "br.edu.ufcg.computacao.eureca.backend.api.http.SwaggerConfiguration",
      "org.springframework.util.InvalidMimeTypeException",
      "com.google.common.collect.Sets$4",
      "com.google.common.base.Absent",
      "com.google.common.collect.Maps$BiMapConverter",
      "org.springframework.context.annotation.Import",
      "org.springframework.util.MultiValueMap",
      "org.springframework.util.MimeTypeUtils",
      "com.google.common.collect.Maps",
      "org.springframework.http.InvalidMediaTypeException",
      "com.google.common.collect.MapDifference",
      "org.springframework.stereotype.Component",
      "springfox.documentation.spi.DocumentationType",
      "com.google.common.collect.Maps$EntryTransformer",
      "org.springframework.plugin.core.Plugin",
      "com.google.common.base.Predicates$ObjectPredicate$4",
      "springfox.documentation.spring.web.plugins.Docket",
      "com.google.common.base.Predicates$ObjectPredicate$3",
      "com.google.common.base.Predicates$ObjectPredicate$2",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.UnmodifiableIterator",
      "springfox.documentation.schema.DefaultGenericTypeNamingStrategy",
      "org.springframework.util.StringUtils",
      "org.springframework.util.Assert"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SwaggerConfiguration_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "springfox.documentation.service.Contact",
      "br.edu.ufcg.computacao.eureca.backend.api.http.SwaggerConfiguration",
      "org.springframework.beans.factory.annotation.Autowire",
      "org.springframework.plugin.metadata.SimplePluginMetadata",
      "org.springframework.util.MimeType",
      "org.springframework.util.StringUtils",
      "org.springframework.util.Assert",
      "org.springframework.util.CollectionUtils",
      "org.springframework.util.MimeType$SpecificityComparator",
      "org.springframework.util.MimeTypeUtils",
      "org.springframework.util.LinkedCaseInsensitiveMap",
      "org.springframework.http.MediaType$1",
      "org.springframework.http.MediaType$2",
      "org.springframework.http.MediaType",
      "springfox.documentation.spi.DocumentationType",
      "springfox.documentation.spring.web.plugins.Docket",
      "com.google.common.collect.Lists",
      "com.google.common.collect.Maps",
      "com.google.common.collect.Sets",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.Collections2",
      "springfox.documentation.service.ApiInfo",
      "springfox.documentation.schema.DefaultGenericTypeNamingStrategy",
      "com.google.common.base.Optional",
      "com.google.common.base.Absent",
      "springfox.documentation.builders.RequestHandlerSelectors",
      "springfox.documentation.builders.RequestHandlerSelectors$2",
      "com.google.common.base.Predicates",
      "com.google.common.base.Predicates$NotPredicate",
      "springfox.documentation.builders.RequestHandlerSelectors$1",
      "com.google.common.base.Predicates$AndPredicate",
      "springfox.documentation.builders.PathSelectors",
      "com.google.common.base.Predicates$ObjectPredicate",
      "springfox.documentation.spi.service.contexts.ApiSelector",
      "springfox.documentation.spring.web.plugins.ApiSelectorBuilder"
    );
  }
}
