/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 21:55:25 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.models.Subject;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Subject_ESTest extends Subject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(priorityQueue0);
      arrayDeque0.add("tg)kBBs+NhJ0bs2D3");
      Subject subject0 = new Subject("tg)kBBs+NhJ0bs2D3", "xJkqDfRe_m~\"bZKvN", "", "n6Y4!n&5P4PMl.q", "xJkqDfRe_m~\"bZKvN", 1073741824, 0, "tg)kBBs+NhJ0bs2D3", arrayDeque0, (-1639), arrayDeque0, arrayDeque0);
      boolean boolean0 = subject0.isComposed();
      assertTrue(boolean0);
      assertEquals("n6Y4!n&5P4PMl.q", subject0.getAcademicUnit());
      assertEquals("tg)kBBs+NhJ0bs2D3", subject0.getCourseCode());
      assertEquals("xJkqDfRe_m~\"bZKvN", subject0.getType());
      assertEquals(0, subject0.getHours());
      assertEquals("xJkqDfRe_m~\"bZKvN", subject0.getCurriculumCode());
      assertEquals(1073741824, subject0.getCredits());
      assertEquals("tg)kBBs+NhJ0bs2D3", subject0.getName());
      assertEquals("", subject0.getSubjectCode());
      assertEquals((-1639), subject0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Subject subject0 = new Subject("", "", "", "", (String) null, (-637), 772, (String) null, (Collection<String>) null, 847, (Collection<String>) null, (Collection<String>) null);
      String string0 = subject0.getType();
      assertFalse(subject0.isComposed());
      assertEquals((-637), subject0.getCredits());
      assertEquals(847, subject0.getIdealTerm());
      assertNull(string0);
      assertEquals(772, subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Subject subject0 = new Subject(", type='", ", type='", ", type='", "*IXD+\"CA0", "", 1, 1, "", set0, 1, set0, set0);
      String string0 = subject0.getType();
      assertEquals("", subject0.getName());
      assertEquals(1, subject0.getIdealTerm());
      assertEquals("", string0);
      assertEquals(", type='", subject0.getCourseCode());
      assertEquals(1, subject0.getHours());
      assertFalse(subject0.isComposed());
      assertEquals(", type='", subject0.getSubjectCode());
      assertEquals(1, subject0.getCredits());
      assertEquals("*IXD+\"CA0", subject0.getAcademicUnit());
      assertEquals(", type='", subject0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Subject subject0 = new Subject(", idealTerm=", "K'*Oy&`Mv)m+", ", idealTerm=", "", "", 0, 2, "K'*Oy&`Mv)m+", set0, 2, set0, set0);
      String string0 = subject0.getSubjectCode();
      assertEquals("", subject0.getType());
      assertEquals(2, subject0.getHours());
      assertEquals(0, subject0.getCredits());
      assertEquals(", idealTerm=", subject0.getCourseCode());
      assertEquals(2, subject0.getIdealTerm());
      assertEquals("K'*Oy&`Mv)m+", subject0.getCurriculumCode());
      assertEquals(", idealTerm=", string0);
      assertFalse(subject0.isComposed());
      assertEquals("K'*Oy&`Mv)m+", subject0.getName());
      assertEquals("", subject0.getAcademicUnit());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Subject subject0 = new Subject("", "", "", "", "aan", 0, 306654252, "Y'A8X%:(Y'1lY;0y*3", set0, (-4702), set0, set0);
      String string0 = subject0.getSubjectCode();
      assertEquals("", string0);
      assertEquals(306654252, subject0.getHours());
      assertEquals("aan", subject0.getType());
      assertEquals("Y'A8X%:(Y'1lY;0y*3", subject0.getName());
      assertEquals("", subject0.getCurriculumCode());
      assertEquals((-4702), subject0.getIdealTerm());
      assertTrue(subject0.isComposed());
      assertEquals("", subject0.getAcademicUnit());
      assertEquals(0, subject0.getCredits());
      assertEquals("", subject0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Subject subject0 = new Subject("", "", "", "", (String) null, (-637), 772, (String) null, (Collection<String>) null, 847, (Collection<String>) null, (Collection<String>) null);
      subject0.getPreRequirementsList();
      assertEquals(772, subject0.getHours());
      assertEquals(847, subject0.getIdealTerm());
      assertFalse(subject0.isComposed());
      assertEquals((-637), subject0.getCredits());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      Subject subject0 = new Subject((String) null, (String) null, (String) null, (String) null, "78g", 0, 0, "", hashSet0, 1, hashSet0, hashSet0);
      assertEquals("", subject0.getName());
      
      subject0.setName((String) null);
      subject0.getName();
      assertFalse(subject0.isComposed());
      assertEquals(1, subject0.getIdealTerm());
      assertEquals(0, subject0.getHours());
      assertEquals("78g", subject0.getType());
      assertEquals(0, subject0.getCredits());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("", "j#[L&!L5F p", "", "E<", ", academicUnit='", 0, 0, "", stack0, 0, stack0, stack0);
      String string0 = subject0.getName();
      assertEquals("E<", subject0.getAcademicUnit());
      assertFalse(subject0.isComposed());
      assertEquals("", subject0.getSubjectCode());
      assertEquals("", subject0.getCourseCode());
      assertEquals("", string0);
      assertEquals(0, subject0.getCredits());
      assertEquals("j#[L&!L5F p", subject0.getCurriculumCode());
      assertEquals(", academicUnit='", subject0.getType());
      assertEquals(0, subject0.getIdealTerm());
      assertEquals(0, subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(set0);
      Subject subject0 = new Subject("CharMatcher.inRange('", "CharMatcher.inRange('", "CharMatcher.inRange('", "CharMatcher.inRange('", "O Jx$3Uv[", 39, 39, "CharMatcher.inRange('", priorityQueue0, 0, priorityQueue0, priorityQueue0);
      int int0 = subject0.getIdealTerm();
      assertEquals("CharMatcher.inRange('", subject0.getCurriculumCode());
      assertEquals(39, subject0.getCredits());
      assertEquals("CharMatcher.inRange('", subject0.getSubjectCode());
      assertEquals("CharMatcher.inRange('", subject0.getAcademicUnit());
      assertEquals("CharMatcher.inRange('", subject0.getCourseCode());
      assertEquals("O Jx$3Uv[", subject0.getType());
      assertEquals(39, subject0.getHours());
      assertEquals(0, int0);
      assertEquals("CharMatcher.inRange('", subject0.getName());
      assertFalse(subject0.isComposed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Subject subject0 = new Subject("", "", ", coRequirementsList=", "qF&sgmUyxZt+|cuzKRt", "MH4^j#hxhNV", 1, 2191, "MURMUR128_MITZ_64", set0, 1, set0, set0);
      int int0 = subject0.getIdealTerm();
      assertEquals("MH4^j#hxhNV", subject0.getType());
      assertEquals(1, int0);
      assertEquals(2191, subject0.getHours());
      assertEquals(", coRequirementsList=", subject0.getSubjectCode());
      assertEquals("", subject0.getCurriculumCode());
      assertEquals(1, subject0.getCredits());
      assertEquals("MURMUR128_MITZ_64", subject0.getName());
      assertTrue(subject0.isComposed());
      assertEquals("qF&sgmUyxZt+|cuzKRt", subject0.getAcademicUnit());
      assertEquals("", subject0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      Subject subject0 = new Subject((String) null, (String) null, (String) null, (String) null, "78g", 0, 0, "", hashSet0, 1, hashSet0, hashSet0);
      int int0 = subject0.getHours();
      assertEquals(0, subject0.getCredits());
      assertEquals(0, int0);
      assertEquals("78g", subject0.getType());
      assertFalse(subject0.isComposed());
      assertEquals(1, subject0.getIdealTerm());
      assertEquals("", subject0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Subject subject0 = new Subject("bRMn", "\"R}", "iGO+PYG", "9zWBt{.)hqZ<CpJF7s", "INSENSITIVE", (-3286), (-3286), "9zWBt{.)hqZ<CpJF7s", list0, (-3286), list0, (Collection<String>) null);
      int int0 = subject0.getHours();
      assertEquals("9zWBt{.)hqZ<CpJF7s", subject0.getAcademicUnit());
      assertEquals((-3286), subject0.getCredits());
      assertEquals("iGO+PYG", subject0.getSubjectCode());
      assertEquals("INSENSITIVE", subject0.getType());
      assertEquals((-3286), int0);
      assertEquals((-3286), subject0.getIdealTerm());
      assertEquals("\"R}", subject0.getCurriculumCode());
      assertEquals("9zWBt{.)hqZ<CpJF7s", subject0.getName());
      assertFalse(subject0.isComposed());
      assertEquals("bRMn", subject0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Subject subject0 = new Subject("", "", "", "", (String) null, (-637), 772, (String) null, (Collection<String>) null, 847, (Collection<String>) null, (Collection<String>) null);
      subject0.getEquivalentCodesList();
      assertFalse(subject0.isComposed());
      assertEquals((-637), subject0.getCredits());
      assertEquals(847, subject0.getIdealTerm());
      assertEquals(772, subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject((String) null, (String) null, "6", "6", (String) null, (-1169), (-1169), (String) null, treeSet0, (-1169), treeSet0, treeSet0);
      String string0 = subject0.getCurriculumCode();
      assertFalse(subject0.isComposed());
      assertEquals((-1169), subject0.getHours());
      assertEquals((-1169), subject0.getIdealTerm());
      assertEquals((-1169), subject0.getCredits());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Subject subject0 = new Subject("ah", "", "", "ah", "ah", 0, 0, "ah", (Collection<String>) null, 5760, (Collection<String>) null, (Collection<String>) null);
      String string0 = subject0.getCurriculumCode();
      assertEquals("ah", subject0.getCourseCode());
      assertEquals(5760, subject0.getIdealTerm());
      assertEquals("ah", subject0.getAcademicUnit());
      assertFalse(subject0.isComposed());
      assertEquals("ah", subject0.getName());
      assertEquals("", string0);
      assertEquals("", subject0.getSubjectCode());
      assertEquals("ah", subject0.getType());
      assertEquals(0, subject0.getCredits());
      assertEquals(0, subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Subject subject0 = new Subject(", idealTerm=", "K'*Oy&`Mv)m+", ", idealTerm=", "", "", 0, 2, "K'*Oy&`Mv)m+", set0, 2, set0, set0);
      int int0 = subject0.getCredits();
      assertEquals(", idealTerm=", subject0.getSubjectCode());
      assertEquals("", subject0.getAcademicUnit());
      assertEquals(0, int0);
      assertFalse(subject0.isComposed());
      assertEquals("K'*Oy&`Mv)m+", subject0.getName());
      assertEquals("K'*Oy&`Mv)m+", subject0.getCurriculumCode());
      assertEquals(2, subject0.getIdealTerm());
      assertEquals(2, subject0.getHours());
      assertEquals(", idealTerm=", subject0.getCourseCode());
      assertEquals("", subject0.getType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Subject subject0 = new Subject("bRMn", "\"R}", "iGO+PYG", "9zWBt{.)hqZ<CpJF7s", "INSENSITIVE", (-3286), (-3286), "9zWBt{.)hqZ<CpJF7s", list0, (-3286), list0, (Collection<String>) null);
      int int0 = subject0.getCredits();
      assertEquals("9zWBt{.)hqZ<CpJF7s", subject0.getAcademicUnit());
      assertEquals((-3286), subject0.getIdealTerm());
      assertEquals("INSENSITIVE", subject0.getType());
      assertEquals((-3286), int0);
      assertFalse(subject0.isComposed());
      assertEquals("iGO+PYG", subject0.getSubjectCode());
      assertEquals("9zWBt{.)hqZ<CpJF7s", subject0.getName());
      assertEquals("\"R}", subject0.getCurriculumCode());
      assertEquals("bRMn", subject0.getCourseCode());
      assertEquals((-3286), subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Subject subject0 = new Subject((String) null, (String) null, (String) null, "", "IS_NULL", 20, 0, "", set0, 2614, set0, set0);
      String string0 = subject0.getCourseCode();
      assertEquals(2614, subject0.getIdealTerm());
      assertFalse(subject0.isComposed());
      assertEquals(0, subject0.getHours());
      assertEquals("", subject0.getName());
      assertEquals(20, subject0.getCredits());
      assertEquals("IS_NULL", subject0.getType());
      assertEquals("", subject0.getAcademicUnit());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) set0);
      Subject subject0 = new Subject("", "", "3 .\"g-=[}g\"0G}[7dF", "", "", 3, 1925, "iO / Ul6~P,$siVLl", list0, (-276), list0, set0);
      String string0 = subject0.getCourseCode();
      assertEquals("", string0);
      assertEquals(1925, subject0.getHours());
      assertEquals("iO / Ul6~P,$siVLl", subject0.getName());
      assertEquals((-276), subject0.getIdealTerm());
      assertTrue(subject0.isComposed());
      assertEquals("", subject0.getAcademicUnit());
      assertEquals("3 .\"g-=[}g\"0G}[7dF", subject0.getSubjectCode());
      assertEquals(3, subject0.getCredits());
      assertEquals("", subject0.getType());
      assertEquals("", subject0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Subject subject0 = new Subject("I", "q9cL,", "q9cL,", (String) null, (String) null, 0, 0, "r(`xmn7^T7*Kr", (Collection<String>) null, 1121, (Collection<String>) null, (Collection<String>) null);
      subject0.getCoRequirementsList();
      assertEquals(0, subject0.getCredits());
      assertFalse(subject0.isComposed());
      assertEquals("q9cL,", subject0.getCurriculumCode());
      assertEquals("q9cL,", subject0.getSubjectCode());
      assertEquals(1121, subject0.getIdealTerm());
      assertEquals("I", subject0.getCourseCode());
      assertEquals("r(`xmn7^T7*Kr", subject0.getName());
      assertEquals(0, subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Subject subject0 = new Subject(", credits=", "S!e%}inxwf`38#ln", "S!e%}inxwf`38#ln", ", idealTerm=", "S!e%}inxwf`38#ln", (-405), 9, ", idealTerm=", arrayDeque0, 0, arrayDeque0, arrayDeque0);
      assertEquals(", idealTerm=", subject0.getAcademicUnit());
      
      subject0.setAcademicUnit((String) null);
      subject0.getAcademicUnit();
      assertEquals("S!e%}inxwf`38#ln", subject0.getType());
      assertEquals((-405), subject0.getCredits());
      assertEquals(", idealTerm=", subject0.getName());
      assertEquals(", credits=", subject0.getCourseCode());
      assertEquals(9, subject0.getHours());
      assertEquals(0, subject0.getIdealTerm());
      assertFalse(subject0.isComposed());
      assertEquals("S!e%}inxwf`38#ln", subject0.getCurriculumCode());
      assertEquals("S!e%}inxwf`38#ln", subject0.getSubjectCode());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Subject subject0 = new Subject(", idealTerm=", "K'*Oy&`Mv)m+", ", idealTerm=", "", "", 0, 2, "K'*Oy&`Mv)m+", set0, 2, set0, set0);
      String string0 = subject0.getAcademicUnit();
      assertEquals(0, subject0.getCredits());
      assertFalse(subject0.isComposed());
      assertEquals("K'*Oy&`Mv)m+", subject0.getName());
      assertEquals("", string0);
      assertEquals(2, subject0.getHours());
      assertEquals(2, subject0.getIdealTerm());
      assertEquals("K'*Oy&`Mv)m+", subject0.getCurriculumCode());
      assertEquals("", subject0.getType());
      assertEquals(", idealTerm=", subject0.getSubjectCode());
      assertEquals(", idealTerm=", subject0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject subject0 = new Subject((String) null, (String) null, "y0:B#+Du}FbLMC;6]ka", "y0:B#+Du}FbLMC;6]ka", "p,9i[2", (-1994), (-1994), (String) null, linkedList0, 1, linkedList0, linkedList0);
      Subject subject1 = new Subject(subject0);
      // Undeclared exception!
      try { 
        subject1.equals(subject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      List<String> list0 = stack0.subList(0, 0);
      Subject subject0 = new Subject("dOo7:'*VKl3Ke", "~BDeB4;u7IAGP", "~BDeB4;u7IAGP", "~BDeB4;u7IAGP", "~BDeB4;u7IAGP", (-104), 0, "W*NE", list0, (-104), stack0, list0);
      stack0.removeAllElements();
      Subject subject1 = null;
      try {
        subject1 = new Subject(subject0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject("", "", "4-", "", ", hours=", 0, 0, "4-", priorityQueue0, 0, priorityQueue0, (Collection<String>) null);
      Subject subject1 = null;
      try {
        subject1 = new Subject(subject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("]| =<T{X?V;l^cM", "]| =<T{X?V;l^cM", "com.google.common.collect.Cut$BelowValue", "Jzl8IrgTKt&:L]NhZ", "]| =<T{X?V;l^cM", 4572, 4572, "Jzl8IrgTKt&:L]NhZ", stack0, 4572, stack0, stack0);
      Subject subject1 = new Subject(subject0);
      assertEquals("com.google.common.collect.Cut$BelowValue", subject0.getSubjectCode());
      
      subject0.setSubjectCode("+P7<h(^*qw");
      boolean boolean0 = subject1.equals(subject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Subject subject0 = new Subject("f!YW", "f!YW", "f!YW", "f!YW", "f!YW", (-2106324010), (-2106324010), "f!YW", set0, (-2106324010), set0, set0);
      Subject subject1 = new Subject("W*]W", "W*]W", "f!YW", "W*]W", "f!YW", (-2106324010), (-2106324010), "f!YW", set0, (-2106324010), set0, set0);
      boolean boolean0 = subject0.equals(subject1);
      assertEquals("f!YW", subject1.getName());
      assertTrue(subject1.isComposed());
      assertEquals("W*]W", subject1.getAcademicUnit());
      assertEquals("W*]W", subject1.getCourseCode());
      assertEquals((-2106324010), subject1.getCredits());
      assertEquals((-2106324010), subject1.getHours());
      assertEquals("f!YW", subject1.getType());
      assertEquals((-2106324010), subject1.getIdealTerm());
      assertFalse(boolean0);
      assertEquals("W*]W", subject1.getCurriculumCode());
      assertEquals("f!YW", subject1.getSubjectCode());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Subject subject0 = new Subject("", "", "*4sk)*ix602?/M2kxx9", "", "", 0, 2252, "Funnels.integerFunnel()", arrayDeque0, 548, arrayDeque0, arrayDeque0);
      boolean boolean0 = subject0.equals((Object) null);
      assertEquals(0, subject0.getCredits());
      assertFalse(boolean0);
      assertFalse(subject0.isComposed());
      assertEquals("", subject0.getType());
      assertEquals(548, subject0.getIdealTerm());
      assertEquals(2252, subject0.getHours());
      assertEquals("*4sk)*ix602?/M2kxx9", subject0.getSubjectCode());
      assertEquals("", subject0.getCurriculumCode());
      assertEquals("Funnels.integerFunnel()", subject0.getName());
      assertEquals("", subject0.getCourseCode());
      assertEquals("", subject0.getAcademicUnit());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("]| =<T{X?V;l^cM", "]| =<T{X?V;l^cM", "com.google.common.collect.Cut$BelowValue", "Jzl8IrgTKt&:L]NhZ", "]| =<T{X?V;l^cM", 4572, 4572, "Jzl8IrgTKt&:L]NhZ", stack0, 4572, stack0, stack0);
      boolean boolean0 = subject0.equals(subject0);
      assertTrue(boolean0);
      assertFalse(subject0.isComposed());
      assertEquals(4572, subject0.getHours());
      assertEquals("]| =<T{X?V;l^cM", subject0.getType());
      assertEquals("]| =<T{X?V;l^cM", subject0.getCurriculumCode());
      assertEquals(4572, subject0.getCredits());
      assertEquals("Jzl8IrgTKt&:L]NhZ", subject0.getName());
      assertEquals("Jzl8IrgTKt&:L]NhZ", subject0.getAcademicUnit());
      assertEquals(4572, subject0.getIdealTerm());
      assertEquals("com.google.common.collect.Cut$BelowValue", subject0.getSubjectCode());
      assertEquals("]| =<T{X?V;l^cM", subject0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("]| =<T{X?V;l^cM", "]| =<T{X?V;l^cM", "com.google.common.collect.Cut$BelowValue", "Jzl8IrgTKt&:L]NhZ", "]| =<T{X?V;l^cM", 4572, 4572, "Jzl8IrgTKt&:L]NhZ", stack0, 4572, stack0, stack0);
      Object object0 = new Object();
      boolean boolean0 = subject0.equals(object0);
      assertEquals(4572, subject0.getIdealTerm());
      assertFalse(boolean0);
      assertEquals("]| =<T{X?V;l^cM", subject0.getCourseCode());
      assertEquals("Jzl8IrgTKt&:L]NhZ", subject0.getAcademicUnit());
      assertEquals(4572, subject0.getCredits());
      assertEquals("com.google.common.collect.Cut$BelowValue", subject0.getSubjectCode());
      assertEquals("Jzl8IrgTKt&:L]NhZ", subject0.getName());
      assertEquals(4572, subject0.getHours());
      assertEquals("]| =<T{X?V;l^cM", subject0.getType());
      assertFalse(subject0.isComposed());
      assertEquals("]| =<T{X?V;l^cM", subject0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Subject subject0 = new Subject("f!YW", "f!YW", "f!YW", "f!YW", "f!YW", (-2106324010), (-2106324010), "f!YW", set0, (-2106324010), set0, set0);
      Subject subject1 = new Subject(subject0);
      assertTrue(subject1.equals((Object)subject0));
      
      subject0.setCurriculumCode("W*]W");
      boolean boolean0 = subject0.equals(subject1);
      assertFalse(subject1.equals((Object)subject0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("]| =<T{X?V;l^cM", "]| =<T{X?V;l^cM", "com.google.common.collect.Cut$BelowValue", "Jzl8IrgTKt&:L]NhZ", "]| =<T{X?V;l^cM", 4572, 4572, "Jzl8IrgTKt&:L]NhZ", stack0, 4572, stack0, stack0);
      Subject subject1 = new Subject(subject0);
      boolean boolean0 = subject1.equals(subject0);
      assertEquals(4572, subject1.getIdealTerm());
      assertEquals(4572, subject1.getHours());
      assertEquals("]| =<T{X?V;l^cM", subject1.getType());
      assertTrue(boolean0);
      assertEquals("]| =<T{X?V;l^cM", subject1.getCourseCode());
      assertFalse(subject0.isComposed());
      assertFalse(subject1.isComposed());
      assertEquals(4572, subject1.getCredits());
      assertEquals("Jzl8IrgTKt&:L]NhZ", subject1.getAcademicUnit());
      assertEquals("]| =<T{X?V;l^cM", subject1.getCurriculumCode());
      assertEquals("com.google.common.collect.Cut$BelowValue", subject1.getSubjectCode());
      assertEquals("Jzl8IrgTKt&:L]NhZ", subject1.getName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("q$F}Zh<", "q$F}Zh<", "q$F}Zh<", "q$F}Zh<", "q$F}Zh<", (-1101136662), (-1101136662), "q$F}Zh<", linkedHashSet0, (-1101136662), linkedHashSet0, linkedHashSet0);
      subject0.setCoRequirementsList(linkedHashSet0);
      assertFalse(subject0.isComposed());
      assertEquals((-1101136662), subject0.getHours());
      assertEquals((-1101136662), subject0.getCredits());
      assertEquals((-1101136662), subject0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject("CharMatcher.ascii()", "CharMatcher.ascii()", "CharMatcher.ascii()", "CharMatcher.ascii()", "CharMatcher.ascii()", 1665, 1665, "CharMatcher.ascii()", priorityQueue0, 1665, priorityQueue0, priorityQueue0);
      subject0.setIdealTerm(1665);
      assertEquals(1665, subject0.getIdealTerm());
      assertEquals(1665, subject0.getHours());
      assertEquals(1665, subject0.getCredits());
      assertFalse(subject0.isComposed());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject("CharMatcher.ascii()", "CharMatcher.ascii()", "CharMatcher.ascii()", "CharMatcher.ascii()", "CharMatcher.ascii()", 1665, 1665, "CharMatcher.ascii()", priorityQueue0, 1665, priorityQueue0, priorityQueue0);
      subject0.getName();
      assertEquals(1665, subject0.getCredits());
      assertFalse(subject0.isComposed());
      assertEquals(1665, subject0.getIdealTerm());
      assertEquals(1665, subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject("\"*=Lb]S:)", "\"*=Lb]S:)", (String) null, "\"*=Lb]S:)", (String) null, 1400, 1400, "\"*=Lb]S:)", priorityQueue0, 1400, priorityQueue0, priorityQueue0);
      String string0 = subject0.getCourseCode();
      assertEquals(1400, subject0.getIdealTerm());
      assertEquals(1400, subject0.getHours());
      assertEquals(1400, subject0.getCredits());
      assertFalse(subject0.isComposed());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject("\"*=Lb]S:)", "\"*=Lb]S:)", (String) null, "\"*=Lb]S:)", (String) null, 1400, 1400, "\"*=Lb]S:)", priorityQueue0, 1400, priorityQueue0, priorityQueue0);
      subject0.getEquivalentCodesList();
      assertEquals(1400, subject0.getCredits());
      assertFalse(subject0.isComposed());
      assertEquals(1400, subject0.getHours());
      assertEquals(1400, subject0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Subject subject0 = new Subject("xp$~tmdNAOyu:", "xp$~tmdNAOyu:", "xp$~tmdNAOyu:", "xp$~tmdNAOyu:", "xp$~tmdNAOyu:", (-2903), (-2903), "xp$~tmdNAOyu:", arrayList0, (-2903), arrayList0, arrayList0);
      int int0 = subject0.getIdealTerm();
      assertEquals((-2903), int0);
      assertFalse(subject0.isComposed());
      assertEquals((-2903), subject0.getHours());
      assertEquals((-2903), subject0.getCredits());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Subject subject0 = new Subject("E<", "E<", "E<", "E<", "E<", 48, 48, "E<", (Collection<String>) null, 48, (Collection<String>) null, (Collection<String>) null);
      subject0.getCurriculumCode();
      assertEquals(48, subject0.getCredits());
      assertEquals(48, subject0.getHours());
      assertEquals(48, subject0.getIdealTerm());
      assertFalse(subject0.isComposed());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject("\"*=Lb]S:)", "\"*=Lb]S:)", (String) null, "\"*=Lb]S:)", (String) null, 1400, 1400, "\"*=Lb]S:)", priorityQueue0, 1400, priorityQueue0, priorityQueue0);
      int int0 = subject0.getCredits();
      assertEquals(1400, subject0.getIdealTerm());
      assertEquals(1400, int0);
      assertFalse(subject0.isComposed());
      assertEquals(1400, subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Subject subject0 = new Subject("E<", "E<", "E<", "E<", "E<", 48, 48, "E<", (Collection<String>) null, 48, (Collection<String>) null, (Collection<String>) null);
      boolean boolean0 = subject0.isComposed();
      assertEquals(48, subject0.getIdealTerm());
      assertEquals(48, subject0.getHours());
      assertFalse(boolean0);
      assertEquals(48, subject0.getCredits());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("1;R2`L", "1;R2`L", "1;R2`L", "1;R2`L", "1;R2`L", 70, 70, "1;R2`L", linkedHashSet0, 70, linkedHashSet0, linkedHashSet0);
      subject0.getType();
      assertEquals(70, subject0.getHours());
      assertEquals(70, subject0.getCredits());
      assertEquals(70, subject0.getIdealTerm());
      assertFalse(subject0.isComposed());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("]| =<T{X?V;l^cM", "]| =<T{X?V;l^cM", "com.google.common.collect.Cut$BelowValue", "Jzl8IrgTKt&:L]NhZ", "]| =<T{X?V;l^cM", 4572, 4572, "Jzl8IrgTKt&:L]NhZ", stack0, 4572, stack0, stack0);
      String string0 = subject0.toString();
      assertEquals("Subject{courseCode=']| =<T{X?V;l^cM', curriculumCode=']| =<T{X?V;l^cM', subjectCode='com.google.common.collect.Cut$BelowValue', academicUnit='Jzl8IrgTKt&:L]NhZ', type=']| =<T{X?V;l^cM', credits=4572, hours=4572, name='Jzl8IrgTKt&:L]NhZ', equivalentCodesList=[], idealTerm=4572, preRequirementsList=[], coRequirementsList=[]}", string0);
      assertFalse(subject0.isComposed());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject("\"*=Lb]S:)", "\"*=Lb]S:)", (String) null, "\"*=Lb]S:)", (String) null, 1400, 1400, "\"*=Lb]S:)", priorityQueue0, 1400, priorityQueue0, priorityQueue0);
      subject0.setHours(1400);
      assertEquals(1400, subject0.getIdealTerm());
      assertEquals(1400, subject0.getHours());
      assertFalse(subject0.isComposed());
      assertEquals(1400, subject0.getCredits());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject("\"*=Lb]S:)", "\"*=Lb]S:)", (String) null, "\"*=Lb]S:)", (String) null, 1400, 1400, "\"*=Lb]S:)", priorityQueue0, 1400, priorityQueue0, priorityQueue0);
      int int0 = subject0.getHours();
      assertEquals(1400, int0);
      assertEquals(1400, subject0.getCredits());
      assertEquals(1400, subject0.getIdealTerm());
      assertFalse(subject0.isComposed());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("]| =<T{X?V;l^cM", "]| =<T{X?V;l^cM", "com.google.common.collect.Cut$BelowValue", "Jzl8IrgTKt&:L]NhZ", "]| =<T{X?V;l^cM", 4572, 4572, "Jzl8IrgTKt&:L]NhZ", stack0, 4572, stack0, stack0);
      subject0.setCredits(1869);
      assertEquals(1869, subject0.getCredits());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("]| =<T{X?V;l^cM", "]| =<T{X?V;l^cM", "com.google.common.collect.Cut$BelowValue", "Jzl8IrgTKt&:L]NhZ", "]| =<T{X?V;l^cM", 4572, 4572, "Jzl8IrgTKt&:L]NhZ", stack0, 4572, stack0, stack0);
      assertEquals("]| =<T{X?V;l^cM", subject0.getType());
      
      subject0.setType("Jzl8IrgTKt&:L]NhZ");
      assertFalse(subject0.isComposed());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("q$F}Zh<", "q$F}Zh<", "q$F}Zh<", "q$F}Zh<", "q$F}Zh<", (-1101136662), (-1101136662), "q$F}Zh<", linkedHashSet0, (-1101136662), linkedHashSet0, linkedHashSet0);
      subject0.hashCode();
      assertEquals((-1101136662), subject0.getCredits());
      assertEquals((-1101136662), subject0.getHours());
      assertEquals((-1101136662), subject0.getIdealTerm());
      assertFalse(subject0.isComposed());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject("CharMatcher.ascii()", "CharMatcher.ascii()", "CharMatcher.ascii()", "CharMatcher.ascii()", "CharMatcher.ascii()", 1665, 1665, "CharMatcher.ascii()", priorityQueue0, 1665, priorityQueue0, priorityQueue0);
      subject0.getCoRequirementsList();
      assertEquals(1665, subject0.getCredits());
      assertEquals(1665, subject0.getIdealTerm());
      assertEquals(1665, subject0.getHours());
      assertFalse(subject0.isComposed());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject("CharMatcher.ascii()", "CharMatcher.ascii()", "CharMatcher.ascii()", "CharMatcher.ascii()", "CharMatcher.ascii()", 1665, 1665, "CharMatcher.ascii()", priorityQueue0, 1665, priorityQueue0, priorityQueue0);
      subject0.getPreRequirementsList();
      assertFalse(subject0.isComposed());
      assertEquals(1665, subject0.getHours());
      assertEquals(1665, subject0.getIdealTerm());
      assertEquals(1665, subject0.getCredits());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("oIAsO8Jz4B[MK", "oIAsO8Jz4B[MK", "oIAsO8Jz4B[MK", "oIAsO8Jz4B[MK", "oIAsO8Jz4B[MK", 1077, 1077, "oIAsO8Jz4B[MK", treeSet0, 1077, treeSet0, treeSet0);
      subject0.setCourseCode("oIAsO8Jz4B[MK");
      assertEquals(1077, subject0.getCredits());
      assertFalse(subject0.isComposed());
      assertEquals(1077, subject0.getIdealTerm());
      assertEquals(1077, subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject("\"*=Lb]S:)", "\"*=Lb]S:)", (String) null, "\"*=Lb]S:)", (String) null, 1400, 1400, "\"*=Lb]S:)", priorityQueue0, 1400, priorityQueue0, priorityQueue0);
      String string0 = subject0.getSubjectCode();
      assertEquals(1400, subject0.getCredits());
      assertEquals(1400, subject0.getIdealTerm());
      assertNull(string0);
      assertFalse(subject0.isComposed());
      assertEquals(1400, subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("1;R2`L", "1;R2`L", "1;R2`L", "1;R2`L", "1;R2`L", 70, 70, "1;R2`L", linkedHashSet0, 70, linkedHashSet0, linkedHashSet0);
      subject0.getAcademicUnit();
      assertEquals(70, subject0.getCredits());
      assertFalse(subject0.isComposed());
      assertEquals(70, subject0.getHours());
      assertEquals(70, subject0.getIdealTerm());
  }
}
