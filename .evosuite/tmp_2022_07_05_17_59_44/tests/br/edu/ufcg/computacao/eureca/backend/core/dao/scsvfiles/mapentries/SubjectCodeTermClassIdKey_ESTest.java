/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 22:28:13 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.SubjectCodeTermClassIdKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubjectCodeTermClassIdKey_ESTest extends SubjectCodeTermClassIdKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey();
      subjectCodeTermClassIdKey0.setTerm("Y#4^C4prCz_^z>Fwer");
      String string0 = subjectCodeTermClassIdKey0.getTerm();
      assertEquals("Y#4^C4prCz_^z>Fwer", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey("", "", "KSD$QNvm");
      String string0 = subjectCodeTermClassIdKey0.getTerm();
      assertEquals("", string0);
      assertEquals("", subjectCodeTermClassIdKey0.getSubjectCode());
      assertEquals("KSD$QNvm", subjectCodeTermClassIdKey0.getClassId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey("Y#4^C4prCz_^z>Fwer", "Y#4^C4prCz_^z>Fwer", "Y#4^C4prCz_^z>Fwer");
      String string0 = subjectCodeTermClassIdKey0.getSubjectCode();
      assertEquals("Y#4^C4prCz_^z>Fwer", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey();
      subjectCodeTermClassIdKey0.setSubjectCode("");
      String string0 = subjectCodeTermClassIdKey0.getSubjectCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey();
      subjectCodeTermClassIdKey0.setClassId("Y#4^C4prCz_^z>Fwer");
      String string0 = subjectCodeTermClassIdKey0.getClassId();
      assertEquals("Y#4^C4prCz_^z>Fwer", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey();
      String string0 = subjectCodeTermClassIdKey0.getSubjectCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey();
      String string0 = subjectCodeTermClassIdKey0.getTerm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey();
      String string0 = subjectCodeTermClassIdKey0.getClassId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey();
      subjectCodeTermClassIdKey0.setTerm("Y#4^C4prCz_^z>Fwer");
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey1 = new SubjectCodeTermClassIdKey("Y#4^C4prCz_^z>Fwer", "Y#4^C4prCz_^z>Fwer", "Y#4^C4prCz_^z>Fwer");
      subjectCodeTermClassIdKey0.setSubjectCode("Y#4^C4prCz_^z>Fwer");
      subjectCodeTermClassIdKey0.setClassId("Y#4^C4prCz_^z>Fwer");
      boolean boolean0 = subjectCodeTermClassIdKey0.equals(subjectCodeTermClassIdKey1);
      assertTrue(subjectCodeTermClassIdKey1.equals((Object)subjectCodeTermClassIdKey0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey();
      subjectCodeTermClassIdKey0.setTerm("");
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey1 = new SubjectCodeTermClassIdKey();
      subjectCodeTermClassIdKey0.setClassId("");
      subjectCodeTermClassIdKey1.setTerm("");
      subjectCodeTermClassIdKey1.setSubjectCode("");
      subjectCodeTermClassIdKey0.setSubjectCode("");
      boolean boolean0 = subjectCodeTermClassIdKey0.equals(subjectCodeTermClassIdKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey();
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey1 = new SubjectCodeTermClassIdKey();
      subjectCodeTermClassIdKey1.setSubjectCode("");
      subjectCodeTermClassIdKey0.setSubjectCode("");
      subjectCodeTermClassIdKey1.setTerm("a5m*");
      boolean boolean0 = subjectCodeTermClassIdKey1.equals(subjectCodeTermClassIdKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey();
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey1 = new SubjectCodeTermClassIdKey("Y#4^C4prCz_^z>Fwer", "Y#4^C4prCz_^z>Fwer", "Y#4^C4prCz_^z>Fwer");
      subjectCodeTermClassIdKey0.setSubjectCode("Y#4^C4prCz_^z>Fwer");
      // Undeclared exception!
      try { 
        subjectCodeTermClassIdKey0.equals(subjectCodeTermClassIdKey1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey();
      Object object0 = new Object();
      boolean boolean0 = subjectCodeTermClassIdKey0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey();
      boolean boolean0 = subjectCodeTermClassIdKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey();
      boolean boolean0 = subjectCodeTermClassIdKey0.equals(subjectCodeTermClassIdKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey();
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey1 = new SubjectCodeTermClassIdKey();
      subjectCodeTermClassIdKey0.setSubjectCode("");
      boolean boolean0 = subjectCodeTermClassIdKey0.equals(subjectCodeTermClassIdKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey();
      String string0 = subjectCodeTermClassIdKey0.toString();
      assertEquals("SubjectCodeTermClassIdKey{subjectCode='null', term='null', classId='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey("", "", "");
      String string0 = subjectCodeTermClassIdKey0.getClassId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SubjectCodeTermClassIdKey subjectCodeTermClassIdKey0 = new SubjectCodeTermClassIdKey();
      subjectCodeTermClassIdKey0.hashCode();
  }
}
