/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:45:50 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.models;

import org.junit.Test;
import static org.junit.Assert.*;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.SubjectKey;
import br.edu.ufcg.computacao.eureca.backend.core.models.StudentCurriculumProgress;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StudentCurriculumProgress_ESTest extends StudentCurriculumProgress_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(1336, 1336, 0, 1859, 1336, 1336, 1859);
      studentCurriculumProgress0.setOngoing((Collection<SubjectKey>) null);
      studentCurriculumProgress0.getOngoing();
      assertEquals(1336, studentCurriculumProgress0.getCompletedTerms());
      assertEquals(4531, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(1336, studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals(1859, studentCurriculumProgress0.getEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(0, 0, 0, 0, 0, (-1323), 0);
      int int0 = studentCurriculumProgress0.getEnrolledCredits();
      assertEquals(0, int0);
      assertEquals(0, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(0, studentCurriculumProgress0.getCompletedTerms());
      assertEquals((-1323), studentCurriculumProgress0.getCompletedComplementaryActivities());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(1336, 1336, 0, 1859, 1336, 1336, 1859);
      int int0 = studentCurriculumProgress0.getEnrolledCredits();
      assertEquals(1336, studentCurriculumProgress0.getCompletedTerms());
      assertEquals(1336, studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals(4531, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(1859, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(125, 125, 125, 125, 125, 125, 125);
      studentCurriculumProgress0.setEnabled((Collection<SubjectKey>) null);
      studentCurriculumProgress0.getEnabled();
      assertEquals(500, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(125, studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals(125, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(125, studentCurriculumProgress0.getCompletedTerms());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(1336, 1336, 0, 1859, 1336, 1336, 1859);
      studentCurriculumProgress0.setDisabled((Collection<SubjectKey>) null);
      studentCurriculumProgress0.getDisabled();
      assertEquals(1336, studentCurriculumProgress0.getCompletedTerms());
      assertEquals(4531, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(1859, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(1336, studentCurriculumProgress0.getCompletedComplementaryActivities());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(0, 125, 0, 0, (-1310), 0, 125);
      int int0 = studentCurriculumProgress0.getCompletedTerms();
      assertEquals(0, studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals((-1185), studentCurriculumProgress0.getCompletedCredits());
      assertEquals(0, int0);
      assertEquals(125, studentCurriculumProgress0.getEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-504), (-504), (-504), (-504), (-504), 0, (-504));
      int int0 = studentCurriculumProgress0.getCompletedTerms();
      assertEquals(0, studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals((-2016), studentCurriculumProgress0.getCompletedCredits());
      assertEquals((-504), int0);
      assertEquals((-504), studentCurriculumProgress0.getEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(125, 125, 0, 125, (-2847), 5226, 39);
      int int0 = studentCurriculumProgress0.getCompletedOptionalCredits();
      assertEquals(39, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(5226, studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals(125, studentCurriculumProgress0.getCompletedTerms());
      assertEquals(0, int0);
      assertEquals((-2597), studentCurriculumProgress0.getCompletedCredits());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(0, 2, 2, 2, 0, 0, 1906);
      int int0 = studentCurriculumProgress0.getCompletedOptionalCredits();
      assertEquals(6, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(1906, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(0, studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals(2, int0);
      assertEquals(0, studentCurriculumProgress0.getCompletedTerms());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(0, 0, 0, 4173, 0, (-588), 0);
      int int0 = studentCurriculumProgress0.getCompletedMandatoryCredits();
      assertEquals(0, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(0, studentCurriculumProgress0.getCompletedTerms());
      assertEquals((-588), studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals(4173, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(125, 125, 0, 125, (-2847), 5226, 39);
      int int0 = studentCurriculumProgress0.getCompletedMandatoryCredits();
      assertEquals((-2597), studentCurriculumProgress0.getCompletedCredits());
      assertEquals(125, studentCurriculumProgress0.getCompletedTerms());
      assertEquals(39, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(5226, studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(0, 0, 0, 0, 0, 125, 5123);
      int int0 = studentCurriculumProgress0.getCompletedElectiveCredits();
      assertEquals(0, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(0, int0);
      assertEquals(5123, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(0, studentCurriculumProgress0.getCompletedTerms());
      assertEquals(125, studentCurriculumProgress0.getCompletedComplementaryActivities());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(1336, 1336, 0, 1859, 1336, 1336, 1859);
      int int0 = studentCurriculumProgress0.getCompletedElectiveCredits();
      assertEquals(1859, int0);
      assertEquals(4531, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(1859, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(1336, studentCurriculumProgress0.getCompletedTerms());
      assertEquals(1336, studentCurriculumProgress0.getCompletedComplementaryActivities());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(0, 0, 0, 0, 0, (-1323), 0);
      int int0 = studentCurriculumProgress0.getCompletedCredits();
      assertEquals((-1323), studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals(0, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(0, int0);
      assertEquals(0, studentCurriculumProgress0.getCompletedTerms());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(125, 125, 125, 125, 125, 125, 125);
      int int0 = studentCurriculumProgress0.getCompletedCredits();
      assertEquals(125, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(125, studentCurriculumProgress0.getCompletedTerms());
      assertEquals(500, int0);
      assertEquals(125, studentCurriculumProgress0.getCompletedComplementaryActivities());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(0, 0, 0, 0, 0, 0, 0);
      int int0 = studentCurriculumProgress0.getCompletedComplementaryCredits();
      assertEquals(0, studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals(0, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(0, studentCurriculumProgress0.getCompletedTerms());
      assertEquals(0, int0);
      assertEquals(0, studentCurriculumProgress0.getEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(1336, 1336, 0, 1859, 1336, 1336, 1859);
      int int0 = studentCurriculumProgress0.getCompletedComplementaryCredits();
      assertEquals(1336, int0);
      assertEquals(1859, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(1336, studentCurriculumProgress0.getCompletedTerms());
      assertEquals(4531, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(1336, studentCurriculumProgress0.getCompletedComplementaryActivities());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(0, 125, 0, 0, (-1310), 0, 125);
      int int0 = studentCurriculumProgress0.getCompletedComplementaryActivities();
      assertEquals(0, int0);
      assertEquals((-1185), studentCurriculumProgress0.getCompletedCredits());
      assertEquals(125, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(0, studentCurriculumProgress0.getCompletedTerms());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(2964, 1787, 2, 2, 1787, 2, 96);
      int int0 = studentCurriculumProgress0.getCompletedComplementaryActivities();
      assertEquals(3578, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(2, int0);
      assertEquals(96, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(2964, studentCurriculumProgress0.getCompletedTerms());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(2964, 1787, 2, 2, 1787, 2, 96);
      studentCurriculumProgress0.setCompleted((Collection<SubjectKey>) null);
      studentCurriculumProgress0.getCompleted();
      assertEquals(2, studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals(2964, studentCurriculumProgress0.getCompletedTerms());
      assertEquals(96, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(3578, studentCurriculumProgress0.getCompletedCredits());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(125, 125, 0, 125, (-2847), 5226, 39);
      studentCurriculumProgress0.setAdequate((Collection<SubjectKey>) null);
      studentCurriculumProgress0.getAdequate();
      assertEquals(39, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals((-2597), studentCurriculumProgress0.getCompletedCredits());
      assertEquals(125, studentCurriculumProgress0.getCompletedTerms());
      assertEquals(5226, studentCurriculumProgress0.getCompletedComplementaryActivities());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-353), (-353), (-353), (-353), (-353), (-353), (-353));
      String string0 = studentCurriculumProgress0.toString();
      assertEquals("StudentCurriculumProgress{completedTerms=-353, completedMandatoryCredits=-353, completedOptionalCredits=-353, completedElectiveCredits=-353, completedComplementaryCredits=-353, completedComplementaryActivities=-353, enrolledCredits=-353, completed=[], enabled=[], disabled=[], ongoing=[], adequate=[]}", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-353), (-353), (-353), (-353), (-353), (-353), (-353));
      int int0 = studentCurriculumProgress0.getCompletedComplementaryCredits();
      assertEquals((-353), studentCurriculumProgress0.getEnrolledCredits());
      assertEquals((-353), studentCurriculumProgress0.getCompletedTerms());
      assertEquals((-353), int0);
      assertEquals((-353), studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals((-1412), studentCurriculumProgress0.getCompletedCredits());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-353), (-353), (-353), (-353), (-353), (-353), (-353));
      int int0 = studentCurriculumProgress0.getCompletedComplementaryActivities();
      assertEquals((-1412), studentCurriculumProgress0.getCompletedCredits());
      assertEquals((-353), int0);
      assertEquals((-353), studentCurriculumProgress0.getEnrolledCredits());
      assertEquals((-353), studentCurriculumProgress0.getCompletedTerms());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(63, 63, 63, 63, 63, 63, 63);
      studentCurriculumProgress0.setCompletedComplementaryActivities(63);
      assertEquals(63, studentCurriculumProgress0.getCompletedTerms());
      assertEquals(63, studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals(252, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(63, studentCurriculumProgress0.getEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(63, 63, 63, 63, 63, 63, 63);
      studentCurriculumProgress0.setCompletedTerms(63);
      assertEquals(63, studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals(63, studentCurriculumProgress0.getCompletedTerms());
      assertEquals(63, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(252, studentCurriculumProgress0.getCompletedCredits());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(63, 63, 63, 63, 63, 63, 63);
      studentCurriculumProgress0.setCompletedElectiveCredits(63);
      assertEquals(63, studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals(252, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(63, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(63, studentCurriculumProgress0.getCompletedTerms());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(1267, 1267, 1267, 1267, 1267, 1267, 1267);
      studentCurriculumProgress0.setCompletedOptionalCredits(1267);
      assertEquals(5068, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(1267, studentCurriculumProgress0.getCompletedTerms());
      assertEquals(1267, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(1267, studentCurriculumProgress0.getCompletedComplementaryActivities());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-353), (-353), (-353), (-353), (-353), (-353), (-353));
      int int0 = studentCurriculumProgress0.getEnrolledCredits();
      assertEquals((-353), studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals((-353), int0);
      assertEquals((-353), studentCurriculumProgress0.getCompletedTerms());
      assertEquals((-1412), studentCurriculumProgress0.getCompletedCredits());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-353), (-353), (-353), (-353), (-353), (-353), (-353));
      studentCurriculumProgress0.setEnrolledCredits((-353));
      assertEquals((-353), studentCurriculumProgress0.getEnrolledCredits());
      assertEquals((-353), studentCurriculumProgress0.getCompletedTerms());
      assertEquals((-353), studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals((-1412), studentCurriculumProgress0.getCompletedCredits());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(1267, 1267, 1267, 1267, 1267, 1267, 1267);
      int int0 = studentCurriculumProgress0.getCompletedTerms();
      assertEquals(1267, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(1267, studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals(5068, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(1267, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-353), (-353), (-353), (-353), (-353), (-353), (-353));
      studentCurriculumProgress0.getDisabled();
      assertEquals((-353), studentCurriculumProgress0.getCompletedTerms());
      assertEquals((-1412), studentCurriculumProgress0.getCompletedCredits());
      assertEquals((-353), studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals((-353), studentCurriculumProgress0.getEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-353), (-353), (-353), (-353), (-353), (-353), (-353));
      Collection<SubjectKey> collection0 = studentCurriculumProgress0.getOngoing();
      studentCurriculumProgress0.setEnabled(collection0);
      assertEquals((-353), studentCurriculumProgress0.getEnrolledCredits());
      assertEquals((-353), studentCurriculumProgress0.getCompletedTerms());
      assertEquals((-353), studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals((-1412), studentCurriculumProgress0.getCompletedCredits());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-353), (-353), (-353), (-353), (-353), (-353), (-353));
      int int0 = studentCurriculumProgress0.getCompletedCredits();
      assertEquals((-353), studentCurriculumProgress0.getCompletedTerms());
      assertEquals((-1412), int0);
      assertEquals((-353), studentCurriculumProgress0.getEnrolledCredits());
      assertEquals((-353), studentCurriculumProgress0.getCompletedComplementaryActivities());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-353), (-353), (-353), (-353), (-353), (-353), (-353));
      int int0 = studentCurriculumProgress0.getCompletedMandatoryCredits();
      assertEquals((-1412), studentCurriculumProgress0.getCompletedCredits());
      assertEquals((-353), studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals((-353), int0);
      assertEquals((-353), studentCurriculumProgress0.getCompletedTerms());
      assertEquals((-353), studentCurriculumProgress0.getEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(1267, 1267, 1267, 1267, 1267, 1267, 1267);
      studentCurriculumProgress0.getEnabled();
      assertEquals(1267, studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals(1267, studentCurriculumProgress0.getEnrolledCredits());
      assertEquals(5068, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(1267, studentCurriculumProgress0.getCompletedTerms());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(63, 63, 63, 63, 63, 63, 63);
      studentCurriculumProgress0.getAdequate();
      assertEquals(63, studentCurriculumProgress0.getCompletedTerms());
      assertEquals(252, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(63, studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals(63, studentCurriculumProgress0.getEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-353), (-353), (-353), (-353), (-353), (-353), (-353));
      studentCurriculumProgress0.setCompletedComplementaryCredits((-353));
      assertEquals((-353), studentCurriculumProgress0.getCompletedTerms());
      assertEquals((-1412), studentCurriculumProgress0.getCompletedCredits());
      assertEquals((-353), studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals((-353), studentCurriculumProgress0.getEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-353), (-353), (-353), (-353), (-353), (-353), (-353));
      int int0 = studentCurriculumProgress0.getCompletedElectiveCredits();
      assertEquals((-353), studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals((-353), studentCurriculumProgress0.getEnrolledCredits());
      assertEquals((-353), int0);
      assertEquals((-353), studentCurriculumProgress0.getCompletedTerms());
      assertEquals((-1412), studentCurriculumProgress0.getCompletedCredits());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(1267, 1267, 1267, 1267, 1267, 1267, 1267);
      Collection<SubjectKey> collection0 = studentCurriculumProgress0.getCompleted();
      studentCurriculumProgress0.setOngoing(collection0);
      assertEquals(5068, studentCurriculumProgress0.getCompletedCredits());
      assertEquals(1267, studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals(1267, studentCurriculumProgress0.getCompletedTerms());
      assertEquals(1267, studentCurriculumProgress0.getEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-353), (-353), (-353), (-353), (-353), (-353), (-353));
      studentCurriculumProgress0.setCompletedMandatoryCredits((-353));
      assertEquals((-353), studentCurriculumProgress0.getEnrolledCredits());
      assertEquals((-1412), studentCurriculumProgress0.getCompletedCredits());
      assertEquals((-353), studentCurriculumProgress0.getCompletedComplementaryActivities());
      assertEquals((-353), studentCurriculumProgress0.getCompletedTerms());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-353), (-353), (-353), (-353), (-353), (-353), (-353));
      int int0 = studentCurriculumProgress0.getCompletedOptionalCredits();
      assertEquals((-353), int0);
      assertEquals((-353), studentCurriculumProgress0.getCompletedTerms());
      assertEquals((-1412), studentCurriculumProgress0.getCompletedCredits());
      assertEquals((-353), studentCurriculumProgress0.getEnrolledCredits());
      assertEquals((-353), studentCurriculumProgress0.getCompletedComplementaryActivities());
  }
}
