/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:54:47 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.active;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.RiskClassCountSummary;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.active.ActivesPerTermSummary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ActivesPerTermSummary_ESTest extends ActivesPerTermSummary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActivesPerTermSummary activesPerTermSummary0 = new ActivesPerTermSummary("", (RiskClassCountSummary) null);
      activesPerTermSummary0.setAdmissionTerm((String) null);
      String string0 = activesPerTermSummary0.getTerm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActivesPerTermSummary activesPerTermSummary0 = new ActivesPerTermSummary("", (RiskClassCountSummary) null);
      activesPerTermSummary0.setAdmissionTerm("g{!S4>Eew{Z[?A0kBh");
      String string0 = activesPerTermSummary0.getTerm();
      assertEquals("g{!S4>Eew{Z[?A0kBh", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = mock(RiskClassCountSummary.class, new ViolatedAssumptionAnswer());
      ActivesPerTermSummary activesPerTermSummary0 = new ActivesPerTermSummary((String) null, riskClassCountSummary0);
      String string0 = activesPerTermSummary0.getAdmissionTerm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActivesPerTermSummary activesPerTermSummary0 = new ActivesPerTermSummary("", (RiskClassCountSummary) null);
      activesPerTermSummary0.setAdmissionTerm("g{!S4>Eew{Z[?A0kBh");
      String string0 = activesPerTermSummary0.getAdmissionTerm();
      assertEquals("g{!S4>Eew{Z[?A0kBh", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = mock(RiskClassCountSummary.class, new ViolatedAssumptionAnswer());
      ActivesPerTermSummary activesPerTermSummary0 = new ActivesPerTermSummary("", riskClassCountSummary0);
      int int0 = activesPerTermSummary0.compareTo(activesPerTermSummary0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = mock(RiskClassCountSummary.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(riskClassCountSummary0).toString();
      ActivesPerTermSummary activesPerTermSummary0 = new ActivesPerTermSummary("0VZft", riskClassCountSummary0);
      RiskClassCountSummary riskClassCountSummary1 = activesPerTermSummary0.getRiskClassCount();
      ActivesPerTermSummary activesPerTermSummary1 = new ActivesPerTermSummary("", riskClassCountSummary1);
      int int0 = activesPerTermSummary0.compareTo(activesPerTermSummary1);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = mock(RiskClassCountSummary.class, new ViolatedAssumptionAnswer());
      ActivesPerTermSummary activesPerTermSummary0 = new ActivesPerTermSummary("", riskClassCountSummary0);
      RiskClassCountSummary riskClassCountSummary1 = mock(RiskClassCountSummary.class, new ViolatedAssumptionAnswer());
      ActivesPerTermSummary activesPerTermSummary1 = new ActivesPerTermSummary("br.edu.ufcg.computacao.eureca.backend.api.http.response.active.ActivesPerTermSummary", riskClassCountSummary1);
      int int0 = activesPerTermSummary0.compareTo(activesPerTermSummary1);
      assertEquals((-84), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = mock(RiskClassCountSummary.class, new ViolatedAssumptionAnswer());
      ActivesPerTermSummary activesPerTermSummary0 = new ActivesPerTermSummary("", riskClassCountSummary0);
      // Undeclared exception!
      try { 
        activesPerTermSummary0.compareTo("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.edu.ufcg.computacao.eureca.backend.api.http.response.active.ActivesPerTermSummary
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.active.ActivesPerTermSummary", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ActivesPerTermSummary activesPerTermSummary0 = new ActivesPerTermSummary("", (RiskClassCountSummary) null);
      // Undeclared exception!
      try { 
        activesPerTermSummary0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.active.ActivesPerTermSummary", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ActivesPerTermSummary activesPerTermSummary0 = new ActivesPerTermSummary("", (RiskClassCountSummary) null);
      activesPerTermSummary0.setRiskClassCount((RiskClassCountSummary) null);
      assertEquals("", activesPerTermSummary0.getTerm());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ActivesPerTermSummary activesPerTermSummary0 = new ActivesPerTermSummary("", (RiskClassCountSummary) null);
      RiskClassCountSummary riskClassCountSummary0 = activesPerTermSummary0.getRiskClassCount();
      assertNull(riskClassCountSummary0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ActivesPerTermSummary activesPerTermSummary0 = new ActivesPerTermSummary("", (RiskClassCountSummary) null);
      String string0 = activesPerTermSummary0.getAdmissionTerm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActivesPerTermSummary activesPerTermSummary0 = new ActivesPerTermSummary("", (RiskClassCountSummary) null);
      String string0 = activesPerTermSummary0.getTerm();
      assertEquals("", string0);
  }
}
