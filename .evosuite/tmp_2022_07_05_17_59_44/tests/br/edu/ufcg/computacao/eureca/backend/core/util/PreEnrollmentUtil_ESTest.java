/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 21:50:56 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.models.ClassSchedule;
import br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum;
import br.edu.ufcg.computacao.eureca.backend.core.models.Schedule;
import br.edu.ufcg.computacao.eureca.backend.core.models.StudentCurriculumProgress;
import br.edu.ufcg.computacao.eureca.backend.core.models.Subject;
import br.edu.ufcg.computacao.eureca.backend.core.models.SubjectSchedule;
import br.edu.ufcg.computacao.eureca.backend.core.models.SubjectType;
import br.edu.ufcg.computacao.eureca.backend.core.util.PreEnrollmentUtil;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PreEnrollmentUtil_ESTest extends PreEnrollmentUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(1056);
      arrayList0.add(integer0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Curriculum curriculum0 = new Curriculum("hiaCounmt", "hiaCounmt", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 1056, 1056, 1056, 1056, 1056, 1056, (-1326), 1056, 1056, 1056, linkedList0, linkedList0, treeSet0, treeSet0, linkedList0);
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(117, 683, 128, 128, 128, 0, 1056);
      studentCurriculumProgress0.setCompletedComplementaryCredits(117);
      Map<SubjectType, Integer> map0 = PreEnrollmentUtil.getIdealCreditsPerSubjectType(curriculum0, studentCurriculumProgress0, integer0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(1056);
      arrayList0.add(integer0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Curriculum curriculum0 = new Curriculum("hiaCounmt", "hiaCounmt", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 1056, 1056, 1056, 1056, 1056, 1056, (-1326), 1056, 1056, 1056, linkedList0, linkedList0, treeSet0, treeSet0, linkedList0);
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(1056, (-1326), 1056, 1056, (-1326), 1056, 1056);
      Map<SubjectType, Integer> map0 = PreEnrollmentUtil.getIdealCreditsPerSubjectType(curriculum0, studentCurriculumProgress0, integer0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule((Subject) null, hashMap0);
      Stack<ClassSchedule> stack0 = new Stack<ClassSchedule>();
      Schedule schedule0 = new Schedule(0, " 0YFj", stack0);
      schedule0.decrementAvailability();
      hashMap0.put("", schedule0);
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-523), (-523), (-523), 0, (-1), (-1), 0);
      // Undeclared exception!
      try { 
        PreEnrollmentUtil.sanitizeSubject("", "", subjectSchedule0, studentCurriculumProgress0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.util.PreEnrollmentUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<SubjectSchedule> arrayList0 = new ArrayList<SubjectSchedule>();
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Subject subject0 = new Subject("934TQ4Y[;oGIBl", "f", (String) null, ">CC9G+NY2/}{(Q^", ")", 1510, 1510, (String) null, set0, 2194, set0, (Collection<String>) null);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      arrayList0.add(subjectSchedule0);
      int int0 = PreEnrollmentUtil.getSubjectCreditsSum(arrayList0);
      assertEquals(1510, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(1062);
      arrayList0.add(integer0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Curriculum curriculum0 = new Curriculum("z", "z", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 3470, 3470, 3470, 1062, 3470, 3470, (-1350), 3470, 3470, 3470, linkedList0, linkedList0, treeSet0, treeSet0, linkedList0);
      curriculum0.setMinNumberOfTerms(1);
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(3470, (-1350), 1062, 3470, (-1350), (-916), 1062);
      Map<SubjectType, Integer> map0 = PreEnrollmentUtil.getIdealCreditsPerSubjectType(curriculum0, studentCurriculumProgress0, integer0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Curriculum curriculum0 = new Curriculum("z", "z", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-3118), (-3118), 0, 0, (-3118), (-3118), 0, (-1441), 0, 327, linkedHashSet0, linkedList0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-638), (-638), 327, (-3118), (-638), (-3118), (-1441));
      int int0 = PreEnrollmentUtil.getActualTerm(curriculum0, studentCurriculumProgress0);
      assertEquals((-3118), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<SubjectSchedule> vector0 = new Vector<SubjectSchedule>();
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule((Subject) null, hashMap0);
      vector0.add(subjectSchedule0);
      SubjectType subjectType0 = SubjectType.MANDATORY;
      // Undeclared exception!
      try { 
        PreEnrollmentUtil.getSubjectsPerTerm(vector0, subjectType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.util.PreEnrollmentUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        PreEnrollmentUtil.getSubjectCreditsSum((Collection<SubjectSchedule>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.util.PreEnrollmentUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Curriculum curriculum0 = new Curriculum("fA0r9#@leH2Ly20)7x", "fA0r9#@leH2Ly20)7x", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 1, (-1807), 1257, (-1807), 0, (-1807), 0, 0, 1169, 0, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0);
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(287, 0, 1, 1169, 287, (-1807), 0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        PreEnrollmentUtil.getIdealCreditsPerSubjectType(curriculum0, studentCurriculumProgress0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 1193, 1193, 1193, 1, 1, 1193, 0, 1193, 1193, 1, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(1, (-1), 0, 940, 0, 940, 1);
      // Undeclared exception!
      try { 
        PreEnrollmentUtil.getActualTerm(curriculum0, studentCurriculumProgress0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Curriculum curriculum0 = new Curriculum("br.edu.ufcg.computacao.eureca.backend.core.util.PreEnrollmentUtil", "Zjt\"C", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 3524, 836, 0, (-137), 203, 1858, 0, 40000, 292, 0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(0, 836, 0, 0, (-1), 40000, 3524);
      // Undeclared exception!
      try { 
        PreEnrollmentUtil.getActualTerm(curriculum0, studentCurriculumProgress0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<SubjectSchedule> arrayList0 = new ArrayList<SubjectSchedule>();
      // Undeclared exception!
      try { 
        PreEnrollmentUtil.excludeUnavailableSubjects((Collection<SubjectSchedule>) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.util.EurecaUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<SubjectSchedule> stack0 = new Stack<SubjectSchedule>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject subject0 = new Subject("-)KO0YbetQ7f", "-)KO0YbetQ7f", "-)KO0YbetQ7f", "-)KO0YbetQ7f", "-)KO0YbetQ7f", (-171), (-171), "-)KO0YbetQ7f", linkedList0, 1986, linkedList0, linkedList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      stack0.add(subjectSchedule0);
      TreeSet<SubjectSchedule> treeSet0 = new TreeSet<SubjectSchedule>();
      // Undeclared exception!
      try { 
        PreEnrollmentUtil.excludeUnavailableSubjects(stack0, treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // br.edu.ufcg.computacao.eureca.backend.core.models.SubjectSchedule cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(1062);
      arrayList0.add(integer0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Curriculum curriculum0 = new Curriculum("z", "z", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 3470, 3470, 3470, 1062, 3470, 3470, (-1350), 3470, 3470, 3470, linkedList0, linkedList0, treeSet0, treeSet0, linkedList0);
      curriculum0.setMinNumberOfTerms(1);
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(3470, (-1350), 1062, 3470, (-1350), (-916), 1062);
      int int0 = PreEnrollmentUtil.getActualTerm(curriculum0, studentCurriculumProgress0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(1055);
      arrayList0.add(integer0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Curriculum curriculum0 = new Curriculum("QK~0D6(", "QK~0D6(", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 1055, 1055, 1055, 1055, 1055, 1055, (-1344), 1055, 1055, 1055, linkedList0, linkedList0, treeSet0, treeSet0, linkedList0);
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(1055, (-1344), 1055, 1055, (-1344), 1055, 1055);
      int int0 = PreEnrollmentUtil.getActualTerm(curriculum0, studentCurriculumProgress0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(1055);
      arrayList0.add(integer0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Curriculum curriculum0 = new Curriculum("QK~0D6(", "QK~0D6(", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 1055, 1055, 1055, 1055, 1055, 1055, (-1344), 1055, 1055, 1055, linkedList0, linkedList0, treeSet0, treeSet0, linkedList0);
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-1344), 1055, 128, 128, 128, 0, 1055);
      // Undeclared exception!
      try { 
        PreEnrollmentUtil.getIdealCreditsPerSubjectType(curriculum0, studentCurriculumProgress0, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Vector<String> vector0 = new Vector<String>();
      Curriculum curriculum0 = new Curriculum(" sIA '#TE^7;z", "] is not a subclass of org.apache.log4j.Level", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 0, 0, 1, 1602, (-849), 1, 0, 0, (-585), vector0, vector0, vector0, vector0, vector0);
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress((-568), (-916), (-849), (-876), 0, 0, 0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        PreEnrollmentUtil.getIdealCreditsPerSubjectType(curriculum0, studentCurriculumProgress0, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -850
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject(",u93ziI)?dJD", ",u93ziI)?dJD", ",u93ziI)?dJD", ",u93ziI)?dJD", ",u93ziI)?dJD", 473, 473, ",u93ziI)?dJD", priorityQueue0, 473, priorityQueue0, priorityQueue0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      Schedule schedule0 = new Schedule(473, ",u93ziI)?dJD", (Collection<ClassSchedule>) null);
      hashMap0.put(",u93ziI)?dJD", schedule0);
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(473, 473, 473, 473, 473, 473, 473);
      PreEnrollmentUtil.sanitizeSubject(",u93ziI)?dJD", ",u93ziI)?dJD", subjectSchedule0, studentCurriculumProgress0);
      assertEquals(473, studentCurriculumProgress0.getCompletedElectiveCredits());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule((Subject) null, hashMap0);
      Stack<ClassSchedule> stack0 = new Stack<ClassSchedule>();
      Schedule schedule0 = new Schedule(0, "", stack0);
      hashMap0.put("", schedule0);
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(0, 0, 0, 0, 0, 0, 0);
      // Undeclared exception!
      try { 
        PreEnrollmentUtil.sanitizeSubject("", "", subjectSchedule0, studentCurriculumProgress0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.util.PreEnrollmentUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Stack<SubjectSchedule> stack0 = new Stack<SubjectSchedule>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject subject0 = new Subject("-)KO0YbetQ7f", "-)KO0YbetQ7f", "-)KO0YbetQ7f", "-)KO0YbetQ7f", "-)KO0YbetQ7f", (-171), (-171), "-)KO0YbetQ7f", linkedList0, 1986, linkedList0, linkedList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      stack0.add(subjectSchedule0);
      int int0 = PreEnrollmentUtil.getSubjectCreditsSum(stack0);
      assertEquals((-171), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Stack<SubjectSchedule> stack0 = new Stack<SubjectSchedule>();
      int int0 = PreEnrollmentUtil.getSubjectCreditsSum(stack0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Stack<SubjectSchedule> stack0 = new Stack<SubjectSchedule>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject subject0 = new Subject("-)KO0YbetQ7f", "-)KO0YbetQ7f", "-)KO0YbetQ7f", "-)KO0YbetQ7f", "-)KO0YbetQ7f", (-171), (-171), "-)KO0YbetQ7f", linkedList0, 1986, linkedList0, linkedList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      stack0.add(subjectSchedule0);
      stack0.add(subjectSchedule0);
      SubjectType subjectType0 = SubjectType.OPTIONAL;
      Map<Integer, Collection<SubjectSchedule>> map0 = PreEnrollmentUtil.getSubjectsPerTerm(stack0, subjectType0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Stack<SubjectSchedule> stack0 = new Stack<SubjectSchedule>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject subject0 = new Subject("-)KO0YbetQ7f", "-)KO0YbetQ7f", "-)KO0YbetQ7f", "-)KO0YbetQ7f", "-)KO0YbetQ7f", (-164), (-164), "-)KO0YbetQ7f", linkedList0, (-164), linkedList0, linkedList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      stack0.add(subjectSchedule0);
      Map<Integer, Collection<SubjectSchedule>> map0 = PreEnrollmentUtil.getSubjectsPerTerm(stack0, (SubjectType) null);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Stack<SubjectSchedule> stack0 = new Stack<SubjectSchedule>();
      Collection<SubjectSchedule> collection0 = PreEnrollmentUtil.excludeUnavailableSubjects(stack0, stack0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Subject subject0 = new Subject("ALWAYS_FALSE", "", "ClassSchedule{weekDay=", "ClassSchedule{weekDay=", "5BC`${93%`&72Ft", 0, 663, "5BC`${93%`&72Ft", set0, 663, set0, set0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      StudentCurriculumProgress studentCurriculumProgress0 = new StudentCurriculumProgress(1, 0, 1, (-2137), 1, 663, 663);
      PreEnrollmentUtil.sanitizeSubject("KcMu'<t;`o", "ALWAYS_FALSE", subjectSchedule0, studentCurriculumProgress0);
      assertEquals(1, studentCurriculumProgress0.getCompletedTerms());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PreEnrollmentUtil preEnrollmentUtil0 = new PreEnrollmentUtil();
  }
}
