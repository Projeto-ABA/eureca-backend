/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 22:41:40 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.models.Registration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Registration_ESTest extends Registration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Registration registration0 = new Registration();
      String string0 = registration0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Registration registration0 = new Registration();
      registration0.setValue("");
      String string0 = registration0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Registration registration0 = new Registration();
      registration0.setValue("50");
      String string0 = registration0.getRegistration();
      assertEquals("50", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Registration registration0 = new Registration();
      registration0.setValue("");
      String string0 = registration0.getRegistration();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Registration registration0 = new Registration("r8]*LKJ0q>)S-KB\"*");
      Registration registration1 = new Registration("YE{]kxf)s");
      int int0 = registration0.compareTo(registration1);
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Registration registration0 = new Registration();
      registration0.setValue("50");
      // Undeclared exception!
      try { 
        registration0.compareTo((Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Registration registration0 = new Registration((String) null);
      // Undeclared exception!
      try { 
        registration0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Registration registration0 = new Registration("");
      // Undeclared exception!
      try { 
        registration0.compareTo("DT\"om=.k.'h}p;:?");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.edu.ufcg.computacao.eureca.backend.core.models.Registration
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Registration registration0 = new Registration();
      String string0 = registration0.getRegistration();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Registration registration0 = new Registration("&_R`Yhi$;tx");
      Registration registration1 = new Registration();
      registration1.registration = "C4{a^D7UO:";
      int int0 = registration0.compareTo(registration1);
      assertEquals((-29), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Registration registration0 = new Registration("&_R`Yhi$;tx");
      boolean boolean0 = registration0.equals("&_R`Yhi$;tx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Registration registration0 = new Registration("&_R`Yhi$;tx");
      boolean boolean0 = registration0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Registration registration0 = new Registration("&_R`Yhi$;tx");
      boolean boolean0 = registration0.equals(registration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Registration registration0 = new Registration("&_R`Yhi$;tx");
      int int0 = registration0.compareTo(registration0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Registration registration0 = new Registration("&_R`Yhi$;tx");
      registration0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Registration registration0 = new Registration("&_R`Yhi$;tx");
      String string0 = registration0.toString();
      assertEquals("&_R`Yhi$;tx", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Registration registration0 = new Registration("&_R`Yhi$;tx");
      Registration registration1 = new Registration();
      boolean boolean0 = registration0.equals(registration1);
      assertFalse(boolean0);
  }
}
