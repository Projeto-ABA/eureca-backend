/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:00:40 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.students;

import org.junit.Test;
import static org.junit.Assert.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentMetrics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StudentMetrics_ESTest extends StudentMetrics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      double double0 = studentMetrics0.getSuccessRate();
      assertEquals(0.0, studentMetrics0.getCost(), 0.01);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(0.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(0.0, studentMetrics0.getRisk(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(0.0, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, studentMetrics0.getPace(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(5.1592, 5.1592, (-1244.1), (-1244.1), (-199.232294766), (-216.6918997231), (-1.0), 5.1592);
      studentMetrics0.setSuccessRate(395.645949);
      double double0 = studentMetrics0.getSuccessRate();
      assertEquals(395.645949, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(1008.0, 1214.7304965385, 1214.7304965385, 1214.7304965385, 1214.7304965385, (-4630.31), 0.0, (-4630.31));
      double double0 = studentMetrics0.getRisk();
      assertEquals(0.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(1214.7304965385, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(1214.7304965385, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals((-4630.31), studentMetrics0.getPace(), 0.01);
      assertEquals(1214.7304965385, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(1008.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-4630.31), double0, 0.01);
      assertEquals(1214.7304965385, studentMetrics0.getCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(985.34, (-1424.6528369), (-1424.6528369), 1.0, 1.0, 2658.68, (-1109.012625002929), 2658.68);
      studentMetrics0.setPace(0.0);
      double double0 = studentMetrics0.getPace();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics((-1.0), (-1.0), 1.0, 1.0, 1.0, (-1.0), 3790.090434092445, (-1.0));
      assertEquals((-1.0), studentMetrics0.getPace(), 0.01);
      
      studentMetrics0.setPace(3790.090434092445);
      double double0 = studentMetrics0.getPace();
      assertEquals(3790.090434092445, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(460.296404, 460.296404, 460.296404, 460.296404, 460.296404, 460.296404, 460.296404, 460.296404);
      double double0 = studentMetrics0.getFeasibility();
      assertEquals(460.296404, studentMetrics0.getCost(), 0.01);
      assertEquals(460.296404, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(460.296404, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(460.296404, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(460.296404, studentMetrics0.getRisk(), 0.01);
      assertEquals(460.296404, studentMetrics0.getPace(), 0.01);
      assertEquals(460.296404, double0, 0.01);
      assertEquals(460.296404, studentMetrics0.getAverageLoad(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(1008.0, 1214.7304965385, 1214.7304965385, 1214.7304965385, 1214.7304965385, (-4630.31), 0.0, (-4630.31));
      studentMetrics0.setFeasibility((-2150.5900962));
      double double0 = studentMetrics0.getFeasibility();
      assertEquals((-2150.5900962), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(5.1592, 5.1592, (-1244.1), (-1244.1), (-199.232294766), (-216.6918997231), (-1.0), 5.1592);
      studentMetrics0.setCourseDurationPrediction(0.0);
      double double0 = studentMetrics0.getCourseDurationPrediction();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, 1.0, 1.0, 1597.432760385781, (-3394.243736544362), 1597.432760385781, 1597.432760385781, (-3394.243736544362));
      double double0 = studentMetrics0.getCourseDurationPrediction();
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-3394.243736544362), studentMetrics0.getCost(), 0.01);
      assertEquals(1597.432760385781, studentMetrics0.getPace(), 0.01);
      assertEquals(1.0, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(1597.432760385781, double0, 0.01);
      assertEquals(1.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals((-3394.243736544362), studentMetrics0.getRisk(), 0.01);
      assertEquals(1597.432760385781, studentMetrics0.getAverageLoad(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics((-1117.6), (-1117.6), (-1117.6), 0.0, 0.0, 0.0, 0.0, (-1117.6));
      double double0 = studentMetrics0.getCost();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-1117.6), studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-1117.6), studentMetrics0.getFeasibility(), 0.01);
      assertEquals(0.0, studentMetrics0.getPace(), 0.01);
      assertEquals((-1117.6), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-1117.6), studentMetrics0.getRisk(), 0.01);
      assertEquals(0.0, studentMetrics0.getAverageLoad(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      studentMetrics0.setCost(2977.76);
      double double0 = studentMetrics0.getCost();
      assertEquals(2977.76, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, 0.0, 1680.14, 0.0, 0.0, 3119.15, (-3220.983566), 0.0);
      double double0 = studentMetrics0.getAverageLoad();
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(3119.15, studentMetrics0.getPace(), 0.01);
      assertEquals(1680.14, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(0.0, studentMetrics0.getCost(), 0.01);
      assertEquals((-3220.983566), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(0.0, studentMetrics0.getRisk(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(5.1592, 5.1592, (-1244.1), (-1244.1), (-199.232294766), (-216.6918997231), (-1.0), 5.1592);
      studentMetrics0.setAverageLoad(1.0);
      double double0 = studentMetrics0.getAverageLoad();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, 0.0, 0.0, (-1.0), (-1.0), 0.0, (-2207.62882), (-1.0));
      double double0 = studentMetrics0.getAttemptedCredits();
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals((-2207.62882), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
      assertEquals((-1.0), studentMetrics0.getRisk(), 0.01);
      assertEquals(0.0, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(0.0, studentMetrics0.getPace(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1.0), studentMetrics0.getAverageLoad(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(5.1592, 5.1592, (-1244.1), (-1244.1), (-199.232294766), (-216.6918997231), (-1.0), 5.1592);
      double double0 = studentMetrics0.getCourseDurationPrediction();
      assertEquals((-199.232294766), studentMetrics0.getCost(), 0.01);
      assertEquals(5.1592, studentMetrics0.getRisk(), 0.01);
      assertEquals((-216.6918997231), studentMetrics0.getPace(), 0.01);
      assertEquals(5.1592, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-1244.1), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-1244.1), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(5.1592, studentMetrics0.getFeasibility(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(5.1592, 5.1592, (-1244.1), (-1244.1), (-199.232294766), (-216.6918997231), (-1.0), 5.1592);
      double double0 = studentMetrics0.getAttemptedCredits();
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-216.6918997231), studentMetrics0.getPace(), 0.01);
      assertEquals((-1244.1), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(5.1592, studentMetrics0.getRisk(), 0.01);
      assertEquals((-1244.1), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals((-199.232294766), studentMetrics0.getCost(), 0.01);
      assertEquals(5.1592, double0, 0.01);
      assertEquals(5.1592, studentMetrics0.getFeasibility(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(5.1592, 5.1592, (-1244.1), (-1244.1), (-199.232294766), (-216.6918997231), (-1.0), 5.1592);
      assertEquals(5.1592, studentMetrics0.getAttemptedCredits(), 0.01);
      
      studentMetrics0.setAttemptedCredits((-1244.1));
      double double0 = studentMetrics0.getAttemptedCredits();
      assertEquals((-1244.1), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(5.1592, 5.1592, (-1244.1), (-1244.1), (-199.232294766), (-216.6918997231), (-1.0), 5.1592);
      double double0 = studentMetrics0.getCost();
      assertEquals((-199.232294766), double0, 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-216.6918997231), studentMetrics0.getPace(), 0.01);
      assertEquals(5.1592, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-1244.1), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(5.1592, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(5.1592, studentMetrics0.getRisk(), 0.01);
      assertEquals((-1244.1), studentMetrics0.getAverageLoad(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(5.1592, 5.1592, (-1244.1), (-1244.1), (-199.232294766), (-216.6918997231), (-1.0), 5.1592);
      double double0 = studentMetrics0.getSuccessRate();
      assertEquals((-1244.1), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(5.1592, studentMetrics0.getRisk(), 0.01);
      assertEquals((-1244.1), double0, 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-216.6918997231), studentMetrics0.getPace(), 0.01);
      assertEquals(5.1592, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-199.232294766), studentMetrics0.getCost(), 0.01);
      assertEquals(5.1592, studentMetrics0.getFeasibility(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(5.1592, 5.1592, (-1244.1), (-1244.1), (-199.232294766), (-216.6918997231), (-1.0), 5.1592);
      double double0 = studentMetrics0.getRisk();
      assertEquals(5.1592, double0, 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-1244.1), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-1244.1), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(5.1592, studentMetrics0.getFeasibility(), 0.01);
      assertEquals((-199.232294766), studentMetrics0.getCost(), 0.01);
      assertEquals((-216.6918997231), studentMetrics0.getPace(), 0.01);
      assertEquals(5.1592, studentMetrics0.getAttemptedCredits(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(5.1592, 5.1592, (-1244.1), (-1244.1), (-199.232294766), (-216.6918997231), (-1.0), 5.1592);
      double double0 = studentMetrics0.getAverageLoad();
      assertEquals(5.1592, studentMetrics0.getRisk(), 0.01);
      assertEquals((-1244.1), double0, 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-1244.1), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-216.6918997231), studentMetrics0.getPace(), 0.01);
      assertEquals(5.1592, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(5.1592, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-199.232294766), studentMetrics0.getCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      double double0 = studentMetrics0.getFeasibility();
      assertEquals(0.0, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(0.0, studentMetrics0.getCost(), 0.01);
      assertEquals(0.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(0.0, studentMetrics0.getRisk(), 0.01);
      assertEquals(0.0, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, studentMetrics0.getPace(), 0.01);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(5.1592, 5.1592, (-1244.1), (-1244.1), (-199.232294766), (-216.6918997231), (-1.0), 5.1592);
      studentMetrics0.setRisk(0.0);
      double double0 = studentMetrics0.getRisk();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(5.1592, 5.1592, (-1244.1), (-1244.1), (-199.232294766), (-216.6918997231), (-1.0), 5.1592);
      double double0 = studentMetrics0.getPace();
      assertEquals((-216.6918997231), double0, 0.01);
      assertEquals(5.1592, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-199.232294766), studentMetrics0.getCost(), 0.01);
      assertEquals(5.1592, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(5.1592, studentMetrics0.getRisk(), 0.01);
      assertEquals((-1244.1), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals((-1244.1), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
  }
}
