/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 22:50:48 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.SubjectData;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.SubjectKey;
import br.edu.ufcg.computacao.eureca.backend.core.models.Subject;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubjectData_ESTest extends SubjectData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      String string0 = subjectData0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", 0, 0, "", " tR'Ks:t@b", 0, "", "");
      subjectData0.getType();
      assertEquals(0, subjectData0.getCredits());
      assertEquals(0, subjectData0.getHours());
      assertEquals(0, subjectData0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      String string0 = subjectData0.getPreRequirements();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData(", hours=", ", hours=", 0, 0, ", hours=", "", 0, ", hours=", ", hours=");
      String string0 = subjectData0.getPreRequirements();
      assertEquals(0, subjectData0.getIdealTerm());
      assertEquals(", hours=", subjectData0.getType());
      assertEquals("", subjectData0.getEquivalentCodes());
      assertEquals(", hours=", subjectData0.getCoRequirements());
      assertEquals(0, subjectData0.getCredits());
      assertEquals(0, subjectData0.getHours());
      assertEquals(", hours=", string0);
      assertEquals(", hours=", subjectData0.getAcademicUnitId());
      assertEquals(", hours=", subjectData0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      String string0 = subjectData0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData(", name='", ", name='", 788, 788, "?", "AYvQ[Y,W\"", 788, "-nQvXd6NX", "?");
      String string0 = subjectData0.getName();
      assertEquals("-nQvXd6NX", subjectData0.getPreRequirements());
      assertEquals(", name='", subjectData0.getAcademicUnitId());
      assertEquals("?", string0);
      assertEquals(788, subjectData0.getHours());
      assertEquals(788, subjectData0.getCredits());
      assertEquals(788, subjectData0.getIdealTerm());
      assertEquals(", name='", subjectData0.getType());
      assertEquals("AYvQ[Y,W\"", subjectData0.getEquivalentCodes());
      assertEquals("?", subjectData0.getCoRequirements());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      int int0 = subjectData0.getIdealTerm();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      subjectData0.setIdealTerm((-1093));
      int int0 = subjectData0.getIdealTerm();
      assertEquals((-1093), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("kM>Lskd", "kM>Lskd", 2453, 2453, "", "", 2453, "kM>Lskd", "zt;A5LGpg .4~A8x");
      int int0 = subjectData0.getHours();
      assertEquals("kM>Lskd", subjectData0.getPreRequirements());
      assertEquals(2453, subjectData0.getCredits());
      assertEquals("zt;A5LGpg .4~A8x", subjectData0.getCoRequirements());
      assertEquals("kM>Lskd", subjectData0.getAcademicUnitId());
      assertEquals("", subjectData0.getName());
      assertEquals("", subjectData0.getEquivalentCodes());
      assertEquals(2453, int0);
      assertEquals(2453, subjectData0.getIdealTerm());
      assertEquals("kM>Lskd", subjectData0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", 1, 1, "", "", 0, "3Cxy+:e7[&bbD]u", "");
      subjectData0.setHours((-2110));
      int int0 = subjectData0.getHours();
      assertEquals((-2110), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      String string0 = subjectData0.getEquivalentCodes();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("y", "", 412, 412, "y", "", 1360, "", "y");
      String string0 = subjectData0.getEquivalentCodes();
      assertEquals(412, subjectData0.getHours());
      assertEquals("", subjectData0.getPreRequirements());
      assertEquals("y", subjectData0.getAcademicUnitId());
      assertEquals(412, subjectData0.getCredits());
      assertEquals("", string0);
      assertEquals("", subjectData0.getType());
      assertEquals(1360, subjectData0.getIdealTerm());
      assertEquals("y", subjectData0.getName());
      assertEquals("y", subjectData0.getCoRequirements());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", 0, 0, "", " tR'Ks:t@b", 0, "", "");
      int int0 = subjectData0.getCredits();
      assertEquals(0, subjectData0.getHours());
      assertEquals(0, subjectData0.getIdealTerm());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "hmy*7;sVc(hG/", 3, (-819), "", "m2$,gOcc|T+<R@\"", 1047, "m2$,gOcc|T+<R@\"", ", hours=");
      int int0 = subjectData0.getCredits();
      assertEquals("m2$,gOcc|T+<R@\"", subjectData0.getPreRequirements());
      assertEquals(1047, subjectData0.getIdealTerm());
      assertEquals("", subjectData0.getAcademicUnitId());
      assertEquals("hmy*7;sVc(hG/", subjectData0.getType());
      assertEquals("", subjectData0.getName());
      assertEquals("m2$,gOcc|T+<R@\"", subjectData0.getEquivalentCodes());
      assertEquals(3, int0);
      assertEquals((-819), subjectData0.getHours());
      assertEquals(", hours=", subjectData0.getCoRequirements());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      String string0 = subjectData0.getCoRequirements();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("y", "", 412, 412, "y", "", 1360, "", "y");
      String string0 = subjectData0.getCoRequirements();
      assertEquals("y", subjectData0.getName());
      assertEquals(1360, subjectData0.getIdealTerm());
      assertEquals(412, subjectData0.getCredits());
      assertEquals("y", subjectData0.getAcademicUnitId());
      assertEquals(412, subjectData0.getHours());
      assertEquals("y", string0);
      assertEquals("", subjectData0.getPreRequirements());
      assertEquals("", subjectData0.getType());
      assertEquals("", subjectData0.getEquivalentCodes());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      String string0 = subjectData0.getAcademicUnitId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("E.&o5/:", "E.&o5/:", 39, 2, "E.&o5/:", ")%  I;&IXPb38b", (-1140), "E.&o5/:", "E.&o5/:");
      String string0 = subjectData0.getAcademicUnitId();
      assertEquals(39, subjectData0.getCredits());
      assertEquals("E.&o5/:", subjectData0.getPreRequirements());
      assertEquals(")%  I;&IXPb38b", subjectData0.getEquivalentCodes());
      assertEquals("E.&o5/:", subjectData0.getCoRequirements());
      assertEquals("E.&o5/:", subjectData0.getType());
      assertEquals((-1140), subjectData0.getIdealTerm());
      assertEquals("E.&o5/:", string0);
      assertEquals(2, subjectData0.getHours());
      assertEquals("E.&o5/:", subjectData0.getName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", (-5895), 225, "", "", 225, "H*&#1E^hb5Tc", "");
      SubjectKey subjectKey0 = new SubjectKey();
      Subject subject0 = subjectData0.createSubject(subjectKey0);
      assertEquals("H*&#1E^hb5Tc", subjectData0.getPreRequirements());
      assertEquals("", subjectData0.getEquivalentCodes());
      assertEquals("", subject0.getType());
      assertEquals(225, subject0.getHours());
      assertEquals(225, subject0.getIdealTerm());
      assertEquals("", subject0.getName());
      assertFalse(subject0.isComposed());
      assertEquals((-5895), subject0.getCredits());
      assertEquals("", subject0.getAcademicUnit());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "gby]S", 0, 0, "", "gby]S", (-103), "", "Hrq!T*8F$#S+.ZX");
      SubjectKey subjectKey0 = new SubjectKey("", "z8A9vv$_plg')u</Cl", "SubjectData{academicUnitId='', type='gby]S', credits=0, hours=0, name='', equivalentCodes='gby]S', idealTerm=-103, preRequirements='', coRequirements='Hrq!T*8F$#S+.ZX'}");
      Subject subject0 = subjectData0.createSubject(subjectKey0);
      assertEquals("gby]S", subject0.getType());
      assertEquals("Hrq!T*8F$#S+.ZX", subjectData0.getCoRequirements());
      assertEquals("gby]S", subjectData0.getEquivalentCodes());
      assertEquals("", subjectData0.getPreRequirements());
      assertEquals(0, subject0.getCredits());
      assertEquals((-103), subject0.getIdealTerm());
      assertEquals("", subject0.getAcademicUnit());
      assertTrue(subject0.isComposed());
      assertEquals("", subject0.getName());
      assertEquals(0, subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", 1, 1, "", "", 0, "3Cxy+:e7[&bbD]u", "");
      SubjectKey subjectKey0 = new SubjectKey();
      Subject subject0 = subjectData0.createSubject(subjectKey0);
      assertEquals("3Cxy+:e7[&bbD]u", subjectData0.getPreRequirements());
      assertFalse(subject0.isComposed());
      assertEquals(1, subject0.getCredits());
      assertEquals("", subject0.getName());
      assertEquals(0, subject0.getIdealTerm());
      assertEquals(1, subject0.getHours());
      assertEquals("", subject0.getType());
      assertEquals("", subjectData0.getEquivalentCodes());
      assertEquals("", subject0.getAcademicUnit());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      // Undeclared exception!
      try { 
        subjectData0.getPreRequirementsList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      // Undeclared exception!
      try { 
        subjectData0.getEquivalentCodesList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      // Undeclared exception!
      try { 
        subjectData0.getCoRequirementsList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      SubjectKey subjectKey0 = new SubjectKey();
      // Undeclared exception!
      try { 
        subjectData0.createSubject(subjectKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "gby]S", 0, 0, "", "gby]S", (-103), "", "Hrq!T*8F$#S+.ZX");
      String string0 = subjectData0.getPreRequirements();
      assertEquals("gby]S", subjectData0.getEquivalentCodes());
      assertEquals(0, subjectData0.getCredits());
      assertEquals("Hrq!T*8F$#S+.ZX", subjectData0.getCoRequirements());
      assertEquals("", string0);
      assertEquals((-103), subjectData0.getIdealTerm());
      assertEquals("gby]S", subjectData0.getType());
      assertEquals(0, subjectData0.getHours());
      assertEquals("", subjectData0.getAcademicUnitId());
      assertEquals("", subjectData0.getName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData(" uA+2{Xq76#WD", " uA+2{Xq76#WD", 0, 0, " uA+2{Xq76#WD", " uA+2{Xq76#WD", 0, " uA+2{Xq76#WD", " uA+2{Xq76#WD");
      subjectData0.getType();
      assertEquals(0, subjectData0.getCredits());
      assertEquals(0, subjectData0.getHours());
      assertEquals(0, subjectData0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", (-5895), 225, "", "", 225, "H*&#1E^hb5Tc", "");
      int int0 = subjectData0.getCredits();
      assertEquals("", subjectData0.getAcademicUnitId());
      assertEquals("", subjectData0.getCoRequirements());
      assertEquals("", subjectData0.getEquivalentCodes());
      assertEquals("", subjectData0.getType());
      assertEquals((-5895), int0);
      assertEquals("H*&#1E^hb5Tc", subjectData0.getPreRequirements());
      assertEquals(225, subjectData0.getIdealTerm());
      assertEquals(225, subjectData0.getHours());
      assertEquals("", subjectData0.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "gby]S", 0, 0, "", "gby]S", (-103), "", "Hrq!T*8F$#S+.ZX");
      String string0 = subjectData0.getName();
      assertEquals((-103), subjectData0.getIdealTerm());
      assertEquals("", string0);
      assertEquals(0, subjectData0.getCredits());
      assertEquals("Hrq!T*8F$#S+.ZX", subjectData0.getCoRequirements());
      assertEquals("", subjectData0.getAcademicUnitId());
      assertEquals(0, subjectData0.getHours());
      assertEquals("gby]S", subjectData0.getEquivalentCodes());
      assertEquals("gby]S", subjectData0.getType());
      assertEquals("", subjectData0.getPreRequirements());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", (-5895), 225, "", "", 225, "H*&#1E^hb5Tc", "");
      String string0 = subjectData0.getCoRequirements();
      assertEquals("H*&#1E^hb5Tc", subjectData0.getPreRequirements());
      assertEquals(225, subjectData0.getHours());
      assertEquals("", subjectData0.getEquivalentCodes());
      assertEquals("", subjectData0.getType());
      assertEquals("", string0);
      assertEquals(225, subjectData0.getIdealTerm());
      assertEquals("", subjectData0.getAcademicUnitId());
      assertEquals("", subjectData0.getName());
      assertEquals((-5895), subjectData0.getCredits());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", 0, 0, "", " tR'Ks:t@b", 0, "", "");
      subjectData0.getEquivalentCodes();
      assertEquals(0, subjectData0.getHours());
      assertEquals(0, subjectData0.getCredits());
      assertEquals(0, subjectData0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", 1, 1, "", "", 0, "3Cxy+:e7[&bbD]u", "");
      String string0 = subjectData0.getAcademicUnitId();
      assertEquals("", subjectData0.getName());
      assertEquals(1, subjectData0.getCredits());
      assertEquals("", string0);
      assertEquals("", subjectData0.getEquivalentCodes());
      assertEquals("", subjectData0.getType());
      assertEquals("", subjectData0.getCoRequirements());
      assertEquals("3Cxy+:e7[&bbD]u", subjectData0.getPreRequirements());
      assertEquals(1, subjectData0.getHours());
      assertEquals(0, subjectData0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("Subject{courseCode='", ", equivalentCodesList=", 140, 140, "Subject{courseCode='", "", 140, ", equivalentCodesList=", "Subject{courseCode='");
      int int0 = subjectData0.getIdealTerm();
      assertEquals(140, int0);
      assertEquals(", equivalentCodesList=", subjectData0.getPreRequirements());
      assertEquals(140, subjectData0.getCredits());
      assertEquals(", equivalentCodesList=", subjectData0.getType());
      assertEquals("Subject{courseCode='", subjectData0.getCoRequirements());
      assertEquals("", subjectData0.getEquivalentCodes());
      assertEquals("Subject{courseCode='", subjectData0.getName());
      assertEquals(140, subjectData0.getHours());
      assertEquals("Subject{courseCode='", subjectData0.getAcademicUnitId());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      int int0 = subjectData0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("9", "9", (-43), (-43), "9", "9", (-43), "9", "9");
      Collection<String> collection0 = subjectData0.getPreRequirementsList();
      assertEquals((-43), subjectData0.getIdealTerm());
      assertTrue(collection0.contains("9"));
      assertEquals((-43), subjectData0.getHours());
      assertEquals((-43), subjectData0.getCredits());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("9", "9", (-43), (-43), "9", "9", (-43), "9", "9");
      Collection<String> collection0 = subjectData0.getEquivalentCodesList();
      assertEquals((-43), subjectData0.getHours());
      assertEquals((-43), subjectData0.getCredits());
      assertTrue(collection0.contains("9"));
      assertEquals((-43), subjectData0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("9", "9", (-43), (-43), "9", "9", (-43), "9", "9");
      String string0 = subjectData0.toString();
      assertEquals("SubjectData{academicUnitId='9', type='9', credits=-43, hours=-43, name='9', equivalentCodes='9', idealTerm=-43, preRequirements='9', coRequirements='9'}", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("9", "9", (-43), (-43), "9", "9", (-43), "9", "9");
      subjectData0.setAcademicUnitId("9");
      assertEquals((-43), subjectData0.getCredits());
      assertEquals((-43), subjectData0.getHours());
      assertEquals((-43), subjectData0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("9", "9", (-43), (-43), "9", "9", (-43), "9", "9");
      Collection<String> collection0 = subjectData0.getCoRequirementsList();
      assertEquals((-43), subjectData0.getCredits());
      assertEquals((-43), subjectData0.getHours());
      assertEquals((-43), subjectData0.getIdealTerm());
      assertTrue(collection0.contains("9"));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("6:]<CDhwy.V:n6)isK", "6:]<CDhwy.V:n6)isK", (-4), (-4), "6:]<CDhwy.V:n6)isK", "6:]<CDhwy.V:n6)isK", (-4), "6:]<CDhwy.V:n6)isK", "6:]<CDhwy.V:n6)isK");
      subjectData0.setCredits((-4));
      assertEquals((-4), subjectData0.getIdealTerm());
      assertEquals((-4), subjectData0.getHours());
      assertEquals((-4), subjectData0.getCredits());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("9", "9", (-43), (-43), "9", "9", (-43), "9", "9");
      subjectData0.setName("9");
      assertEquals((-43), subjectData0.getHours());
      assertEquals((-43), subjectData0.getCredits());
      assertEquals((-43), subjectData0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      subjectData0.setPreRequirements("R1&)0=#");
      assertNull(subjectData0.getCoRequirements());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      subjectData0.setCoRequirements("R1&)0=#");
      assertEquals(0, subjectData0.getCredits());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("9", "9", (-43), (-43), "9", "9", (-43), "9", "9");
      subjectData0.setType("9");
      assertEquals((-43), subjectData0.getHours());
      assertEquals((-43), subjectData0.getCredits());
      assertEquals((-43), subjectData0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("9", "9", (-43), (-43), "9", "9", (-43), "9", "9");
      subjectData0.setEquivalentCodes("");
      Collection<String> collection0 = subjectData0.getEquivalentCodesList();
      assertEquals((-43), subjectData0.getCredits());
      assertEquals((-43), subjectData0.getIdealTerm());
      assertEquals((-43), subjectData0.getHours());
      assertFalse(collection0.contains(""));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("6:]<CDhwy.V:n6)isK", "6:]<CDhwy.V:n6)isK", (-4), (-4), "6:]<CDhwy.V:n6)isK", "6:]<CDhwy.V:n6)isK", (-4), "6:]<CDhwy.V:n6)isK", "6:]<CDhwy.V:n6)isK");
      SubjectKey subjectKey0 = new SubjectKey();
      Subject subject0 = subjectData0.createSubject(subjectKey0);
      assertTrue(subject0.isComposed());
      assertEquals((-4), subject0.getHours());
      assertEquals((-4), subject0.getIdealTerm());
      assertEquals((-4), subject0.getCredits());
  }
}
