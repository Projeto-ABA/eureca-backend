/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 22:25:39 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.SubjectKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubjectKey_ESTest extends SubjectKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey();
      String string0 = subjectKey0.getSubjectCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey("QCn7wy'{3/OUIf", "{DyAoirfv&A}y}", "4$$@DL'Xi]");
      String string0 = subjectKey0.getSubjectCode();
      assertEquals("4$$@DL'Xi]", string0);
      assertEquals("{DyAoirfv&A}y}", subjectKey0.getCurriculumCode());
      assertEquals("QCn7wy'{3/OUIf", subjectKey0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey("`&L@NI/t$9H", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.SubjectKey", "z6&yV=GB-0Wz:l");
      String string0 = subjectKey0.getCurriculumCode();
      assertEquals("z6&yV=GB-0Wz:l", subjectKey0.getSubjectCode());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.SubjectKey", string0);
      assertEquals("`&L@NI/t$9H", subjectKey0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey("U(;z", "U(;z", "U(;z");
      String string0 = subjectKey0.getCourseCode();
      assertEquals("U(;z", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey();
      int int0 = subjectKey0.compareTo(subjectKey0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey();
      SubjectKey subjectKey1 = new SubjectKey("", "", "");
      int int0 = subjectKey0.compareTo(subjectKey1);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey("cJ", "w=AtyCv", "w=AtyCv");
      SubjectKey subjectKey1 = new SubjectKey();
      int int0 = subjectKey0.compareTo(subjectKey1);
      assertEquals("w=AtyCv", subjectKey0.getCurriculumCode());
      assertEquals((-11), int0);
      assertEquals("w=AtyCv", subjectKey0.getSubjectCode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey();
      // Undeclared exception!
      try { 
        subjectKey0.compareTo("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.SubjectKey
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.SubjectKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey();
      String string0 = subjectKey0.getCourseCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey("", "&O>V?", "");
      String string0 = subjectKey0.getSubjectCode();
      assertEquals("", subjectKey0.getCourseCode());
      assertEquals("", string0);
      assertEquals("&O>V?", subjectKey0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey();
      String string0 = subjectKey0.getCurriculumCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey("SubjectKey{courseCode='null', curriculumCode='null', subjectCode='null'}", "", "");
      SubjectKey subjectKey1 = new SubjectKey("SubjectKey{courseCode='null', curriculumCode='null', subjectCode='null'}", "", "");
      boolean boolean0 = subjectKey0.equals(subjectKey1);
      assertEquals("", subjectKey1.getCurriculumCode());
      assertEquals("", subjectKey1.getSubjectCode());
      assertEquals("SubjectKey{courseCode='null', curriculumCode='null', subjectCode='null'}", subjectKey1.getCourseCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey();
      subjectKey0.setCourseCode("cP%");
      subjectKey0.setSubjectCode("@}`+Bn1NbcKoE");
      subjectKey0.setCurriculumCode("cP%");
      SubjectKey subjectKey1 = new SubjectKey("cP%", "cP%", "@X`+Bn1NbcKoE");
      boolean boolean0 = subjectKey0.equals(subjectKey1);
      assertFalse(boolean0);
      assertEquals("@X`+Bn1NbcKoE", subjectKey1.getSubjectCode());
      assertEquals("cP%", subjectKey1.getCurriculumCode());
      assertEquals("cP%", subjectKey1.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey();
      subjectKey0.setCourseCode("cP%");
      subjectKey0.setCurriculumCode("cP%");
      SubjectKey subjectKey1 = new SubjectKey("cP%", "cP%", "@X`+Bn1NbcKoE");
      // Undeclared exception!
      try { 
        subjectKey0.equals(subjectKey1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey("C", "C", "C");
      SubjectKey subjectKey1 = new SubjectKey("D", "D", "C");
      boolean boolean0 = subjectKey0.equals(subjectKey1);
      assertFalse(boolean0);
      assertEquals("D", subjectKey1.getCurriculumCode());
      assertEquals("C", subjectKey1.getSubjectCode());
      assertEquals("D", subjectKey1.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey();
      boolean boolean0 = subjectKey0.equals("@}`+Bn1NbcKoE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey();
      boolean boolean0 = subjectKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey();
      boolean boolean0 = subjectKey0.equals(subjectKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey();
      String string0 = subjectKey0.toString();
      assertEquals("SubjectKey{courseCode='null', curriculumCode='null', subjectCode='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey();
      subjectKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey();
      // Undeclared exception!
      try { 
        subjectKey0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.SubjectKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey();
      subjectKey0.setCourseCode("");
      String string0 = subjectKey0.getCourseCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey();
      subjectKey0.setCurriculumCode("");
      String string0 = subjectKey0.getCurriculumCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SubjectKey subjectKey0 = new SubjectKey("C", "C", "C");
      SubjectKey subjectKey1 = new SubjectKey("C", "D", "C");
      boolean boolean0 = subjectKey0.equals(subjectKey1);
      assertFalse(boolean0);
      assertEquals("C", subjectKey1.getSubjectCode());
      assertEquals("C", subjectKey1.getCourseCode());
  }
}
