/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 22:52:59 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.DetailedSubjectDemand;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.SubjectDemand;
import br.edu.ufcg.computacao.eureca.backend.core.models.Subject;
import java.time.ZoneId;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DetailedSubjectDemand_ESTest extends DetailedSubjectDemand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject("c{Pj;Bl)0$naF", "$GGYDNKh[e", "$GGYDNKh[e", "c{Pj;Bl)0$naF", "c{Pj;Bl)0$naF", 125, 1, "c{Pj;Bl)0$naF", priorityQueue0, 125, priorityQueue0, priorityQueue0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DetailedSubjectDemand detailedSubjectDemand0 = new DetailedSubjectDemand(subject0, hashMap0);
      detailedSubjectDemand0.setDemandByTerm((Map<Integer, Integer>) null);
      Map<Integer, Integer> map0 = detailedSubjectDemand0.getDemandByTerm();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("", "", "", "", "", (-1), (-1), "", linkedHashSet0, (-1), linkedHashSet0, linkedHashSet0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DetailedSubjectDemand detailedSubjectDemand0 = new DetailedSubjectDemand(subject0, hashMap0);
      Integer integer0 = new Integer((-1));
      hashMap0.putIfAbsent(integer0, integer0);
      Map<Integer, Integer> map0 = detailedSubjectDemand0.getDemandByTerm();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject("", "", "", "h{}7}j,.2/L\"!?$G&.", "", (-1255), (-1255), "", priorityQueue0, 52, priorityQueue0, priorityQueue0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DetailedSubjectDemand detailedSubjectDemand0 = new DetailedSubjectDemand(subject0, hashMap0);
      detailedSubjectDemand0.setDemand((SubjectDemand) null);
      SubjectDemand subjectDemand0 = detailedSubjectDemand0.getDemand();
      assertNull(subjectDemand0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("", "", "", "", "", 2063, 2063, "NOT_NULL", stack0, 2063, stack0, stack0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(2063);
      hashMap0.put(integer0, integer0);
      DetailedSubjectDemand detailedSubjectDemand0 = new DetailedSubjectDemand(subject0, hashMap0);
      SubjectDemand subjectDemand0 = detailedSubjectDemand0.getDemand();
      assertEquals(2063, subjectDemand0.getTotalDemand());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject("", "DetailedSubjectDemand{demandByTerm=", "DetailedSubjectDemand{demandByTerm=", "DetailedSubjectDemand{demandByTerm=", "DetailedSubjectDemand{demandByTerm=", (-2392), 0, "", priorityQueue0, 1720, priorityQueue0, priorityQueue0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-2392));
      hashMap0.put(integer0, integer0);
      DetailedSubjectDemand detailedSubjectDemand0 = new DetailedSubjectDemand(subject0, hashMap0);
      SubjectDemand subjectDemand0 = detailedSubjectDemand0.getDemand();
      assertEquals((-2392), subjectDemand0.getTotalDemand());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject("", "", "", "h{}7}j,.2/L\"!?$G&.", "", (-1255), (-1255), "", priorityQueue0, 63, priorityQueue0, priorityQueue0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DetailedSubjectDemand detailedSubjectDemand0 = new DetailedSubjectDemand(subject0, hashMap0);
      SubjectDemand subjectDemand0 = new SubjectDemand("", "Q,l", (-1255));
      detailedSubjectDemand0.setDemand(subjectDemand0);
      DetailedSubjectDemand detailedSubjectDemand1 = new DetailedSubjectDemand(subject0, hashMap0);
      int int0 = detailedSubjectDemand0.compareTo(detailedSubjectDemand1);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Subject subject0 = new Subject("", "", "", "", "", 40, 0, "", set0, 189, set0, set0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DetailedSubjectDemand detailedSubjectDemand0 = new DetailedSubjectDemand(subject0, hashMap0);
      Subject subject1 = new Subject("", "xP]Y", "DetailedSubjectDemand{demandByTerm={-549=-549}, demand=DetailedSubjectDemand{subjectCode='', subjectName='', totalDemand=0}}", "m79c3HHmmT*R%", "", (-1), (-549), "org.apache.commons.io.filefilter.DirectoryFileFilter", set0, (-1), set0, set0);
      DetailedSubjectDemand detailedSubjectDemand1 = new DetailedSubjectDemand(subject1, hashMap0);
      int int0 = detailedSubjectDemand0.compareTo(detailedSubjectDemand1);
      assertEquals((-52), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Subject subject0 = new Subject("", "", "", "u(#)OQ74H", "^?7", 1, 1246, "y", set0, 1, set0, set0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DetailedSubjectDemand detailedSubjectDemand0 = new DetailedSubjectDemand(subject0, hashMap0);
      // Undeclared exception!
      try { 
        detailedSubjectDemand0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.DetailedSubjectDemand", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) treeSet0, locale_FilteringMode0);
      Subject subject0 = new Subject("", "", "v\"", "S5'|FeA)n?", "", 0, 0, "", list0, (-515), treeSet0, treeSet0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DetailedSubjectDemand detailedSubjectDemand0 = new DetailedSubjectDemand(subject0, hashMap0);
      // Undeclared exception!
      try { 
        detailedSubjectDemand0.compareTo(treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.TreeSet cannot be cast to br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.DetailedSubjectDemand
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.DetailedSubjectDemand", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("", "", "", "", "", (-1), (-1), "", linkedHashSet0, (-1), linkedHashSet0, linkedHashSet0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DetailedSubjectDemand detailedSubjectDemand0 = new DetailedSubjectDemand(subject0, hashMap0);
      Map<Integer, Integer> map0 = detailedSubjectDemand0.getDemandByTerm();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("", "", "", "", "", (-1), (-1), "", linkedHashSet0, (-1), linkedHashSet0, linkedHashSet0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DetailedSubjectDemand detailedSubjectDemand0 = new DetailedSubjectDemand(subject0, hashMap0);
      int int0 = detailedSubjectDemand0.compareTo(detailedSubjectDemand0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("", "", "", "", "", (-1), (-1), "", linkedHashSet0, (-1), linkedHashSet0, linkedHashSet0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DetailedSubjectDemand detailedSubjectDemand0 = new DetailedSubjectDemand(subject0, hashMap0);
      String string0 = detailedSubjectDemand0.toString();
      assertEquals("DetailedSubjectDemand{demandByTerm={}, demand=DetailedSubjectDemand{subjectCode='', subjectName='', totalDemand=0}}", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("", "", "", "", "", (-1), (-1), "", linkedHashSet0, (-1), linkedHashSet0, linkedHashSet0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DetailedSubjectDemand detailedSubjectDemand0 = new DetailedSubjectDemand(subject0, hashMap0);
      SubjectDemand subjectDemand0 = detailedSubjectDemand0.getDemand();
      detailedSubjectDemand0.setDemand(subjectDemand0);
      assertEquals(0, subjectDemand0.getTotalDemand());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DetailedSubjectDemand detailedSubjectDemand0 = null;
      try {
        detailedSubjectDemand0 = new DetailedSubjectDemand((Subject) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.DetailedSubjectDemand", e);
      }
  }
}
