/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:47:02 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.subject;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetrics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubjectMetrics_ESTest extends SubjectMetrics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      SubjectMetrics subjectMetrics1 = new SubjectMetrics((-119), (-1134), 0, 0, 0, 0, 125, 0, (-119));
      subjectMetrics0.add(subjectMetrics1);
      assertEquals(125, subjectMetrics0.getSuspended());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(0, 0, 0, 0, 0, 0, 0, 0, 3303);
      int int0 = subjectMetrics0.getTotalEnrolled();
      assertEquals(0, subjectMetrics0.getSucceeded());
      assertEquals(3303, int0);
      assertEquals(0, subjectMetrics0.getExempted());
      assertEquals(0, subjectMetrics0.getOngoing());
      assertEquals(0, subjectMetrics0.getCancelled());
      assertEquals(0, subjectMetrics0.getFailedDueToGrade());
      assertEquals(0, subjectMetrics0.getNumberOfClasses());
      assertEquals(0, subjectMetrics0.getSuspended());
      assertEquals(0, subjectMetrics0.getFailedDueToAbsences());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(1, (-1616), (-1616), 1, (-1), 0, 3525, (-1616), (-1355));
      int int0 = subjectMetrics0.getTotalEnrolled();
      assertEquals(1, subjectMetrics0.getFailedDueToAbsences());
      assertEquals((-1355), int0);
      assertEquals(3525, subjectMetrics0.getSuspended());
      assertEquals((-1), subjectMetrics0.getOngoing());
      assertEquals(1, subjectMetrics0.getSucceeded());
      assertEquals((-1616), subjectMetrics0.getNumberOfClasses());
      assertEquals(0, subjectMetrics0.getExempted());
      assertEquals((-1616), subjectMetrics0.getFailedDueToGrade());
      assertEquals((-1616), subjectMetrics0.getCancelled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      int int0 = subjectMetrics0.getSuspended();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(1829, (-2767), 1190, (-1), (-2767), (-639), (-1), (-2968), 809);
      int int0 = subjectMetrics0.getSuspended();
      assertEquals(809, subjectMetrics0.getTotalEnrolled());
      assertEquals(1190, subjectMetrics0.getCancelled());
      assertEquals((-639), subjectMetrics0.getExempted());
      assertEquals((-1), subjectMetrics0.getSucceeded());
      assertEquals((-2767), subjectMetrics0.getOngoing());
      assertEquals((-2767), subjectMetrics0.getFailedDueToGrade());
      assertEquals((-2968), subjectMetrics0.getNumberOfClasses());
      assertEquals(1829, subjectMetrics0.getFailedDueToAbsences());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(0, 0, 2098, 2098, 0, 1434, 2098, 0, 2090);
      int int0 = subjectMetrics0.getSucceeded();
      assertEquals(0, subjectMetrics0.getFailedDueToAbsences());
      assertEquals(0, subjectMetrics0.getFailedDueToGrade());
      assertEquals(0, subjectMetrics0.getNumberOfClasses());
      assertEquals(2098, int0);
      assertEquals(2098, subjectMetrics0.getCancelled());
      assertEquals(2098, subjectMetrics0.getSuspended());
      assertEquals(1434, subjectMetrics0.getExempted());
      assertEquals(2090, subjectMetrics0.getTotalEnrolled());
      assertEquals(0, subjectMetrics0.getOngoing());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(0, 0, 301, 186, 301, 186, 0, (-2094), 125);
      subjectMetrics0.setSucceeded((-1395));
      int int0 = subjectMetrics0.getSucceeded();
      assertEquals((-1395), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      int int0 = subjectMetrics0.getOngoing();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      subjectMetrics0.setOngoing(125);
      int int0 = subjectMetrics0.getOngoing();
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(0, 0, 0, 0, 895, 0, 208, 1, 208);
      int int0 = subjectMetrics0.getNumberOfClasses();
      assertEquals(0, subjectMetrics0.getExempted());
      assertEquals(895, subjectMetrics0.getOngoing());
      assertEquals(0, subjectMetrics0.getSucceeded());
      assertEquals(208, subjectMetrics0.getSuspended());
      assertEquals(0, subjectMetrics0.getFailedDueToAbsences());
      assertEquals(1, int0);
      assertEquals(0, subjectMetrics0.getCancelled());
      assertEquals(208, subjectMetrics0.getTotalEnrolled());
      assertEquals(0, subjectMetrics0.getFailedDueToGrade());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(2189, 2189, 2189, 125, 2189, 1161, (-1984), (-1984), (-1984));
      int int0 = subjectMetrics0.getNumberOfClasses();
      assertEquals(1161, subjectMetrics0.getExempted());
      assertEquals(2189, subjectMetrics0.getCancelled());
      assertEquals((-1984), int0);
      assertEquals(2189, subjectMetrics0.getFailedDueToGrade());
      assertEquals(2189, subjectMetrics0.getFailedDueToAbsences());
      assertEquals((-1984), subjectMetrics0.getTotalEnrolled());
      assertEquals(125, subjectMetrics0.getSucceeded());
      assertEquals(2189, subjectMetrics0.getOngoing());
      assertEquals((-1984), subjectMetrics0.getSuspended());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      SubjectMetrics subjectMetrics1 = new SubjectMetrics(1, 1218, 0, (-1557), (-1683), (-1557), (-1683), 1, 0);
      subjectMetrics0.add(subjectMetrics1);
      int int0 = subjectMetrics0.getFailedDueToGrade();
      assertEquals(1, subjectMetrics0.getNumberOfClasses());
      assertEquals(1218, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(0, (-1075), (-1), 0, 333, (-1075), (-414), (-984), (-1075));
      int int0 = subjectMetrics0.getFailedDueToGrade();
      assertEquals((-1075), int0);
      assertEquals((-1075), subjectMetrics0.getExempted());
      assertEquals((-984), subjectMetrics0.getNumberOfClasses());
      assertEquals(0, subjectMetrics0.getFailedDueToAbsences());
      assertEquals((-414), subjectMetrics0.getSuspended());
      assertEquals(333, subjectMetrics0.getOngoing());
      assertEquals(0, subjectMetrics0.getSucceeded());
      assertEquals((-1), subjectMetrics0.getCancelled());
      assertEquals((-1075), subjectMetrics0.getTotalEnrolled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(1, (-1616), (-1616), 1, (-1), 0, 3525, (-1616), (-1355));
      int int0 = subjectMetrics0.getFailedDueToAbsences();
      assertEquals((-1355), subjectMetrics0.getTotalEnrolled());
      assertEquals(0, subjectMetrics0.getExempted());
      assertEquals((-1616), subjectMetrics0.getFailedDueToGrade());
      assertEquals((-1616), subjectMetrics0.getCancelled());
      assertEquals(1, int0);
      assertEquals(1, subjectMetrics0.getSucceeded());
      assertEquals((-1616), subjectMetrics0.getNumberOfClasses());
      assertEquals(3525, subjectMetrics0.getSuspended());
      assertEquals((-1), subjectMetrics0.getOngoing());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(0, 0, 2098, 2098, 0, 1434, 2098, 0, 2090);
      subjectMetrics0.setFailedDueToAbsences((-2566));
      int int0 = subjectMetrics0.getFailedDueToAbsences();
      assertEquals((-2566), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      int int0 = subjectMetrics0.getExempted();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(738, 738, 738, 738, 738, (-89), 0, 4807, (-186));
      int int0 = subjectMetrics0.getExempted();
      assertEquals(738, subjectMetrics0.getFailedDueToGrade());
      assertEquals(738, subjectMetrics0.getCancelled());
      assertEquals(738, subjectMetrics0.getOngoing());
      assertEquals((-89), int0);
      assertEquals(738, subjectMetrics0.getSucceeded());
      assertEquals((-186), subjectMetrics0.getTotalEnrolled());
      assertEquals(4807, subjectMetrics0.getNumberOfClasses());
      assertEquals(0, subjectMetrics0.getSuspended());
      assertEquals(738, subjectMetrics0.getFailedDueToAbsences());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(0, 0, 301, 186, 301, 186, 0, (-2094), 125);
      int int0 = subjectMetrics0.getCancelled();
      assertEquals((-2094), subjectMetrics0.getNumberOfClasses());
      assertEquals(301, subjectMetrics0.getOngoing());
      assertEquals(0, subjectMetrics0.getSuspended());
      assertEquals(186, subjectMetrics0.getExempted());
      assertEquals(0, subjectMetrics0.getFailedDueToAbsences());
      assertEquals(0, subjectMetrics0.getFailedDueToGrade());
      assertEquals(301, int0);
      assertEquals(125, subjectMetrics0.getTotalEnrolled());
      assertEquals(186, subjectMetrics0.getSucceeded());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      SubjectMetrics subjectMetrics1 = new SubjectMetrics(2236, 0, (-1), (-1), 0, (-24), 1, (-1), 0);
      subjectMetrics0.add(subjectMetrics1);
      int int0 = subjectMetrics0.getCancelled();
      assertEquals((-24), subjectMetrics0.getExempted());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      // Undeclared exception!
      try { 
        subjectMetrics0.add((SubjectMetrics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetrics", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      int int0 = subjectMetrics0.getTotalEnrolled();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics((-1), (-4592), (-1), (-1), (-4592), 2030, 2030, (-4592), (-5479));
      int int0 = subjectMetrics0.getSuspended();
      assertEquals((-4592), subjectMetrics0.getOngoing());
      assertEquals((-1), subjectMetrics0.getCancelled());
      assertEquals((-5479), subjectMetrics0.getTotalEnrolled());
      assertEquals(2030, subjectMetrics0.getExempted());
      assertEquals((-1), subjectMetrics0.getSucceeded());
      assertEquals((-1), subjectMetrics0.getFailedDueToAbsences());
      assertEquals((-4592), subjectMetrics0.getNumberOfClasses());
      assertEquals(2030, int0);
      assertEquals((-4592), subjectMetrics0.getFailedDueToGrade());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      int int0 = subjectMetrics0.getCancelled();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      int int0 = subjectMetrics0.getFailedDueToGrade();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      int int0 = subjectMetrics0.getFailedDueToAbsences();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      int int0 = subjectMetrics0.getSucceeded();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics((-1059), 0, 0, 1062, 0, 2703, 1062, 0, 1062);
      int int0 = subjectMetrics0.getExempted();
      assertEquals(0, subjectMetrics0.getNumberOfClasses());
      assertEquals(0, subjectMetrics0.getCancelled());
      assertEquals(0, subjectMetrics0.getFailedDueToGrade());
      assertEquals((-1059), subjectMetrics0.getFailedDueToAbsences());
      assertEquals(1062, subjectMetrics0.getSuspended());
      assertEquals(1062, subjectMetrics0.getTotalEnrolled());
      assertEquals(1062, subjectMetrics0.getSucceeded());
      assertEquals(2703, int0);
      assertEquals(0, subjectMetrics0.getOngoing());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(0, 0, (-3479), (-3479), 1, 0, 0, 0, 4510);
      int int0 = subjectMetrics0.getNumberOfClasses();
      assertEquals(0, subjectMetrics0.getFailedDueToAbsences());
      assertEquals((-3479), subjectMetrics0.getSucceeded());
      assertEquals(0, int0);
      assertEquals(0, subjectMetrics0.getFailedDueToGrade());
      assertEquals(1, subjectMetrics0.getOngoing());
      assertEquals(4510, subjectMetrics0.getTotalEnrolled());
      assertEquals((-3479), subjectMetrics0.getCancelled());
      assertEquals(0, subjectMetrics0.getExempted());
      assertEquals(0, subjectMetrics0.getSuspended());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(1, (-1616), (-1616), 1, (-1), 0, 3525, (-1616), (-1355));
      int int0 = subjectMetrics0.getOngoing();
      assertEquals(0, subjectMetrics0.getExempted());
      assertEquals((-1355), subjectMetrics0.getTotalEnrolled());
      assertEquals(1, subjectMetrics0.getSucceeded());
      assertEquals((-1616), subjectMetrics0.getNumberOfClasses());
      assertEquals(1, subjectMetrics0.getFailedDueToAbsences());
      assertEquals((-1616), subjectMetrics0.getCancelled());
      assertEquals((-1616), subjectMetrics0.getFailedDueToGrade());
      assertEquals(3525, subjectMetrics0.getSuspended());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      subjectMetrics0.setExempted(0);
      assertEquals(0, subjectMetrics0.getExempted());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(15, 15, 15, 15, 15, 15, 15, 15, 15);
      String string0 = subjectMetrics0.toString();
      assertEquals("SubjectMetrics{failedDueToAbsences=15, failedDueToGrade=15, cancelled=15, succeeded=15, ongoing=15, exempted=15, suspended=15, numberOfClasses=15, totalEnrolled=15}", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(15, 15, 15, 15, 15, 15, 15, 15, 15);
      subjectMetrics0.setTotalEnrolled(15);
      assertEquals(15, subjectMetrics0.getTotalEnrolled());
      assertEquals(15, subjectMetrics0.getFailedDueToGrade());
      assertEquals(15, subjectMetrics0.getCancelled());
      assertEquals(15, subjectMetrics0.getExempted());
      assertEquals(15, subjectMetrics0.getNumberOfClasses());
      assertEquals(15, subjectMetrics0.getOngoing());
      assertEquals(15, subjectMetrics0.getSucceeded());
      assertEquals(15, subjectMetrics0.getFailedDueToAbsences());
      assertEquals(15, subjectMetrics0.getSuspended());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(15, 15, 15, 15, 15, 15, 15, 15, 15);
      subjectMetrics0.setFailedDueToGrade(15);
      assertEquals(15, subjectMetrics0.getFailedDueToGrade());
      assertEquals(15, subjectMetrics0.getFailedDueToAbsences());
      assertEquals(15, subjectMetrics0.getTotalEnrolled());
      assertEquals(15, subjectMetrics0.getExempted());
      assertEquals(15, subjectMetrics0.getCancelled());
      assertEquals(15, subjectMetrics0.getNumberOfClasses());
      assertEquals(15, subjectMetrics0.getOngoing());
      assertEquals(15, subjectMetrics0.getSucceeded());
      assertEquals(15, subjectMetrics0.getSuspended());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(15, 15, 15, 15, 15, 15, 15, 15, 15);
      subjectMetrics0.setSuspended(15);
      assertEquals(15, subjectMetrics0.getFailedDueToGrade());
      assertEquals(15, subjectMetrics0.getTotalEnrolled());
      assertEquals(15, subjectMetrics0.getFailedDueToAbsences());
      assertEquals(15, subjectMetrics0.getSuspended());
      assertEquals(15, subjectMetrics0.getNumberOfClasses());
      assertEquals(15, subjectMetrics0.getCancelled());
      assertEquals(15, subjectMetrics0.getExempted());
      assertEquals(15, subjectMetrics0.getOngoing());
      assertEquals(15, subjectMetrics0.getSucceeded());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(15, 15, 15, 15, 15, 15, 15, 15, 15);
      subjectMetrics0.setNumberOfClasses(15);
      assertEquals(15, subjectMetrics0.getCancelled());
      assertEquals(15, subjectMetrics0.getFailedDueToGrade());
      assertEquals(15, subjectMetrics0.getTotalEnrolled());
      assertEquals(15, subjectMetrics0.getSucceeded());
      assertEquals(15, subjectMetrics0.getOngoing());
      assertEquals(15, subjectMetrics0.getExempted());
      assertEquals(15, subjectMetrics0.getNumberOfClasses());
      assertEquals(15, subjectMetrics0.getSuspended());
      assertEquals(15, subjectMetrics0.getFailedDueToAbsences());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(15, 15, 15, 15, 15, 15, 15, 15, 15);
      subjectMetrics0.setCancelled(15);
      assertEquals(15, subjectMetrics0.getSuspended());
      assertEquals(15, subjectMetrics0.getSucceeded());
      assertEquals(15, subjectMetrics0.getCancelled());
      assertEquals(15, subjectMetrics0.getFailedDueToAbsences());
      assertEquals(15, subjectMetrics0.getExempted());
      assertEquals(15, subjectMetrics0.getNumberOfClasses());
      assertEquals(15, subjectMetrics0.getFailedDueToGrade());
      assertEquals(15, subjectMetrics0.getTotalEnrolled());
      assertEquals(15, subjectMetrics0.getOngoing());
  }
}
