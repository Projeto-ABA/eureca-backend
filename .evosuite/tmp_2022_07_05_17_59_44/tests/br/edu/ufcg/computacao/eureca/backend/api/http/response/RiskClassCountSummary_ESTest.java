/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:01:47 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.RiskClassCountSummary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RiskClassCountSummary_ESTest extends RiskClassCountSummary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 0, 0, 0, 0, 0);
      RiskClassCountSummary riskClassCountSummary1 = new RiskClassCountSummary(0, 0, 831, 0, (-4198), 1, 0);
      riskClassCountSummary0.add(riskClassCountSummary1);
      assertEquals(831, riskClassCountSummary0.getLow());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary((-1101), (-1101), 0, 0, 0, 0, 0);
      RiskClassCountSummary riskClassCountSummary1 = new RiskClassCountSummary((-1101), (-557), 0, (-2144), 0, (-1), (-2144));
      riskClassCountSummary0.add(riskClassCountSummary1);
      assertEquals((-2202), riskClassCountSummary0.getInaccurate());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, (-645), 0, (-1), 1009, (-645), 0);
      riskClassCountSummary0.setUnfeasible(4792);
      int int0 = riskClassCountSummary0.getUnfeasible();
      assertEquals(4792, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary((-1239), 0, (-1), 0, (-987), 0, (-1));
      int int0 = riskClassCountSummary0.getSafe();
      assertEquals(0, riskClassCountSummary0.getAverage());
      assertEquals((-1239), riskClassCountSummary0.getInaccurate());
      assertEquals((-1), riskClassCountSummary0.getLow());
      assertEquals((-987), riskClassCountSummary0.getHigh());
      assertEquals(0, int0);
      assertEquals((-1), riskClassCountSummary0.getNotApplicable());
      assertEquals(0, riskClassCountSummary0.getUnfeasible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(2097, 2097, 2199, 2199, (-1), 0, (-1));
      int int0 = riskClassCountSummary0.getSafe();
      assertEquals(2199, riskClassCountSummary0.getLow());
      assertEquals((-1), riskClassCountSummary0.getHigh());
      assertEquals(0, riskClassCountSummary0.getUnfeasible());
      assertEquals(2199, riskClassCountSummary0.getAverage());
      assertEquals((-1), riskClassCountSummary0.getNotApplicable());
      assertEquals(2097, riskClassCountSummary0.getInaccurate());
      assertEquals(2097, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 0, 0, 0, 510, 0);
      int int0 = riskClassCountSummary0.getNotApplicable();
      assertEquals(0, riskClassCountSummary0.getHigh());
      assertEquals(0, riskClassCountSummary0.getAverage());
      assertEquals(510, riskClassCountSummary0.getUnfeasible());
      assertEquals(0, riskClassCountSummary0.getLow());
      assertEquals(0, riskClassCountSummary0.getSafe());
      assertEquals(0, riskClassCountSummary0.getInaccurate());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(365, 0, (-1), (-1), (-2344), (-1), 1);
      int int0 = riskClassCountSummary0.getNotApplicable();
      assertEquals(365, riskClassCountSummary0.getInaccurate());
      assertEquals((-1), riskClassCountSummary0.getLow());
      assertEquals((-1), riskClassCountSummary0.getUnfeasible());
      assertEquals((-1), riskClassCountSummary0.getAverage());
      assertEquals(1, int0);
      assertEquals((-2344), riskClassCountSummary0.getHigh());
      assertEquals(0, riskClassCountSummary0.getSafe());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(1962, (-3491), 1, 323, 323, 323, (-3491));
      int int0 = riskClassCountSummary0.getLow();
      assertEquals((-3491), riskClassCountSummary0.getSafe());
      assertEquals((-3491), riskClassCountSummary0.getNotApplicable());
      assertEquals(323, riskClassCountSummary0.getAverage());
      assertEquals(1962, riskClassCountSummary0.getInaccurate());
      assertEquals(1, int0);
      assertEquals(323, riskClassCountSummary0.getHigh());
      assertEquals(323, riskClassCountSummary0.getUnfeasible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary((-1305), (-1305), 0, (-941), 0, (-941), (-941));
      assertEquals(0, riskClassCountSummary0.getLow());
      
      riskClassCountSummary0.setLow((-1));
      int int0 = riskClassCountSummary0.getLow();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, (-2646), (-2646), 0, (-1316), 0);
      int int0 = riskClassCountSummary0.getInaccurate();
      assertEquals((-1316), riskClassCountSummary0.getUnfeasible());
      assertEquals((-2646), riskClassCountSummary0.getAverage());
      assertEquals(0, int0);
      assertEquals(0, riskClassCountSummary0.getSafe());
      assertEquals((-2646), riskClassCountSummary0.getLow());
      assertEquals(0, riskClassCountSummary0.getHigh());
      assertEquals(0, riskClassCountSummary0.getNotApplicable());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(127, 377, 0, 127, 377, 0, 0);
      int int0 = riskClassCountSummary0.getInaccurate();
      assertEquals(0, riskClassCountSummary0.getUnfeasible());
      assertEquals(127, int0);
      assertEquals(377, riskClassCountSummary0.getHigh());
      assertEquals(377, riskClassCountSummary0.getSafe());
      assertEquals(0, riskClassCountSummary0.getNotApplicable());
      assertEquals(127, riskClassCountSummary0.getAverage());
      assertEquals(0, riskClassCountSummary0.getLow());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(2913, 1, 1, (-133), 0, 2913, 2913);
      int int0 = riskClassCountSummary0.getHigh();
      assertEquals(0, int0);
      assertEquals(2913, riskClassCountSummary0.getNotApplicable());
      assertEquals(1, riskClassCountSummary0.getSafe());
      assertEquals((-133), riskClassCountSummary0.getAverage());
      assertEquals(1, riskClassCountSummary0.getLow());
      assertEquals(2913, riskClassCountSummary0.getUnfeasible());
      assertEquals(2913, riskClassCountSummary0.getInaccurate());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(2550, 777, 777, 777, 777, 1389, 1903);
      int int0 = riskClassCountSummary0.getHigh();
      assertEquals(2550, riskClassCountSummary0.getInaccurate());
      assertEquals(1903, riskClassCountSummary0.getNotApplicable());
      assertEquals(777, riskClassCountSummary0.getLow());
      assertEquals(1389, riskClassCountSummary0.getUnfeasible());
      assertEquals(777, int0);
      assertEquals(777, riskClassCountSummary0.getSafe());
      assertEquals(777, riskClassCountSummary0.getAverage());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 0, 0, (-904), (-904), 0);
      int int0 = riskClassCountSummary0.getAverage();
      assertEquals(0, riskClassCountSummary0.getSafe());
      assertEquals((-904), riskClassCountSummary0.getUnfeasible());
      assertEquals(0, riskClassCountSummary0.getLow());
      assertEquals(0, riskClassCountSummary0.getInaccurate());
      assertEquals((-904), riskClassCountSummary0.getHigh());
      assertEquals(0, riskClassCountSummary0.getNotApplicable());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, (-977), 0, 1615, (-977), (-977), 584);
      int int0 = riskClassCountSummary0.getAverage();
      assertEquals(1615, int0);
      assertEquals(584, riskClassCountSummary0.getNotApplicable());
      assertEquals((-977), riskClassCountSummary0.getHigh());
      assertEquals((-977), riskClassCountSummary0.getUnfeasible());
      assertEquals((-977), riskClassCountSummary0.getSafe());
      assertEquals(0, riskClassCountSummary0.getInaccurate());
      assertEquals(0, riskClassCountSummary0.getLow());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 0, 0, 0, 0, 0);
      // Undeclared exception!
      try { 
        riskClassCountSummary0.add((RiskClassCountSummary) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.RiskClassCountSummary", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary((-288), 0, (-1), (-1), 0, 0, (-1));
      int int0 = riskClassCountSummary0.getNotApplicable();
      assertEquals(0, riskClassCountSummary0.getUnfeasible());
      assertEquals(0, riskClassCountSummary0.getSafe());
      assertEquals((-1), int0);
      assertEquals((-1), riskClassCountSummary0.getAverage());
      assertEquals((-1), riskClassCountSummary0.getLow());
      assertEquals((-288), riskClassCountSummary0.getInaccurate());
      assertEquals(0, riskClassCountSummary0.getHigh());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary((-1), (-1), (-1336), (-1), 0, (-1336), (-1));
      int int0 = riskClassCountSummary0.getUnfeasible();
      assertEquals((-1336), int0);
      assertEquals((-1), riskClassCountSummary0.getNotApplicable());
      assertEquals((-1), riskClassCountSummary0.getSafe());
      assertEquals((-1336), riskClassCountSummary0.getLow());
      assertEquals((-1), riskClassCountSummary0.getAverage());
      assertEquals(0, riskClassCountSummary0.getHigh());
      assertEquals((-1), riskClassCountSummary0.getInaccurate());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary((-1), (-1), (-1), (-1), (-352), (-1), (-1162));
      int int0 = riskClassCountSummary0.getSafe();
      assertEquals((-1), riskClassCountSummary0.getInaccurate());
      assertEquals((-1), riskClassCountSummary0.getLow());
      assertEquals((-1), riskClassCountSummary0.getUnfeasible());
      assertEquals((-1162), riskClassCountSummary0.getNotApplicable());
      assertEquals((-352), riskClassCountSummary0.getHigh());
      assertEquals((-1), riskClassCountSummary0.getAverage());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary((-1758), (-1758), 0, (-1), (-1048), (-412), (-1758));
      int int0 = riskClassCountSummary0.getInaccurate();
      assertEquals((-1758), riskClassCountSummary0.getSafe());
      assertEquals((-1), riskClassCountSummary0.getAverage());
      assertEquals((-412), riskClassCountSummary0.getUnfeasible());
      assertEquals((-1758), int0);
      assertEquals((-1048), riskClassCountSummary0.getHigh());
      assertEquals((-1758), riskClassCountSummary0.getNotApplicable());
      assertEquals(0, riskClassCountSummary0.getLow());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary((-1305), (-1305), 0, (-941), 0, (-941), (-941));
      int int0 = riskClassCountSummary0.getAverage();
      assertEquals(0, riskClassCountSummary0.getHigh());
      assertEquals((-941), riskClassCountSummary0.getUnfeasible());
      assertEquals(0, riskClassCountSummary0.getLow());
      assertEquals((-941), int0);
      assertEquals((-1305), riskClassCountSummary0.getInaccurate());
      assertEquals((-1305), riskClassCountSummary0.getSafe());
      assertEquals((-941), riskClassCountSummary0.getNotApplicable());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary((-1758), (-1758), 0, (-1), (-1048), (-412), (-1758));
      int int0 = riskClassCountSummary0.getHigh();
      assertEquals((-1758), riskClassCountSummary0.getNotApplicable());
      assertEquals((-1758), riskClassCountSummary0.getInaccurate());
      assertEquals((-412), riskClassCountSummary0.getUnfeasible());
      assertEquals((-1), riskClassCountSummary0.getAverage());
      assertEquals((-1758), riskClassCountSummary0.getSafe());
      assertEquals((-1048), int0);
      assertEquals(0, riskClassCountSummary0.getLow());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 0, 0, 0, 510, 0);
      int int0 = riskClassCountSummary0.getLow();
      assertEquals(510, riskClassCountSummary0.getUnfeasible());
      assertEquals(0, riskClassCountSummary0.getNotApplicable());
      assertEquals(0, riskClassCountSummary0.getHigh());
      assertEquals(0, riskClassCountSummary0.getAverage());
      assertEquals(0, int0);
      assertEquals(0, riskClassCountSummary0.getInaccurate());
      assertEquals(0, riskClassCountSummary0.getSafe());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, (-645), 0, (-1), 1009, (-645), 0);
      riskClassCountSummary0.setNotApplicable(0);
      assertEquals(0, riskClassCountSummary0.getLow());
      assertEquals(0, riskClassCountSummary0.getNotApplicable());
      assertEquals(0, riskClassCountSummary0.getInaccurate());
      assertEquals((-1), riskClassCountSummary0.getAverage());
      assertEquals(1009, riskClassCountSummary0.getHigh());
      assertEquals((-645), riskClassCountSummary0.getSafe());
      assertEquals((-645), riskClassCountSummary0.getUnfeasible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, (-645), 0, (-1), 1009, (-645), 0);
      assertEquals((-645), riskClassCountSummary0.getSafe());
      
      riskClassCountSummary0.setSafe(0);
      assertEquals(0, riskClassCountSummary0.getLow());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, (-645), 0, (-1), 1009, (-645), 0);
      riskClassCountSummary0.setInaccurate((-1420));
      assertEquals((-1420), riskClassCountSummary0.getInaccurate());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, (-645), 0, (-1), 1009, (-645), 0);
      assertEquals(1009, riskClassCountSummary0.getHigh());
      
      riskClassCountSummary0.setHigh(0);
      assertEquals((-645), riskClassCountSummary0.getUnfeasible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, (-645), 0, (-1), 1009, (-645), 0);
      assertEquals((-645), riskClassCountSummary0.getUnfeasible());
      
      riskClassCountSummary0.setUnfeasible(0);
      int int0 = riskClassCountSummary0.getUnfeasible();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, (-645), 0, (-1), 1009, (-645), 0);
      assertEquals((-1), riskClassCountSummary0.getAverage());
      
      riskClassCountSummary0.setAverage(0);
      assertEquals(0, riskClassCountSummary0.getAverage());
  }
}
