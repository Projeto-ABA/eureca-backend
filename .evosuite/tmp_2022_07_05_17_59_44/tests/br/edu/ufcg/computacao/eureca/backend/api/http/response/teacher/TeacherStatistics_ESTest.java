/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:58:47 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatistics;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatisticsPerTerm;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TeacherStatistics_ESTest extends TeacherStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TeacherStatistics teacherStatistics0 = new TeacherStatistics("br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatisticsPerTerm", (String) null, "V*q", (String) null, "br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatistics", (Collection<TeacherStatisticsPerTerm>) null);
      String string0 = teacherStatistics0.getTeacherName();
      assertNull(string0);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatistics", teacherStatistics0.getTeacherEmail());
      assertEquals("V*q", teacherStatistics0.getTeacherId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TeacherStatistics teacherStatistics0 = new TeacherStatistics("K&an*VO j(gr", "", "K&an*VO j(gr", "K&an*VO j(gr", "K&an*VO j(gr", (Collection<TeacherStatisticsPerTerm>) null);
      String string0 = teacherStatistics0.getTeacherName();
      assertEquals("K&an*VO j(gr", teacherStatistics0.getTeacherId());
      assertEquals("K&an*VO j(gr", teacherStatistics0.getTeacherEmail());
      assertEquals("K&an*VO j(gr", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TeacherStatistics teacherStatistics0 = new TeacherStatistics((String) null, (String) null, (String) null, "", "", (Collection<TeacherStatisticsPerTerm>) null);
      String string0 = teacherStatistics0.getTeacherId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TeacherStatistics teacherStatistics0 = new TeacherStatistics("", "", "", "", "", (Collection<TeacherStatisticsPerTerm>) null);
      String string0 = teacherStatistics0.getTeacherId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TeacherStatistics teacherStatistics0 = new TeacherStatistics((String) null, (String) null, "OE", (String) null, "OE", (Collection<TeacherStatisticsPerTerm>) null);
      teacherStatistics0.setTeacherEmail((String) null);
      String string0 = teacherStatistics0.getTeacherEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TeacherStatistics teacherStatistics0 = new TeacherStatistics((String) null, (String) null, (String) null, (String) null, "", (Collection<TeacherStatisticsPerTerm>) null);
      String string0 = teacherStatistics0.getTeacherEmail();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TeacherStatistics teacherStatistics0 = new TeacherStatistics("\u0002>yUT=n(gZq", "", "", (String) null, "", (Collection<TeacherStatisticsPerTerm>) null);
      teacherStatistics0.setTeacherName("");
      teacherStatistics0.compareTo(teacherStatistics0);
      assertEquals("", teacherStatistics0.getTeacherId());
      assertEquals("", teacherStatistics0.getTeacherEmail());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TeacherStatistics teacherStatistics0 = new TeacherStatistics("(:`C", "(:`C", "(:`C", "(:`C", "(:`C", (Collection<TeacherStatisticsPerTerm>) null);
      TeacherStatistics teacherStatistics1 = new TeacherStatistics("I}6F^B\"g\"", "I}6F^B\"g\"", (String) null, "", "", (Collection<TeacherStatisticsPerTerm>) null);
      int int0 = teacherStatistics0.compareTo(teacherStatistics1);
      assertEquals("", teacherStatistics1.getTeacherEmail());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TeacherStatistics teacherStatistics0 = new TeacherStatistics(">/}1<#O,I$[KAFsAr", ">/}1<#O,I$[KAFsAr", ">/}1<#O,I$[KAFsAr", ">/}1<#O,I$[KAFsAr", ">/}1<#O,I$[KAFsAr", (Collection<TeacherStatisticsPerTerm>) null);
      TeacherStatistics teacherStatistics1 = new TeacherStatistics(">/}1<#O,I$[KAFsAr", ">/}1<#O,I$[KAFsAr", (String) null, "G^Hb9:3;(m6kL'Y6[?[", (String) null, (Collection<TeacherStatisticsPerTerm>) null);
      int int0 = teacherStatistics0.compareTo(teacherStatistics1);
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TeacherStatistics teacherStatistics0 = new TeacherStatistics("br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatistics", "br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatistics", "br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatistics", "br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatistics", "br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatistics", (Collection<TeacherStatisticsPerTerm>) null);
      // Undeclared exception!
      try { 
        teacherStatistics0.compareTo("br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatistics");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatistics
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TeacherStatistics teacherStatistics0 = new TeacherStatistics("~<&HW>l@3bro,8xO-M!", "~<&HW>l@3bro,8xO-M!", ">Vp", "", "", (Collection<TeacherStatisticsPerTerm>) null);
      String string0 = teacherStatistics0.getTeacherName();
      assertEquals("", string0);
      assertEquals("", teacherStatistics0.getTeacherEmail());
      assertEquals(">Vp", teacherStatistics0.getTeacherId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TeacherStatistics teacherStatistics0 = new TeacherStatistics("8-c", "8-c", "8-c", (String) null, (String) null, (Collection<TeacherStatisticsPerTerm>) null);
      Collection<TeacherStatisticsPerTerm> collection0 = teacherStatistics0.getTerms();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TeacherStatistics teacherStatistics0 = new TeacherStatistics("snjhP<n~Gu^{M%2gX", "snjhP<n~Gu^{M%2gX", "snjhP<n~Gu^{M%2gX", "snjhP<n~Gu^{M%2gX", "snjhP<n~Gu^{M%2gX", (Collection<TeacherStatisticsPerTerm>) null);
      // Undeclared exception!
      try { 
        teacherStatistics0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TeacherStatistics teacherStatistics0 = new TeacherStatistics("CK[T#:v|", "CK[T#:v|", "CK[T#:v|", "CK[T#:v|", "CK[T#:v|", (Collection<TeacherStatisticsPerTerm>) null);
      String string0 = teacherStatistics0.getTeacherEmail();
      assertEquals("CK[T#:v|", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TeacherStatistics teacherStatistics0 = new TeacherStatistics("CK[T#:v|", "CK[T#:v|", "CK[T#:v|", "CK[T#:v|", "CK[T#:v|", (Collection<TeacherStatisticsPerTerm>) null);
      teacherStatistics0.setTerms((Collection<TeacherStatisticsPerTerm>) null);
      assertEquals("CK[T#:v|", teacherStatistics0.getTeacherId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TeacherStatistics teacherStatistics0 = new TeacherStatistics("snjhP<n~Gu^{M%2gX", "snjhP<n~Gu^{M%2gX", "snjhP<n~Gu^{M%2gX", "snjhP<n~Gu^{M%2gX", "snjhP<n~Gu^{M%2gX", (Collection<TeacherStatisticsPerTerm>) null);
      teacherStatistics0.setTeacherId("snjhP<n~Gu^{M%2gX");
      assertEquals("snjhP<n~Gu^{M%2gX", teacherStatistics0.getFrom());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TeacherStatistics teacherStatistics0 = new TeacherStatistics("snjhP<n~Gu^{M%2gX", "snjhP<n~Gu^{M%2gX", "snjhP<n~Gu^{M%2gX", "snjhP<n~Gu^{M%2gX", "snjhP<n~Gu^{M%2gX", (Collection<TeacherStatisticsPerTerm>) null);
      String string0 = teacherStatistics0.getTeacherId();
      assertEquals("snjhP<n~Gu^{M%2gX", string0);
  }
}
