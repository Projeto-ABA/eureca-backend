/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:10:17 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherCSV;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatisticsSummary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TeacherCSV_ESTest extends TeacherCSV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TeacherCSV teacherCSV0 = new TeacherCSV(", metrics=", (String) null, ", metrics=", (String) null, (String) null, (TeacherStatisticsSummary) null);
      String string0 = teacherCSV0.getTerm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TeacherCSV teacherCSV0 = new TeacherCSV("", "", "", "X!W_kAAG$qf\"[I", "", (TeacherStatisticsSummary) null);
      String string0 = teacherCSV0.getTerm();
      assertEquals("", teacherCSV0.getCourseCode());
      assertEquals("X!W_kAAG$qf\"[I", teacherCSV0.getCurriculumCode());
      assertEquals("", teacherCSV0.getTeacherName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TeacherCSV teacherCSV0 = new TeacherCSV(", metrics=", (String) null, ", metrics=", (String) null, (String) null, (TeacherStatisticsSummary) null);
      String string0 = teacherCSV0.getTeacherName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TeacherStatisticsSummary teacherStatisticsSummary0 = mock(TeacherStatisticsSummary.class, new ViolatedAssumptionAnswer());
      TeacherCSV teacherCSV0 = new TeacherCSV(", teacherName='", "", "5ALDSu`&", "", "", teacherStatisticsSummary0);
      String string0 = teacherCSV0.getTeacherName();
      assertEquals("", string0);
      assertEquals("", teacherCSV0.getCurriculumCode());
      assertEquals(", teacherName='", teacherCSV0.getTeacherId());
      assertEquals("5ALDSu`&", teacherCSV0.getCourseCode());
      assertEquals("", teacherCSV0.getTerm());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TeacherStatisticsSummary teacherStatisticsSummary0 = mock(TeacherStatisticsSummary.class, new ViolatedAssumptionAnswer());
      TeacherCSV teacherCSV0 = new TeacherCSV((String) null, "", "", ", curriculumCode='", "", teacherStatisticsSummary0);
      String string0 = teacherCSV0.getTeacherId();
      assertNull(string0);
      assertEquals(", curriculumCode='", teacherCSV0.getCurriculumCode());
      assertEquals("", teacherCSV0.getCourseCode());
      assertEquals("", teacherCSV0.getTeacherName());
      assertEquals("", teacherCSV0.getTerm());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TeacherCSV teacherCSV0 = new TeacherCSV("", "", "", "X!W_kAAG$qf\"[I", "", (TeacherStatisticsSummary) null);
      teacherCSV0.getTeacherId();
      assertEquals("X!W_kAAG$qf\"[I", teacherCSV0.getCurriculumCode());
      assertEquals("", teacherCSV0.getCourseCode());
      assertEquals("", teacherCSV0.getTeacherName());
      assertEquals("", teacherCSV0.getTerm());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TeacherCSV teacherCSV0 = new TeacherCSV("", "", "TeacherCSV{teacherId='", "bnCq<Bf!WHg:4xaQdl", "bnCq<Bf!WHg:4xaQdl", (TeacherStatisticsSummary) null);
      teacherCSV0.getMetrics();
      assertEquals("bnCq<Bf!WHg:4xaQdl", teacherCSV0.getCurriculumCode());
      assertEquals("bnCq<Bf!WHg:4xaQdl", teacherCSV0.getTerm());
      assertEquals("", teacherCSV0.getTeacherName());
      assertEquals("TeacherCSV{teacherId='", teacherCSV0.getCourseCode());
      assertEquals("", teacherCSV0.getTeacherId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TeacherCSV teacherCSV0 = new TeacherCSV("", "", "", (String) null, (String) null, (TeacherStatisticsSummary) null);
      String string0 = teacherCSV0.getCurriculumCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TeacherCSV teacherCSV0 = new TeacherCSV("", "", "", "X!W_kAAG$qf\"[I", "", (TeacherStatisticsSummary) null);
      assertEquals("X!W_kAAG$qf\"[I", teacherCSV0.getCurriculumCode());
      
      teacherCSV0.setCurriculumCode("");
      teacherCSV0.getCurriculumCode();
      assertEquals("", teacherCSV0.getTeacherName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TeacherCSV teacherCSV0 = new TeacherCSV("", "", "", (String) null, (String) null, (TeacherStatisticsSummary) null);
      teacherCSV0.setCourseCode((String) null);
      String string0 = teacherCSV0.getCourseCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TeacherCSV teacherCSV0 = new TeacherCSV("", "", ", curriculumCode='", ", curriculumCode='", "", (TeacherStatisticsSummary) null);
      assertEquals(", curriculumCode='", teacherCSV0.getCourseCode());
      
      teacherCSV0.setCourseCode("");
      teacherCSV0.getCourseCode();
      assertEquals("", teacherCSV0.getTeacherName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TeacherCSV teacherCSV0 = new TeacherCSV("", "", "", (String) null, (String) null, (TeacherStatisticsSummary) null);
      int int0 = teacherCSV0.compareTo(teacherCSV0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TeacherStatisticsSummary teacherStatisticsSummary0 = mock(TeacherStatisticsSummary.class, new ViolatedAssumptionAnswer());
      TeacherCSV teacherCSV0 = new TeacherCSV(", teacherName='", "", "5ALDSu`&", "", "", teacherStatisticsSummary0);
      TeacherStatisticsSummary teacherStatisticsSummary1 = mock(TeacherStatisticsSummary.class, new ViolatedAssumptionAnswer());
      TeacherCSV teacherCSV1 = new TeacherCSV("", "", "6n h$Yl^pMWW?2", "7206<;0", "", teacherStatisticsSummary1);
      int int0 = teacherCSV0.compareTo(teacherCSV1);
      assertEquals("", teacherCSV1.getTerm());
      assertEquals("7206<;0", teacherCSV1.getCurriculumCode());
      assertEquals("", teacherCSV0.getTeacherName());
      assertEquals("", teacherCSV0.getTerm());
      assertEquals("6n h$Yl^pMWW?2", teacherCSV1.getCourseCode());
      assertEquals("", teacherCSV1.getTeacherName());
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TeacherStatisticsSummary teacherStatisticsSummary0 = mock(TeacherStatisticsSummary.class, new ViolatedAssumptionAnswer());
      TeacherCSV teacherCSV0 = new TeacherCSV("br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatisticsSummary", "br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatisticsSummary", "br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatisticsSummary", "&7ivpqnc^WZ", "br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatisticsSummary", teacherStatisticsSummary0);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatisticsSummary", teacherCSV0.getTeacherId());
      
      teacherCSV0.setTeacherId("");
      TeacherStatisticsSummary teacherStatisticsSummary1 = mock(TeacherStatisticsSummary.class, new ViolatedAssumptionAnswer());
      TeacherCSV teacherCSV1 = new TeacherCSV("&7ivpqnc^WZ", "", "br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatisticsSummary", "br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherStatisticsSummary", "bP2{p}Ky_1 'fIY fd", teacherStatisticsSummary1);
      int int0 = teacherCSV0.compareTo(teacherCSV1);
      assertEquals((-11), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TeacherStatisticsSummary teacherStatisticsSummary0 = mock(TeacherStatisticsSummary.class, new ViolatedAssumptionAnswer());
      TeacherCSV teacherCSV0 = new TeacherCSV(", teacherName='", "", "5ALDSu`&", "", "", teacherStatisticsSummary0);
      // Undeclared exception!
      try { 
        teacherCSV0.compareTo("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherCSV
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TeacherCSV teacherCSV0 = new TeacherCSV("k_X?e1.t\"-$", "k_X?e1.t\"-$", "k_X?e1.t\"-$", "TeacherCSV{teacherId='", "TeacherCSV{teacherId='", (TeacherStatisticsSummary) null);
      String string0 = teacherCSV0.getTeacherId();
      assertEquals("TeacherCSV{teacherId='", teacherCSV0.getCurriculumCode());
      assertEquals("k_X?e1.t\"-$", teacherCSV0.getCourseCode());
      assertEquals("TeacherCSV{teacherId='", teacherCSV0.getTerm());
      assertEquals("k_X?e1.t\"-$", string0);
      assertEquals("k_X?e1.t\"-$", teacherCSV0.getTeacherName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TeacherStatisticsSummary teacherStatisticsSummary0 = mock(TeacherStatisticsSummary.class, new ViolatedAssumptionAnswer());
      TeacherCSV teacherCSV0 = new TeacherCSV("Jj", "Jj", "Jj", "Jj", "Jj", teacherStatisticsSummary0);
      teacherCSV0.setTerm("Jj");
      assertEquals("Jj", teacherCSV0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TeacherStatisticsSummary teacherStatisticsSummary0 = mock(TeacherStatisticsSummary.class, new ViolatedAssumptionAnswer());
      TeacherCSV teacherCSV0 = new TeacherCSV("Jj", "Jj", "Jj", "Jj", "Jj", teacherStatisticsSummary0);
      String string0 = teacherCSV0.getCourseCode();
      assertEquals("Jj", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TeacherStatisticsSummary teacherStatisticsSummary0 = mock(TeacherStatisticsSummary.class, new ViolatedAssumptionAnswer());
      TeacherCSV teacherCSV0 = new TeacherCSV("_qe9]", "_qe9]", "_qe9]", "", (String) null, teacherStatisticsSummary0);
      assertEquals("_qe9]", teacherCSV0.getTeacherName());
      
      teacherCSV0.setTeacherName("");
      assertEquals("", teacherCSV0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TeacherStatisticsSummary teacherStatisticsSummary0 = mock(TeacherStatisticsSummary.class, new ViolatedAssumptionAnswer());
      TeacherCSV teacherCSV0 = new TeacherCSV("F.WMNg`Df)5_u(W", "F.WMNg`Df)5_u(W", "F.WMNg`Df)5_u(W", "F.WMNg`Df)5_u(W", "F.WMNg`Df)5_u(W", teacherStatisticsSummary0);
      String string0 = teacherCSV0.getCurriculumCode();
      assertEquals("F.WMNg`Df)5_u(W", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TeacherStatisticsSummary teacherStatisticsSummary0 = mock(TeacherStatisticsSummary.class, new ViolatedAssumptionAnswer());
      TeacherCSV teacherCSV0 = new TeacherCSV("F.WMNg`Df)5_u(W", "F.WMNg`Df)5_u(W", "F.WMNg`Df)5_u(W", "F.WMNg`Df)5_u(W", "F.WMNg`Df)5_u(W", teacherStatisticsSummary0);
      String string0 = teacherCSV0.getTerm();
      assertEquals("F.WMNg`Df)5_u(W", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TeacherStatisticsSummary teacherStatisticsSummary0 = mock(TeacherStatisticsSummary.class, new ViolatedAssumptionAnswer());
      TeacherCSV teacherCSV0 = new TeacherCSV("Jj", "Jj", "Jj", "Jj", "Jj", teacherStatisticsSummary0);
      String string0 = teacherCSV0.getTeacherName();
      assertEquals("Jj", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TeacherStatisticsSummary teacherStatisticsSummary0 = mock(TeacherStatisticsSummary.class, new ViolatedAssumptionAnswer());
      TeacherCSV teacherCSV0 = new TeacherCSV("_qe9]", "_qe9]", "_qe9]", "", (String) null, teacherStatisticsSummary0);
      // Undeclared exception!
      try { 
        teacherCSV0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeacherCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TeacherStatisticsSummary teacherStatisticsSummary0 = mock(TeacherStatisticsSummary.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(teacherStatisticsSummary0).toString();
      TeacherCSV teacherCSV0 = new TeacherCSV("_qe9]", "_qe9]", "_qe9]", "", (String) null, teacherStatisticsSummary0);
      String string0 = teacherCSV0.toString();
      assertEquals("TeacherCSV{teacherId='_qe9]', teacherName='_qe9]', courseCode='_qe9]', curriculumCode='', term='null', metrics=null}", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TeacherStatisticsSummary teacherStatisticsSummary0 = mock(TeacherStatisticsSummary.class, new ViolatedAssumptionAnswer());
      TeacherCSV teacherCSV0 = new TeacherCSV("_qe9]", "_qe9]", "_qe9]", "", (String) null, teacherStatisticsSummary0);
      TeacherStatisticsSummary teacherStatisticsSummary1 = mock(TeacherStatisticsSummary.class, new ViolatedAssumptionAnswer());
      teacherCSV0.setMetrics(teacherStatisticsSummary1);
      assertEquals("_qe9]", teacherCSV0.getCourseCode());
      assertEquals("", teacherCSV0.getCurriculumCode());
      assertEquals("_qe9]", teacherCSV0.getTeacherId());
      assertEquals("_qe9]", teacherCSV0.getTeacherName());
  }
}
