/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:20:11 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.constants;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.edu.ufcg.computacao.eureca.backend.constants.Field;
import br.edu.ufcg.computacao.eureca.backend.constants.StudentsGlossaryFields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StudentsGlossaryFields_ESTest extends StudentsGlossaryFields_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields((Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null);
      studentsGlossaryFields0.setAverageCost((Field) null);
      studentsGlossaryFields0.setAverageAlumni((Field) null);
      studentsGlossaryFields0.setCanceledCount((Field) null);
      studentsGlossaryFields0.averageTime = null;
      studentsGlossaryFields0.averageGpa = null;
      studentsGlossaryFields0.averageLoad = null;
      studentsGlossaryFields0.setRejoinCount((Field) null);
      studentsGlossaryFields0.setAverageAlumni((Field) null);
      studentsGlossaryFields0.setAverageCost((Field) null);
      studentsGlossaryFields0.setAverageCost((Field) null);
      studentsGlossaryFields0.setActive((Field) null);
      studentsGlossaryFields0.getActive();
      studentsGlossaryFields0.getAverageLoad();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields((Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null);
      studentsGlossaryFields0.setAbandonCount((Field) null);
      studentsGlossaryFields0.setMinimumAlumni((Field) null);
      studentsGlossaryFields0.Dropout = null;
      studentsGlossaryFields0.setPredictedGraduation((Field) null);
      studentsGlossaryFields0.getTransferCount();
      studentsGlossaryFields0.setAbandonCount((Field) null);
      studentsGlossaryFields0.getAverageGpa();
      studentsGlossaryFields0.getPredictedGraduation();
      studentsGlossaryFields0.getAbandonCount();
      studentsGlossaryFields0.getMaximumAlumni();
      studentsGlossaryFields0.getAverageAlumni();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields((Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null);
      studentsGlossaryFields0.setAverageCost((Field) null);
      studentsGlossaryFields0.setMaximumAlumni((Field) null);
      studentsGlossaryFields0.getSuccessRate();
      studentsGlossaryFields0.getAbandonCount();
      studentsGlossaryFields0.transferCount = null;
      studentsGlossaryFields0.setAverageRisk((Field) null);
      studentsGlossaryFields0.getAverageTime();
      studentsGlossaryFields0.setSuccessRate((Field) null);
      studentsGlossaryFields0.setAbandonCount((Field) null);
      studentsGlossaryFields0.getMaximumAlumni();
      studentsGlossaryFields0.getAbandonCount();
      studentsGlossaryFields0.getMaximumAlumni();
      studentsGlossaryFields0.getMaximumAlumni();
      studentsGlossaryFields0.getTransferCount();
      studentsGlossaryFields0.getAverageAlumni();
      studentsGlossaryFields0.setAverageLoad((Field) null);
      studentsGlossaryFields0.setAverageAlumni((Field) null);
      studentsGlossaryFields0.setAverageRisk((Field) null);
      studentsGlossaryFields0.getAverageCost();
      studentsGlossaryFields0.setAverageGpa((Field) null);
      studentsGlossaryFields0.setSuccessRate((Field) null);
      studentsGlossaryFields0.getAverageRisk();
      studentsGlossaryFields0.setDropout((Field) null);
      studentsGlossaryFields0.setPredictedGraduation((Field) null);
      studentsGlossaryFields0.getActive();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields((Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null);
      studentsGlossaryFields0.setRejoinCount((Field) null);
      studentsGlossaryFields0.minimumAlumni = null;
      studentsGlossaryFields0.setTransferCount((Field) null);
      studentsGlossaryFields0.getRejoinCount();
      studentsGlossaryFields0.setAverageAlumni((Field) null);
      studentsGlossaryFields0.setAverageRisk((Field) null);
      studentsGlossaryFields0.getTransferCount();
      studentsGlossaryFields0.Alumnus = null;
      studentsGlossaryFields0.getAlumnus();
      studentsGlossaryFields0.getCanceledCount();
      studentsGlossaryFields0.getAverageCost();
      studentsGlossaryFields0.getMinimumAlumni();
      studentsGlossaryFields0.getRejoinCount();
      studentsGlossaryFields0.getSuccessRate();
      studentsGlossaryFields0.getAbandonCount();
      studentsGlossaryFields0.setSuccessRate((Field) null);
      studentsGlossaryFields0.setMinimumAlumni((Field) null);
      studentsGlossaryFields0.setActive((Field) null);
      studentsGlossaryFields0.setMaximumAlumni((Field) null);
      studentsGlossaryFields0.setDropout((Field) null);
      studentsGlossaryFields0.getAbandonCount();
      studentsGlossaryFields0.getDropout();
      studentsGlossaryFields0.getActive();
      studentsGlossaryFields0.getCanceledCount();
      studentsGlossaryFields0.setActive((Field) null);
      studentsGlossaryFields0.setMinimumAlumni((Field) null);
      studentsGlossaryFields0.setAlumnus((Field) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields((Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null);
      studentsGlossaryFields0.Alumnus = null;
      studentsGlossaryFields0.setAverageRisk((Field) null);
      studentsGlossaryFields0.setActive((Field) null);
      studentsGlossaryFields0.averageRisk = null;
      studentsGlossaryFields0.setAverageCost((Field) null);
      studentsGlossaryFields0.averageRisk = null;
      studentsGlossaryFields0.minimumAlumni = null;
      studentsGlossaryFields0.setAverageGpa((Field) null);
      studentsGlossaryFields0.setCanceledCount((Field) null);
      studentsGlossaryFields0.setMinimumAlumni((Field) null);
      studentsGlossaryFields0.getSuccessRate();
      studentsGlossaryFields0.getSuccessRate();
      studentsGlossaryFields0.setAverageCost((Field) null);
      studentsGlossaryFields0.getRejoinCount();
      studentsGlossaryFields0.getDropout();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields((Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null);
      studentsGlossaryFields0.predictedGraduation = null;
      studentsGlossaryFields0.setAverageAlumni((Field) null);
      studentsGlossaryFields0.setAverageTime((Field) null);
      studentsGlossaryFields0.minimumAlumni = null;
      studentsGlossaryFields0.setMinimumAlumni((Field) null);
      studentsGlossaryFields0.setAverageRisk((Field) null);
      studentsGlossaryFields0.setAverageAlumni((Field) null);
      studentsGlossaryFields0.getMinimumAlumni();
      studentsGlossaryFields0.setAbandonCount((Field) null);
      studentsGlossaryFields0.setActive((Field) null);
      studentsGlossaryFields0.setAverageTime((Field) null);
      studentsGlossaryFields0.getAverageCost();
      studentsGlossaryFields0.setAverageRisk((Field) null);
      studentsGlossaryFields0.setSuccessRate((Field) null);
      studentsGlossaryFields0.getCanceledCount();
      studentsGlossaryFields0.setAverageAlumni((Field) null);
      studentsGlossaryFields0.setActive((Field) null);
      studentsGlossaryFields0.getAverageTime();
      studentsGlossaryFields0.getMaximumAlumni();
      studentsGlossaryFields0.setAverageGpa((Field) null);
      studentsGlossaryFields0.setDropout((Field) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field1).toString();
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field3 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field4 = mock(Field.class, new ViolatedAssumptionAnswer());
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field0, field1, field1, field1, field1, field2, field0, field3, field0, field1, field2, field2, field2, field3, field4, field1);
      studentsGlossaryFields0.getAverageLoad();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field3 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field4 = mock(Field.class, new ViolatedAssumptionAnswer());
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field0, field0, field1, field1, field0, field2, field2, field1, field1, field2, field1, field1, field1, field3, field4, field2);
      Field field5 = mock(Field.class, new ViolatedAssumptionAnswer());
      studentsGlossaryFields0.setActive(field5);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field2).toString();
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field0, field0, field0, field0, field1, field0, field0, field0, field0, field1, field0, field0, field0, field2, field0, field0);
      studentsGlossaryFields0.getCanceledCount();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0);
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      studentsGlossaryFields0.averageLoad = null;
      studentsGlossaryFields0.Active = field1;
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      studentsGlossaryFields0.setCanceledCount(field2);
      Field field3 = mock(Field.class, new ViolatedAssumptionAnswer());
      studentsGlossaryFields0.setMinimumAlumni(field3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field1, field1);
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      studentsGlossaryFields0.setAverageAlumni(field2);
      Field field3 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(field3).toString();
      studentsGlossaryFields0.Alumnus = field3;
      studentsGlossaryFields0.getAlumnus();
      studentsGlossaryFields0.getAlumnus();
      studentsGlossaryFields0.getAverageGpa();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field3 = mock(Field.class, new ViolatedAssumptionAnswer());
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field0, field0, field1, field1, field1, field2, field2, field0, field1, field3, field0, field3, field0, field3, field2, field3);
      Field field4 = mock(Field.class, new ViolatedAssumptionAnswer());
      studentsGlossaryFields0.setTransferCount(field4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0);
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field1).toString();
      studentsGlossaryFields0.setAbandonCount(field1);
      studentsGlossaryFields0.getAbandonCount();
      studentsGlossaryFields0.getActive();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field2).toString();
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field0, field0, field1, field1, field1, field0, field0, field2, field2, field2, field1, field2, field1, field1, field2, field0);
      studentsGlossaryFields0.getAbandonCount();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field1).toString();
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field3 = mock(Field.class, new ViolatedAssumptionAnswer());
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0, field1, field0, field0, field0, field1, field1, field2, field3, field0, field0);
      studentsGlossaryFields0.getAverageCost();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field3 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field4 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field4).toString();
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field1, field0, field1, field1, field1, field0, field0, field0, field1, field2, field2, field3, field4, field1, field3, field2);
      studentsGlossaryFields0.getRejoinCount();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(field0).toString();
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0, field0, field1, field0, field1, field1, field0, field0, field0, (Field) null, field1);
      studentsGlossaryFields0.setCanceledCount((Field) null);
      Field field2 = studentsGlossaryFields0.getSuccessRate();
      studentsGlossaryFields0.setAverageCost(field2);
      studentsGlossaryFields0.setAverageCost((Field) null);
      studentsGlossaryFields0.setAlumnus(field2);
      studentsGlossaryFields0.getActive();
      studentsGlossaryFields0.getMinimumAlumni();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field2).toString();
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0, field0, field0, field1, field0, field0, field2, field1, field2, field2, field0);
      Field field3 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field3).toString();
      studentsGlossaryFields0.averageRisk = field3;
      Field field4 = mock(Field.class, new ViolatedAssumptionAnswer());
      studentsGlossaryFields0.setAverageTime(studentsGlossaryFields0.averageRisk);
      studentsGlossaryFields0.setRejoinCount(field4);
      Field field5 = studentsGlossaryFields0.getAverageTime();
      Field field6 = studentsGlossaryFields0.getAverageGpa();
      studentsGlossaryFields0.setSuccessRate(field6);
      studentsGlossaryFields0.setDropout(field5);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field1, field1, field0, field0, field0, field1);
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      studentsGlossaryFields0.setAverageCost(field2);
      studentsGlossaryFields0.getAlumnus();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field3 = mock(Field.class, new ViolatedAssumptionAnswer());
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field0, field1, field0, field0, field0, field0, field0, field2, field2, field0, field0, field3, field2, field1, field3, field0);
      Field field4 = mock(Field.class, new ViolatedAssumptionAnswer());
      studentsGlossaryFields0.setDropout(field4);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field1).toString();
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field3 = mock(Field.class, new ViolatedAssumptionAnswer());
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field1, field1, field2, field2, field1, field2, field2, field1, field3, field3, field3, field3, field2, field0, field0, field1);
      Field field4 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field4).toString();
      Field field5 = mock(Field.class, new ViolatedAssumptionAnswer());
      studentsGlossaryFields0.maximumAlumni = field5;
      studentsGlossaryFields0.Active = field4;
      studentsGlossaryFields0.setRejoinCount(studentsGlossaryFields0.Active);
      Field field6 = mock(Field.class, new ViolatedAssumptionAnswer());
      studentsGlossaryFields0.setPredictedGraduation(field6);
      studentsGlossaryFields0.setMaximumAlumni((Field) null);
      studentsGlossaryFields0.setAlumnus((Field) null);
      Field field7 = studentsGlossaryFields0.getActive();
      studentsGlossaryFields0.setRejoinCount(field7);
      studentsGlossaryFields0.getCanceledCount();
      studentsGlossaryFields0.getTransferCount();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0);
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(field1).toString();
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field2).toString();
      studentsGlossaryFields0.averageGpa = field2;
      studentsGlossaryFields0.setAverageTime(studentsGlossaryFields0.averageGpa);
      studentsGlossaryFields0.maximumAlumni = field1;
      studentsGlossaryFields0.setSuccessRate(studentsGlossaryFields0.maximumAlumni);
      studentsGlossaryFields0.getMaximumAlumni();
      Field field3 = studentsGlossaryFields0.getAverageGpa();
      Field field4 = studentsGlossaryFields0.getSuccessRate();
      studentsGlossaryFields0.setAverageGpa(field3);
      studentsGlossaryFields0.setMaximumAlumni(field4);
      studentsGlossaryFields0.getRejoinCount();
      studentsGlossaryFields0.setAlumnus(field3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(field0).toString();
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(field1).toString();
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(field2).toString();
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field0, field0, field0, field0, field1, field1, field2, field0, field2, field2, field0, field1, field2, field0, field0, field1);
      Field field3 = mock(Field.class, new ViolatedAssumptionAnswer());
      studentsGlossaryFields0.setAverageTime((Field) null);
      Field field4 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(field4).toString();
      Field field5 = mock(Field.class, new ViolatedAssumptionAnswer());
      studentsGlossaryFields0.averageRisk = field5;
      studentsGlossaryFields0.setAverageAlumni(field4);
      studentsGlossaryFields0.setSuccessRate(field3);
      Field field6 = studentsGlossaryFields0.getPredictedGraduation();
      studentsGlossaryFields0.setRejoinCount(field6);
      Field field7 = studentsGlossaryFields0.getAverageAlumni();
      Field field8 = studentsGlossaryFields0.getMinimumAlumni();
      studentsGlossaryFields0.setAbandonCount(field8);
      studentsGlossaryFields0.setAverageLoad(field7);
      studentsGlossaryFields0.getTransferCount();
      studentsGlossaryFields0.maximumAlumni = field8;
      studentsGlossaryFields0.getAverageGpa();
      studentsGlossaryFields0.getMinimumAlumni();
      Field field9 = studentsGlossaryFields0.getPredictedGraduation();
      studentsGlossaryFields0.setAverageRisk(field9);
      Field field10 = studentsGlossaryFields0.getAverageLoad();
      studentsGlossaryFields0.setAverageTime(field10);
      studentsGlossaryFields0.setMaximumAlumni(field7);
      studentsGlossaryFields0.setAverageGpa(field6);
      studentsGlossaryFields0.setAverageAlumni(field9);
      studentsGlossaryFields0.getAbandonCount();
      studentsGlossaryFields0.setActive(field9);
      Field field11 = studentsGlossaryFields0.getDropout();
      studentsGlossaryFields0.setCanceledCount(field11);
      studentsGlossaryFields0.setMinimumAlumni(field8);
      studentsGlossaryFields0.getAverageTime();
      studentsGlossaryFields0.setAverageLoad(field6);
      studentsGlossaryFields0.getAverageCost();
      studentsGlossaryFields0.getDropout();
      studentsGlossaryFields0.getMaximumAlumni();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(field0).toString();
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0, field0);
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      studentsGlossaryFields0.setRejoinCount(field1);
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(field2).toString();
      studentsGlossaryFields0.setAverageRisk(field2);
      Field field3 = studentsGlossaryFields0.getActive();
      assertNotNull(field3);
      
      Field field4 = studentsGlossaryFields0.getMaximumAlumni();
      studentsGlossaryFields0.getAverageRisk();
      studentsGlossaryFields0.setAlumnus(field4);
      Field field5 = studentsGlossaryFields0.getAverageRisk();
      studentsGlossaryFields0.setAverageLoad(field4);
      studentsGlossaryFields0.setTransferCount(field5);
      Field field6 = studentsGlossaryFields0.getMinimumAlumni();
      assertNotNull(field6);
      
      studentsGlossaryFields0.setDropout(field5);
      Field field7 = studentsGlossaryFields0.getAlumnus();
      studentsGlossaryFields0.setActive(field7);
      studentsGlossaryFields0.setCanceledCount(field4);
      studentsGlossaryFields0.setMinimumAlumni(field4);
      studentsGlossaryFields0.setMaximumAlumni(field3);
      Field field8 = studentsGlossaryFields0.getMinimumAlumni();
      Field field9 = studentsGlossaryFields0.getAlumnus();
      Field field10 = studentsGlossaryFields0.getDropout();
      studentsGlossaryFields0.setAverageAlumni(field7);
      studentsGlossaryFields0.setAverageLoad(field5);
      studentsGlossaryFields0.setAverageAlumni(field7);
      studentsGlossaryFields0.setSuccessRate(field3);
      studentsGlossaryFields0.setCanceledCount(field10);
      Field field11 = studentsGlossaryFields0.getAverageGpa();
      studentsGlossaryFields0.setAverageGpa(field10);
      Field field12 = studentsGlossaryFields0.getAverageGpa();
      studentsGlossaryFields0.setAlumnus(field10);
      assertNotSame(field10, field1);
      
      Field field13 = studentsGlossaryFields0.getMinimumAlumni();
      assertNotNull(field13);
      
      Field field14 = studentsGlossaryFields0.getPredictedGraduation();
      assertSame(field14, field11);
      assertNotNull(field14);
      
      studentsGlossaryFields0.setAverageCost(field8);
      assertSame(field8, field9);
      assertNotSame(field8, field12);
      assertSame(field8, field7);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StudentsGlossaryFields studentsGlossaryFields0 = new StudentsGlossaryFields((Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null);
      studentsGlossaryFields0.setMinimumAlumni((Field) null);
      studentsGlossaryFields0.setDropout((Field) null);
      studentsGlossaryFields0.setRejoinCount((Field) null);
      studentsGlossaryFields0.setAverageRisk((Field) null);
      studentsGlossaryFields0.getMinimumAlumni();
      studentsGlossaryFields0.setAverageTime((Field) null);
      studentsGlossaryFields0.getTransferCount();
      studentsGlossaryFields0.setTransferCount((Field) null);
      studentsGlossaryFields0.setMinimumAlumni((Field) null);
      studentsGlossaryFields0.setPredictedGraduation((Field) null);
  }
}
