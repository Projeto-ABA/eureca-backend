/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:56:06 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.models;

import org.junit.Test;
import static org.junit.Assert.*;
import br.edu.ufcg.computacao.eureca.backend.core.models.Enrollment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Enrollment_ESTest extends Enrollment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment("", "Enrollment{registration='", "Enrollment{registration='", "", 686, 870.524392024859, "");
      String string0 = enrollment0.getTerm();
      assertEquals("", enrollment0.getStatus());
      assertEquals("Enrollment{registration='", enrollment0.getCode());
      assertEquals("", enrollment0.getRegistration());
      assertEquals(686, enrollment0.getCredits());
      assertEquals(870.524392024859, enrollment0.getGrade(), 0.01);
      assertEquals("Enrollment{registration='", string0);
      assertEquals("", enrollment0.getClassId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment("H4J85Ato$)", "H4J85Ato$)", "", "H4J85Ato$)", 125, 125, "");
      String string0 = enrollment0.getTerm();
      assertEquals("H4J85Ato$)", enrollment0.getCode());
      assertEquals("H4J85Ato$)", enrollment0.getClassId());
      assertEquals(125.0, enrollment0.getGrade(), 0.01);
      assertEquals(125, enrollment0.getCredits());
      assertEquals("H4J85Ato$)", enrollment0.getRegistration());
      assertEquals("", string0);
      assertEquals("", enrollment0.getStatus());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment((String) null, "wYrl>dlTcd", "*VT_avO", ".}OE2Bd!/2JLrs9nzu%", 1556, (-1.0), ", grade=");
      String string0 = enrollment0.getStatus();
      assertEquals((-1.0), enrollment0.getGrade(), 0.01);
      assertEquals(", grade=", string0);
      assertEquals("wYrl>dlTcd", enrollment0.getCode());
      assertEquals("*VT_avO", enrollment0.getTerm());
      assertEquals(".}OE2Bd!/2JLrs9nzu%", enrollment0.getClassId());
      assertNotNull(string0);
      assertEquals(1556, enrollment0.getCredits());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment("", "", "", "", 3033, 3033, "");
      enrollment0.getStatus();
      assertEquals(3033.0, enrollment0.getGrade(), 0.01);
      assertEquals(3033, enrollment0.getCredits());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment("g!RQDm(", "g!RQDm(", "g!RQDm(", "g!RQDm(", (-3154), (-2021.4402), "g!RQDm(");
      enrollment0.getRegistration();
      assertEquals((-2021.4402), enrollment0.getGrade(), 0.01);
      assertEquals((-3154), enrollment0.getCredits());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment("", "Enrollment{registration='", "Enrollment{registration='", "", 686, 870.524392024859, "");
      String string0 = enrollment0.getRegistration();
      assertEquals("Enrollment{registration='", enrollment0.getCode());
      assertEquals(686, enrollment0.getCredits());
      assertEquals("", enrollment0.getStatus());
      assertEquals("Enrollment{registration='", enrollment0.getTerm());
      assertEquals("", enrollment0.getClassId());
      assertEquals("", string0);
      assertEquals(870.524392024859, enrollment0.getGrade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment((String) null, (String) null, (String) null, "", 0, 0, "");
      double double0 = enrollment0.getGrade();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, enrollment0.getCredits());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment("", "", "", "{FNaXbkd<iM,%(", 4576, 4576, (String) null);
      double double0 = enrollment0.getGrade();
      assertEquals(4576, enrollment0.getCredits());
      assertEquals(4576.0, double0, 0.01);
      assertEquals("", enrollment0.getRegistration());
      assertEquals("", enrollment0.getCode());
      assertEquals("", enrollment0.getTerm());
      assertEquals("{FNaXbkd<iM,%(", enrollment0.getClassId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment("Go7x@\"-<KL", "Go7x@\"-<KL", "Go7x@\"-<KL", "Go7x@\"-<KL", 0, 2322.9396653786994, "Go7x@\"-<KL");
      int int0 = enrollment0.getCredits();
      assertEquals(2322.9396653786994, enrollment0.getGrade(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment("", "", "", "{FNaXbkd<iM,%(", 4576, 4576, (String) null);
      int int0 = enrollment0.getCredits();
      assertEquals("", enrollment0.getRegistration());
      assertEquals(4576.0, enrollment0.getGrade(), 0.01);
      assertEquals("{FNaXbkd<iM,%(", enrollment0.getClassId());
      assertEquals("", enrollment0.getTerm());
      assertEquals(4576, int0);
      assertEquals("", enrollment0.getCode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment(", code='", ", code='", "", "", (-1786), (-303.2206804284079), "");
      String string0 = enrollment0.getCode();
      assertEquals((-1786), enrollment0.getCredits());
      assertEquals(", code='", string0);
      assertEquals("", enrollment0.getTerm());
      assertEquals("", enrollment0.getClassId());
      assertEquals((-303.2206804284079), enrollment0.getGrade(), 0.01);
      assertEquals(", code='", enrollment0.getRegistration());
      assertEquals("", enrollment0.getStatus());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment("-2Jc%S", "-2Jc%S", "", "-2Jc%S", (-1898), (-1898), "-2Jc%S");
      assertEquals("-2Jc%S", enrollment0.getCode());
      
      enrollment0.setCode("");
      enrollment0.getCode();
      assertEquals("", enrollment0.getTerm());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment("", "", (String) null, (String) null, 0, 1.0, (String) null);
      enrollment0.setClassId("RHr4h6)sn0pE#Z");
      enrollment0.getClassId();
      assertEquals(0, enrollment0.getCredits());
      assertEquals(1.0, enrollment0.getGrade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment("", "", "", "", 3033, 3033, "");
      enrollment0.getClassId();
      assertEquals(3033, enrollment0.getCredits());
      assertEquals(3033.0, enrollment0.getGrade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment((String) null, (String) null, (String) null, (String) null, (-14), (-14), (String) null);
      enrollment0.setGrade((-14));
      assertEquals((-14), enrollment0.getCredits());
      assertEquals((-14.0), enrollment0.getGrade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment((String) null, (String) null, (String) null, (String) null, (-14), (-14), (String) null);
      String string0 = enrollment0.toString();
      assertEquals("Enrollment{registration='null', code='null', term='null', classId='null', credits=-14, grade=-14.0, status='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment("-2Vmv'sl.gcI", "-2Vmv'sl.gcI", "-2Vmv'sl.gcI", "-2Vmv'sl.gcI", (-162), (-162), "-2Vmv'sl.gcI");
      enrollment0.setStatus("-2Vmv'sl.gcI");
      assertEquals((-162), enrollment0.getCredits());
      assertEquals((-162.0), enrollment0.getGrade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment((String) null, (String) null, (String) null, (String) null, (-14), (-14), (String) null);
      int int0 = enrollment0.getCredits();
      assertEquals((-14), int0);
      assertEquals((-14.0), enrollment0.getGrade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment((String) null, (String) null, (String) null, (String) null, (-14), (-14), (String) null);
      enrollment0.setRegistration((String) null);
      assertEquals((-14.0), enrollment0.getGrade(), 0.01);
      assertEquals((-14), enrollment0.getCredits());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment("-2Vmv'sl.gcI", "-2Vmv'sl.gcI", "-2Vmv'sl.gcI", "-2Vmv'sl.gcI", (-162), (-162), "-2Vmv'sl.gcI");
      enrollment0.setCredits((-162));
      assertEquals((-162), enrollment0.getCredits());
      assertEquals((-162.0), enrollment0.getGrade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment((String) null, (String) null, (String) null, (String) null, (-14), (-14), (String) null);
      enrollment0.getRegistration();
      assertEquals((-14.0), enrollment0.getGrade(), 0.01);
      assertEquals((-14), enrollment0.getCredits());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment((String) null, (String) null, (String) null, (String) null, (-14), (-14), (String) null);
      enrollment0.getCode();
      assertEquals((-14), enrollment0.getCredits());
      assertEquals((-14.0), enrollment0.getGrade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment((String) null, (String) null, (String) null, (String) null, (-14), (-14), (String) null);
      enrollment0.getTerm();
      assertEquals((-14.0), enrollment0.getGrade(), 0.01);
      assertEquals((-14), enrollment0.getCredits());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment((String) null, (String) null, (String) null, (String) null, (-14), (-14), (String) null);
      enrollment0.setTerm((String) null);
      assertEquals((-14), enrollment0.getCredits());
      assertEquals((-14.0), enrollment0.getGrade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment((String) null, (String) null, (String) null, (String) null, (-14), (-14), (String) null);
      enrollment0.getStatus();
      assertEquals((-14), enrollment0.getCredits());
      assertEquals((-14.0), enrollment0.getGrade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment((String) null, (String) null, (String) null, (String) null, (-14), (-14), (String) null);
      enrollment0.getClassId();
      assertEquals((-14), enrollment0.getCredits());
      assertEquals((-14.0), enrollment0.getGrade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Enrollment enrollment0 = new Enrollment((String) null, (String) null, (String) null, (String) null, (-14), (-14), (String) null);
      double double0 = enrollment0.getGrade();
      assertEquals((-14), enrollment0.getCredits());
      assertEquals((-14.0), double0, 0.01);
  }
}
