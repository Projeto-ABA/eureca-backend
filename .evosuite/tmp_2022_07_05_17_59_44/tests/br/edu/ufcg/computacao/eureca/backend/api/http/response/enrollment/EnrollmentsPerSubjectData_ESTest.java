/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:39:41 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsPerSubjectData;
import br.edu.ufcg.computacao.eureca.backend.core.models.ClassEnrollments;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnrollmentsPerSubjectData_ESTest extends EnrollmentsPerSubjectData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EnrollmentsPerSubjectData enrollmentsPerSubjectData0 = new EnrollmentsPerSubjectData((String) null, (String) null, (Map<String, Map<String, ClassEnrollments>>) null);
      String string0 = enrollmentsPerSubjectData0.getSubjectName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EnrollmentsPerSubjectData enrollmentsPerSubjectData0 = new EnrollmentsPerSubjectData("=8pTKw&KP=cMWI(A", "=8pTKw&KP=cMWI(A", (Map<String, Map<String, ClassEnrollments>>) null);
      String string0 = enrollmentsPerSubjectData0.getSubjectName();
      assertEquals("=8pTKw&KP=cMWI(A", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EnrollmentsPerSubjectData enrollmentsPerSubjectData0 = new EnrollmentsPerSubjectData("<[~MNcs", "<[~MNcs", (Map<String, Map<String, ClassEnrollments>>) null);
      String string0 = enrollmentsPerSubjectData0.getSubjectCode();
      assertEquals("<[~MNcs", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EnrollmentsPerSubjectData enrollmentsPerSubjectData0 = new EnrollmentsPerSubjectData((String) null, "", (Map<String, Map<String, ClassEnrollments>>) null);
      enrollmentsPerSubjectData0.setSubjectCode("");
      String string0 = enrollmentsPerSubjectData0.getSubjectCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EnrollmentsPerSubjectData enrollmentsPerSubjectData0 = new EnrollmentsPerSubjectData("=8pTKw&KP=cMWI(A", "=8pTKw&KP=cMWI(A", (Map<String, Map<String, ClassEnrollments>>) null);
      EnrollmentsPerSubjectData enrollmentsPerSubjectData1 = new EnrollmentsPerSubjectData("", "", (Map<String, Map<String, ClassEnrollments>>) null);
      int int0 = enrollmentsPerSubjectData0.compareTo(enrollmentsPerSubjectData1);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EnrollmentsPerSubjectData enrollmentsPerSubjectData0 = new EnrollmentsPerSubjectData("", "E~r9phTe", (Map<String, Map<String, ClassEnrollments>>) null);
      EnrollmentsPerSubjectData enrollmentsPerSubjectData1 = new EnrollmentsPerSubjectData("E~r9phTe", "E~r9phTe", (Map<String, Map<String, ClassEnrollments>>) null);
      int int0 = enrollmentsPerSubjectData0.compareTo(enrollmentsPerSubjectData1);
      assertEquals((-9), int0);
      assertEquals("E~r9phTe", enrollmentsPerSubjectData0.getSubjectName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EnrollmentsPerSubjectData enrollmentsPerSubjectData0 = new EnrollmentsPerSubjectData("<[~MNcs", "<[~MNcs", (Map<String, Map<String, ClassEnrollments>>) null);
      // Undeclared exception!
      try { 
        enrollmentsPerSubjectData0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsPerSubjectData", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EnrollmentsPerSubjectData enrollmentsPerSubjectData0 = new EnrollmentsPerSubjectData((String) null, "", (Map<String, Map<String, ClassEnrollments>>) null);
      // Undeclared exception!
      try { 
        enrollmentsPerSubjectData0.compareTo("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsPerSubjectData
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsPerSubjectData", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EnrollmentsPerSubjectData enrollmentsPerSubjectData0 = new EnrollmentsPerSubjectData((String) null, "", (Map<String, Map<String, ClassEnrollments>>) null);
      String string0 = enrollmentsPerSubjectData0.getSubjectCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EnrollmentsPerSubjectData enrollmentsPerSubjectData0 = new EnrollmentsPerSubjectData("", "", (Map<String, Map<String, ClassEnrollments>>) null);
      String string0 = enrollmentsPerSubjectData0.getSubjectName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EnrollmentsPerSubjectData enrollmentsPerSubjectData0 = new EnrollmentsPerSubjectData("", "", (Map<String, Map<String, ClassEnrollments>>) null);
      enrollmentsPerSubjectData0.setEnrollmentsPerTerm((Map<String, Map<String, ClassEnrollments>>) null);
      assertEquals("", enrollmentsPerSubjectData0.getSubjectCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EnrollmentsPerSubjectData enrollmentsPerSubjectData0 = new EnrollmentsPerSubjectData("", "", (Map<String, Map<String, ClassEnrollments>>) null);
      enrollmentsPerSubjectData0.setSubjectName("");
      assertEquals("", enrollmentsPerSubjectData0.getSubjectCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EnrollmentsPerSubjectData enrollmentsPerSubjectData0 = new EnrollmentsPerSubjectData("", "", (Map<String, Map<String, ClassEnrollments>>) null);
      int int0 = enrollmentsPerSubjectData0.compareTo(enrollmentsPerSubjectData0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EnrollmentsPerSubjectData enrollmentsPerSubjectData0 = new EnrollmentsPerSubjectData("", "", (Map<String, Map<String, ClassEnrollments>>) null);
      Map<String, Map<String, ClassEnrollments>> map0 = enrollmentsPerSubjectData0.getEnrollmentsPerTerm();
      assertNull(map0);
  }
}
