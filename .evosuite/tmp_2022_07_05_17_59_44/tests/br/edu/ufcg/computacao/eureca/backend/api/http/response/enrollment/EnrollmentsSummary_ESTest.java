/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:29:04 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsStatisticsSummary;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsSummary;
import br.edu.ufcg.computacao.eureca.backend.core.models.TermCount;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnrollmentsSummary_ESTest extends EnrollmentsSummary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      EnrollmentsStatisticsSummary enrollmentsStatisticsSummary0 = mock(EnrollmentsStatisticsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsSummary enrollmentsSummary0 = new EnrollmentsSummary("},v\"FIS", (String) null, termCount0, termCount0, enrollmentsStatisticsSummary0);
      String string0 = enrollmentsSummary0.getTo();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EnrollmentsStatisticsSummary enrollmentsStatisticsSummary0 = mock(EnrollmentsStatisticsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsSummary enrollmentsSummary0 = new EnrollmentsSummary("", "", (TermCount) null, (TermCount) null, enrollmentsStatisticsSummary0);
      String string0 = enrollmentsSummary0.getTo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = new EnrollmentsSummary("", "", (TermCount) null, (TermCount) null, (EnrollmentsStatisticsSummary) null);
      EnrollmentsStatisticsSummary enrollmentsStatisticsSummary0 = enrollmentsSummary0.getSummary();
      assertNull(enrollmentsStatisticsSummary0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      EnrollmentsStatisticsSummary enrollmentsStatisticsSummary0 = mock(EnrollmentsStatisticsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsSummary enrollmentsSummary0 = new EnrollmentsSummary((String) null, (String) null, termCount0, termCount0, enrollmentsStatisticsSummary0);
      String string0 = enrollmentsSummary0.getFrom();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = new EnrollmentsSummary("", "", (TermCount) null, (TermCount) null, (EnrollmentsStatisticsSummary) null);
      String string0 = enrollmentsSummary0.getFrom();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EnrollmentsStatisticsSummary enrollmentsStatisticsSummary0 = mock(EnrollmentsStatisticsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsSummary enrollmentsSummary0 = new EnrollmentsSummary("1", "1", (TermCount) null, (TermCount) null, enrollmentsStatisticsSummary0);
      enrollmentsSummary0.setFrom("1");
      assertEquals("1", enrollmentsSummary0.getTo());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EnrollmentsStatisticsSummary enrollmentsStatisticsSummary0 = mock(EnrollmentsStatisticsSummary.class, new ViolatedAssumptionAnswer());
      doReturn("1").when(enrollmentsStatisticsSummary0).toString();
      EnrollmentsSummary enrollmentsSummary0 = new EnrollmentsSummary("1", "1", (TermCount) null, (TermCount) null, enrollmentsStatisticsSummary0);
      String string0 = enrollmentsSummary0.toString();
      assertEquals("EnrollmentsSummary{from='1', to='1', max=null, min=null, summary=1}", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EnrollmentsStatisticsSummary enrollmentsStatisticsSummary0 = mock(EnrollmentsStatisticsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsSummary enrollmentsSummary0 = new EnrollmentsSummary("1", "1", (TermCount) null, (TermCount) null, enrollmentsStatisticsSummary0);
      enrollmentsSummary0.setMin((TermCount) null);
      assertEquals("1", enrollmentsSummary0.getFrom());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EnrollmentsStatisticsSummary enrollmentsStatisticsSummary0 = mock(EnrollmentsStatisticsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsSummary enrollmentsSummary0 = new EnrollmentsSummary("1", "1", (TermCount) null, (TermCount) null, enrollmentsStatisticsSummary0);
      String string0 = enrollmentsSummary0.getFrom();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EnrollmentsStatisticsSummary enrollmentsStatisticsSummary0 = mock(EnrollmentsStatisticsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsSummary enrollmentsSummary0 = new EnrollmentsSummary("1", "1", (TermCount) null, (TermCount) null, enrollmentsStatisticsSummary0);
      TermCount termCount0 = enrollmentsSummary0.getMax();
      assertNull(termCount0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EnrollmentsStatisticsSummary enrollmentsStatisticsSummary0 = mock(EnrollmentsStatisticsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsSummary enrollmentsSummary0 = new EnrollmentsSummary("1", "1", (TermCount) null, (TermCount) null, enrollmentsStatisticsSummary0);
      String string0 = enrollmentsSummary0.getTo();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EnrollmentsStatisticsSummary enrollmentsStatisticsSummary0 = mock(EnrollmentsStatisticsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsSummary enrollmentsSummary0 = new EnrollmentsSummary("1", "1", (TermCount) null, (TermCount) null, enrollmentsStatisticsSummary0);
      TermCount termCount0 = enrollmentsSummary0.getMin();
      assertNull(termCount0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EnrollmentsStatisticsSummary enrollmentsStatisticsSummary0 = mock(EnrollmentsStatisticsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsSummary enrollmentsSummary0 = new EnrollmentsSummary("1", "1", (TermCount) null, (TermCount) null, enrollmentsStatisticsSummary0);
      enrollmentsSummary0.setMax((TermCount) null);
      assertEquals("1", enrollmentsSummary0.getFrom());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EnrollmentsStatisticsSummary enrollmentsStatisticsSummary0 = mock(EnrollmentsStatisticsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsSummary enrollmentsSummary0 = new EnrollmentsSummary("1", "1", (TermCount) null, (TermCount) null, enrollmentsStatisticsSummary0);
      enrollmentsSummary0.setTo("EnrollmentsSummary{from='1', to='1', max=null, min=null, summary=1}");
      assertEquals("1", enrollmentsSummary0.getFrom());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EnrollmentsStatisticsSummary enrollmentsStatisticsSummary0 = mock(EnrollmentsStatisticsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsSummary enrollmentsSummary0 = new EnrollmentsSummary("1", "1", (TermCount) null, (TermCount) null, enrollmentsStatisticsSummary0);
      EnrollmentsStatisticsSummary enrollmentsStatisticsSummary1 = mock(EnrollmentsStatisticsSummary.class, new ViolatedAssumptionAnswer());
      enrollmentsSummary0.setSummary(enrollmentsStatisticsSummary1);
      assertEquals("1", enrollmentsSummary0.getTo());
  }
}
