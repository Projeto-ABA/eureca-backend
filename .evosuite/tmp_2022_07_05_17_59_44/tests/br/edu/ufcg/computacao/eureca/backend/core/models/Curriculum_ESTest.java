/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 22:43:54 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Curriculum_ESTest extends Curriculum_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>(726);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum("HM[Q#o2}-TS", "HM[Q#o2}-TS", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-15), (-15), (-15), (-15), (-15), 726, 726, 726, (-15), (-15), (Collection<String>) null, arrayList1, arrayList1, (Collection<String>) null, arrayList1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals((-15), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(726, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-15), curriculum0.getMinActivitiesNeeded());
      assertEquals(726, curriculum0.getMinNumberOfTerms());
      assertEquals((-60.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(726, curriculum0.getMaxNumberOfTerms());
      assertEquals("HM[Q#o2}-TS", curriculum0.getCurriculumCode());
      assertEquals((-15), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-15), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-15), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("HM[Q#o2}-TS", curriculum0.getCourseCode());
      assertEquals((-15), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-15), curriculum0.getMinMandatoryCreditsNeeded());
      assertFalse(arrayList0.contains((-15)));
      assertFalse(arrayList1.contains("HM[Q#o2}-TS"));
      assertNotNull(curriculum0);
      
      Integer integer0 = new Integer((-15));
      assertEquals((-15), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains(726));
      assertTrue(arrayList0.contains((-15)));
      
      // Undeclared exception!
      try { 
        curriculum0.getTargetElectiveCredits(726);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer(3716);
      assertEquals(3716, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(integer0));
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Curriculum curriculum0 = new Curriculum("mC?^lbIf0pN\"=*Ngz", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1468), (-1468), 0, (-1468), 0, 0, 0, (-368), (-368), 1415, hashSet0, hashSet0, hashSet0, hashSet0, hashSet0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(1415, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1468), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1468), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1468), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-368), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-368), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-4404.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals("mC?^lbIf0pN\"=*Ngz", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayList0.contains((-1468)));
      assertFalse(hashSet0.contains("mC?^lbIf0pN\"=*Ngz"));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getTargetOptionalCredits(3360);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer((-4200));
      assertEquals((-4200), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(integer0));
      
      Curriculum curriculum0 = new Curriculum((String) null, (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 4577, (-4200), (-3580), 954, 524, (-3580), 479, 1965, 954, 678, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals((-3580), curriculum0.getMinNumberOfTerms());
      assertEquals((-3580), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(479, curriculum0.getMaxNumberOfTerms());
      assertEquals(954, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(524, curriculum0.getMinActivitiesNeeded());
      assertEquals((-4200), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(954, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-2249.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(4577, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(1965, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(678, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculum0.getCourseCode());
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayList0.contains(524));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getTargetComplementaryCredits(1965);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer(31);
      assertEquals(31, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(31));
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("TNw`GX$a=N|#", "TNw`GX$a=N|#", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 0, 0, 0, 0, 0, 3187, 3187, 3187, (-578), set0, set0, set0, set0, set0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals((-578), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(3187, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("TNw`GX$a=N|#", curriculum0.getCourseCode());
      assertEquals(3187, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals("TNw`GX$a=N|#", curriculum0.getCurriculumCode());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(3187, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertFalse(arrayList0.contains(3187));
      assertTrue(arrayList0.contains(31));
      assertFalse(set0.contains("TNw`GX$a=N|#"));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getTargetMandatoryCredits(3187);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer((-542));
      assertEquals((-542), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((-542)));
      
      Curriculum curriculum0 = new Curriculum("6.-(ZwJ>EwF", "6.-(ZwJ>EwF", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-542), (-132), 3861, (-1), (-542), 1423, (-2023), (-4137), 398, (-1), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1423, curriculum0.getMinNumberOfTerms());
      assertEquals((-1), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-542), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-4137), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(3861, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-542), curriculum0.getMinActivitiesNeeded());
      assertEquals((-2023), curriculum0.getMaxNumberOfTerms());
      assertEquals(398, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("6.-(ZwJ>EwF", curriculum0.getCourseCode());
      assertEquals("6.-(ZwJ>EwF", curriculum0.getCurriculumCode());
      assertEquals(3186.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-132), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1), curriculum0.getMinComplementaryCreditsNeeded());
      assertFalse(arrayList0.contains((-1)));
      assertTrue(arrayList0.contains((-542)));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getTargetOptionalCredits(1);
      assertEquals((-542), int0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1423, curriculum0.getMinNumberOfTerms());
      assertEquals((-1), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-542), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-4137), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(3861, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-542), curriculum0.getMinActivitiesNeeded());
      assertEquals((-2023), curriculum0.getMaxNumberOfTerms());
      assertEquals(398, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("6.-(ZwJ>EwF", curriculum0.getCourseCode());
      assertEquals("6.-(ZwJ>EwF", curriculum0.getCurriculumCode());
      assertEquals(3186.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-132), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1), curriculum0.getMinComplementaryCreditsNeeded());
      assertFalse(arrayList0.contains((-1)));
      assertTrue(arrayList0.contains((-542)));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer((-1571));
      assertEquals((-1571), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((-1571)));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Curriculum curriculum0 = new Curriculum("*#`#'Mg=x#Znm7He", "Curriculum{courseCode='", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1571), (-1571), 1500450270, (-1571), 1500450270, (-551), 97, 1435, (-1918), 86251, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(97, curriculum0.getMaxNumberOfTerms());
      assertEquals(86251, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1571), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1571), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-551), curriculum0.getMinNumberOfTerms());
      assertEquals(1.500445557E9, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1435, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1500450270, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1571), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("*#`#'Mg=x#Znm7He", curriculum0.getCourseCode());
      assertEquals((-1918), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1500450270, curriculum0.getMinActivitiesNeeded());
      assertEquals("Curriculum{courseCode='", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains(97));
      assertTrue(arrayList0.contains((-1571)));
      assertFalse(linkedHashSet0.contains("*#`#'Mg=x#Znm7He"));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getTargetMandatoryCredits(1);
      assertEquals((-1571), int0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(97, curriculum0.getMaxNumberOfTerms());
      assertEquals(86251, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1571), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1571), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-551), curriculum0.getMinNumberOfTerms());
      assertEquals(1.500445557E9, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1435, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1500450270, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1571), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("*#`#'Mg=x#Znm7He", curriculum0.getCourseCode());
      assertEquals((-1918), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1500450270, curriculum0.getMinActivitiesNeeded());
      assertEquals("Curriculum{courseCode='", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains(97));
      assertTrue(arrayList0.contains((-1571)));
      assertFalse(linkedHashSet0.contains("*#`#'Mg=x#Znm7He"));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer(1610);
      assertEquals(1610, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(1610));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Vector<String> vector0 = new Vector<String>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Curriculum curriculum0 = new Curriculum("ZXuC", "ZXuC", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 1610, 2266, 2266, 2266, 46, 46, 1610, (-108), 46, 2266, arrayDeque0, arrayDeque0, arrayDeque0, vector0, vector0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(2266, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(46, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-108), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(2266, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(46, curriculum0.getMinActivitiesNeeded());
      assertEquals(2266, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1610, curriculum0.getMaxNumberOfTerms());
      assertEquals(1610, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("ZXuC", curriculum0.getCourseCode());
      assertEquals(46, curriculum0.getMinNumberOfTerms());
      assertEquals(2266, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(8408.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("ZXuC", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains((-108)));
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayDeque0.contains("ZXuC"));
      assertFalse(vector0.contains("ZXuC"));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getTargetElectiveCredits(1);
      assertEquals(1610, int0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(2266, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(46, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-108), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(2266, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(46, curriculum0.getMinActivitiesNeeded());
      assertEquals(2266, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1610, curriculum0.getMaxNumberOfTerms());
      assertEquals(1610, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("ZXuC", curriculum0.getCourseCode());
      assertEquals(46, curriculum0.getMinNumberOfTerms());
      assertEquals(2266, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(8408.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("ZXuC", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains((-108)));
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayDeque0.contains("ZXuC"));
      assertFalse(vector0.contains("ZXuC"));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer((-1448));
      assertEquals((-1448), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(integer0));
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("Buq%GKX:r\") U:f", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-216), (-216), (-216), (-216), (-216), (-216), (-216), 5760, (-1475), (-1448), arrayList1, arrayList1, arrayList1, set0, arrayList1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertEquals((-216), curriculum0.getMinNumberOfTerms());
      assertEquals((-864.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-216), curriculum0.getMaxNumberOfTerms());
      assertEquals((-216), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-216), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1448), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-216), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("Buq%GKX:r\") U:f", curriculum0.getCourseCode());
      assertEquals(5760, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-216), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1475), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-216), curriculum0.getMinActivitiesNeeded());
      assertFalse(arrayList0.contains((-216)));
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayList1.contains("Buq%GKX:r\") U:f"));
      assertFalse(set0.contains("Buq%GKX:r\") U:f"));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getTargetElectiveCredits(1);
      assertEquals((-1448), int0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertEquals((-216), curriculum0.getMinNumberOfTerms());
      assertEquals((-864.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-216), curriculum0.getMaxNumberOfTerms());
      assertEquals((-216), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-216), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1448), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-216), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("Buq%GKX:r\") U:f", curriculum0.getCourseCode());
      assertEquals(5760, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-216), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1475), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-216), curriculum0.getMinActivitiesNeeded());
      assertFalse(arrayList0.contains((-216)));
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayList1.contains("Buq%GKX:r\") U:f"));
      assertFalse(set0.contains("Buq%GKX:r\") U:f"));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer(2948);
      assertEquals(2948, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(2948));
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum("tV", "tV", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-497), 2948, 2948, (-497), 0, 0, (-497), 0, (-2399), (-2399), stack0, stack0, stack0, arrayList1, arrayList1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-497), curriculum0.getMaxNumberOfTerms());
      assertEquals(2948, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(4902.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("tV", curriculum0.getCourseCode());
      assertEquals(2948, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-2399), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-497), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-2399), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-497), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("tV", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains((-2399)));
      assertTrue(arrayList0.contains(integer0));
      assertFalse(stack0.contains("tV"));
      assertFalse(arrayList1.contains("tV"));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getTargetComplementaryCredits(1);
      assertEquals(2948, int0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-497), curriculum0.getMaxNumberOfTerms());
      assertEquals(2948, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(4902.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("tV", curriculum0.getCourseCode());
      assertEquals(2948, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-2399), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-497), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-2399), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-497), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("tV", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains((-2399)));
      assertTrue(arrayList0.contains(integer0));
      assertFalse(stack0.contains("tV"));
      assertFalse(arrayList1.contains("tV"));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer((-1448));
      assertEquals((-1448), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(integer0));
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("Buq%GKX:r\") U:f", "Buq%GKX:r\") U:f", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-490), (-490), (-490), (-490), (-490), (-490), (-490), (-490), (-1475), (-1448), arrayList1, arrayList1, arrayList1, set0, arrayList1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals((-490), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("Buq%GKX:r\") U:f", curriculum0.getCurriculumCode());
      assertEquals((-1448), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-490), curriculum0.getMaxNumberOfTerms());
      assertEquals("Buq%GKX:r\") U:f", curriculum0.getCourseCode());
      assertEquals((-490), curriculum0.getMinActivitiesNeeded());
      assertEquals((-490), curriculum0.getMinNumberOfTerms());
      assertEquals((-1960.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1475), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-490), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-490), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-490), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-490), curriculum0.getMinOptionalCreditsNeeded());
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayList0.contains((-490)));
      assertFalse(arrayList1.contains("Buq%GKX:r\") U:f"));
      assertFalse(set0.contains("Buq%GKX:r\") U:f"));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getTargetComplementaryCredits(1);
      assertEquals((-1448), int0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals((-490), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("Buq%GKX:r\") U:f", curriculum0.getCurriculumCode());
      assertEquals((-1448), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-490), curriculum0.getMaxNumberOfTerms());
      assertEquals("Buq%GKX:r\") U:f", curriculum0.getCourseCode());
      assertEquals((-490), curriculum0.getMinActivitiesNeeded());
      assertEquals((-490), curriculum0.getMinNumberOfTerms());
      assertEquals((-1960.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1475), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-490), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-490), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-490), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-490), curriculum0.getMinOptionalCreditsNeeded());
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayList0.contains(1));
      assertFalse(arrayList1.contains("Buq%GKX:r\") U:f"));
      assertFalse(set0.contains("Buq%GKX:r\") U:f"));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-615), (-615), (-615), (-1), 39, 0, (-615), (-615), (-1317), (-124), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, treeSet0);
      assertEquals((-124), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-615), curriculum0.getMaxNumberOfTerms());
      assertEquals(39, curriculum0.getMinActivitiesNeeded());
      assertEquals((-1846.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-615), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-615), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-615), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-615), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-1317), curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(treeSet0.contains(""));
      assertNotNull(curriculum0);
      
      Collection<String> collection0 = curriculum0.getOptionalSubjectsList();
      assertEquals((-124), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-615), curriculum0.getMaxNumberOfTerms());
      assertEquals(39, curriculum0.getMinActivitiesNeeded());
      assertEquals((-1846.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-615), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-615), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-615), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-615), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-1317), curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(treeSet0.contains(""));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("u\"7", "u\"7", (ArrayList<Integer>) null, arrayList0, arrayList0, arrayList0, (ArrayList<Integer>) null, 2438, 2438, 0, 1532, 1532, 2522, 2522, (-778), 1532, 0, set0, set0, set0, set0, set0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(6408.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1532, curriculum0.getMinActivitiesNeeded());
      assertEquals("u\"7", curriculum0.getCurriculumCode());
      assertEquals(2522, curriculum0.getMaxNumberOfTerms());
      assertEquals("u\"7", curriculum0.getCourseCode());
      assertEquals(2438, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2438, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1532, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1532, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2522, curriculum0.getMinNumberOfTerms());
      assertEquals((-778), curriculum0.getMinNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains(1532));
      assertFalse(set0.contains("u\"7"));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinOptionalCreditsNeeded();
      assertEquals(2438, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(6408.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1532, curriculum0.getMinActivitiesNeeded());
      assertEquals("u\"7", curriculum0.getCurriculumCode());
      assertEquals(2522, curriculum0.getMaxNumberOfTerms());
      assertEquals("u\"7", curriculum0.getCourseCode());
      assertEquals(2438, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2438, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1532, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1532, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2522, curriculum0.getMinNumberOfTerms());
      assertEquals((-778), curriculum0.getMinNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains(1532));
      assertFalse(set0.contains("u\"7"));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-615), (-615), (-615), (-1), 39, 0, (-615), (-615), (-1317), (-124), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, treeSet0);
      assertEquals(39, curriculum0.getMinActivitiesNeeded());
      assertEquals((-615), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-615), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-615), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-615), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-615), curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-1846.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-124), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1317), curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(treeSet0.contains(""));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinOptionalCreditsNeeded();
      assertEquals((-615), int0);
      assertEquals(39, curriculum0.getMinActivitiesNeeded());
      assertEquals((-615), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-615), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-615), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-615), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-615), curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-1846.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-124), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1317), curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(treeSet0.contains(""));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum("", ", idealElectiveCreditsList=", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1435), 2268, 2268, 2268, (-444), 0, (-3357), (-444), 0, 0, arrayList1, arrayList1, arrayList1, arrayList1, arrayList1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(2268, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(5369.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(", idealElectiveCreditsList=", curriculum0.getCurriculumCode());
      assertEquals((-3357), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(2268, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-444), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2268, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1435), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-444), curriculum0.getMinNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains((-444)));
      assertFalse(arrayList1.contains(", idealElectiveCreditsList="));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinNumberOfTerms();
      assertEquals(0, int0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(2268, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(5369.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(", idealElectiveCreditsList=", curriculum0.getCurriculumCode());
      assertEquals((-3357), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(2268, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-444), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2268, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1435), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-444), curriculum0.getMinNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains((-444)));
      assertFalse(arrayList1.contains(", idealElectiveCreditsList="));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("?", "?", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, (-773), (-773), 0, 3167, 0, 3167, 3167, 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-1546.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("?", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(3167, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("?", curriculum0.getCurriculumCode());
      assertEquals((-773), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(3167, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(3167, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-773), curriculum0.getMinComplementaryCreditsNeeded());
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinNumberOfTerms();
      assertEquals(3167, int0);
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-1546.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("?", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(3167, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("?", curriculum0.getCurriculumCode());
      assertEquals((-773), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(3167, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(3167, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-773), curriculum0.getMinComplementaryCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum("tV", "tV", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-497), 2948, 2948, (-497), 0, 0, (-497), 0, (-2399), (-2399), stack0, stack0, stack0, arrayList1, arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals((-497), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2399), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-2399), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("tV", curriculum0.getCourseCode());
      assertEquals((-497), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2948, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("tV", curriculum0.getCurriculumCode());
      assertEquals(2948, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-497), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(4902.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains(0));
      assertFalse(stack0.contains("tV"));
      assertFalse(arrayList1.contains("tV"));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinNumberOfEnrolledCredits();
      assertEquals(0, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals((-497), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2399), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-2399), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("tV", curriculum0.getCourseCode());
      assertEquals((-497), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2948, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("tV", curriculum0.getCurriculumCode());
      assertEquals(2948, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-497), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(4902.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains(0));
      assertFalse(stack0.contains("tV"));
      assertFalse(arrayList1.contains("tV"));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Curriculum curriculum0 = new Curriculum((String) null, (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-765), (-831), 4186, (-765), (-1848), 4238, 306654252, 9, 4186, (-765), linkedList0, linkedList0, hashSet0, linkedList0, linkedList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals((-765), curriculum0.getMinComplementaryCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(4238, curriculum0.getMinNumberOfTerms());
      assertEquals(306654252, curriculum0.getMaxNumberOfTerms());
      assertEquals(1825.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-831), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-765), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1848), curriculum0.getMinActivitiesNeeded());
      assertEquals(4186, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(9, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(4186, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-765), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculum0.getCourseCode());
      assertFalse(arrayList0.contains(306654252));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinNumberOfEnrolledCredits();
      assertEquals(9, int0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals((-765), curriculum0.getMinComplementaryCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(4238, curriculum0.getMinNumberOfTerms());
      assertEquals(306654252, curriculum0.getMaxNumberOfTerms());
      assertEquals(1825.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-831), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-765), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1848), curriculum0.getMinActivitiesNeeded());
      assertEquals(4186, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(9, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(4186, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-765), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculum0.getCourseCode());
      assertFalse(arrayList0.contains(306654252));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>(726);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum("H#o2}-TS", "H#o2}-TS", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 0, 0, 0, 0, 726, 726, 726, 0, 0, (Collection<String>) null, arrayList1, arrayList1, (Collection<String>) null, arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(726, curriculum0.getMaxNumberOfTerms());
      assertEquals("H#o2}-TS", curriculum0.getCourseCode());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(726, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(726, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("H#o2}-TS", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertFalse(arrayList0.contains(0));
      assertFalse(arrayList1.contains("H#o2}-TS"));
      assertNotNull(curriculum0);
      
      double double0 = curriculum0.getMinNumberOfCreditsNeeded();
      assertEquals(0.0, double0, 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(726, curriculum0.getMaxNumberOfTerms());
      assertEquals("H#o2}-TS", curriculum0.getCourseCode());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(726, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(726, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("H#o2}-TS", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertFalse(arrayList0.contains(0));
      assertFalse(arrayList1.contains("H#o2}-TS"));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Curriculum curriculum0 = new Curriculum("", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 1636, 1636, 0, 1636, (-1567), 0, (-1567), 0, 1636, 0, linkedList0, treeSet0, treeSet0, linkedList0, linkedList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(4908.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1636, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1636, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1636, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(1636, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1567), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1567), curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains(1636));
      assertFalse(linkedList0.contains(""));
      assertFalse(treeSet0.contains(""));
      assertNotNull(curriculum0);
      
      double double0 = curriculum0.getMinNumberOfCreditsNeeded();
      assertEquals(4908.0, double0, 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(4908.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1636, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1636, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1636, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(1636, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1567), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1567), curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains(1636));
      assertFalse(linkedList0.contains(""));
      assertFalse(treeSet0.contains(""));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 0, 0, 0, 0, (-1296), 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1296), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinMandatoryCreditsNeeded();
      assertEquals(0, int0);
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1296), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(2030);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(2030));
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum(", idealOptionalCreditsList=", ", idealOptionalCreditsList=", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 225, 2030, 2172, 2030, 2487, 5760, 1, (-1206), (-1452), 2172, set0, set0, set0, set0, set0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(2030, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1, curriculum0.getMaxNumberOfTerms());
      assertEquals(5760, curriculum0.getMinNumberOfTerms());
      assertEquals(2172, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(225, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(", idealOptionalCreditsList=", curriculum0.getCourseCode());
      assertEquals(2030, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1206), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(", idealOptionalCreditsList=", curriculum0.getCurriculumCode());
      assertEquals(6457.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2487, curriculum0.getMinActivitiesNeeded());
      assertEquals(2172, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1452), curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains(225));
      assertFalse(set0.contains(", idealOptionalCreditsList="));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinMandatoryCreditsNeeded();
      assertEquals(225, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(2030, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1, curriculum0.getMaxNumberOfTerms());
      assertEquals(5760, curriculum0.getMinNumberOfTerms());
      assertEquals(2172, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(225, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(", idealOptionalCreditsList=", curriculum0.getCourseCode());
      assertEquals(2030, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1206), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(", idealOptionalCreditsList=", curriculum0.getCurriculumCode());
      assertEquals(6457.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2487, curriculum0.getMinActivitiesNeeded());
      assertEquals(2172, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1452), curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains(1));
      assertFalse(set0.contains(", idealOptionalCreditsList="));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum(", minNumberOfTerms=", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, (-836), 3382, (-836), (-836), 3382, (-836), (-2147), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-836), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-2147), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(", minNumberOfTerms=", curriculum0.getCourseCode());
      assertEquals(3382, curriculum0.getMinActivitiesNeeded());
      assertEquals((-836), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(3382, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-836.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-836), curriculum0.getMaxNumberOfTerms());
      assertEquals((-836), curriculum0.getMinNumberOfTerms());
      assertNull(curriculum0.getCurriculumCode());
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinElectiveCreditsNeeded();
      assertEquals(0, int0);
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-836), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-2147), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(", minNumberOfTerms=", curriculum0.getCourseCode());
      assertEquals(3382, curriculum0.getMinActivitiesNeeded());
      assertEquals((-836), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(3382, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-836.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-836), curriculum0.getMaxNumberOfTerms());
      assertEquals((-836), curriculum0.getMinNumberOfTerms());
      assertNull(curriculum0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Curriculum curriculum0 = new Curriculum("", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 125, (-1493), (-1493), 3208, (-97), 125, 125, (-97), 0, (-1493), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(347.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-97), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1493), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMinNumberOfTerms());
      assertEquals(3208, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(125, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1493), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1493), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-97), curriculum0.getMinActivitiesNeeded());
      assertFalse(arrayList0.contains(125));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinElectiveCreditsNeeded();
      assertEquals((-1493), int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(347.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-97), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1493), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMinNumberOfTerms());
      assertEquals(3208, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(125, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1493), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1493), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-97), curriculum0.getMinActivitiesNeeded());
      assertFalse(arrayList0.contains(125));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Curriculum curriculum0 = new Curriculum((String) null, (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 0, 2021, 2021, 0, 2021, 286, 2021, 286, 8233, treeSet0, treeSet0, treeSet0, (Collection<String>) null, (Collection<String>) null);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(2021, curriculum0.getMinNumberOfEnrolledCredits());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(286, curriculum0.getMaxNumberOfTerms());
      assertEquals(2021, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(8233, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(4042.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertNull(curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(286, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2021, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2021, curriculum0.getMinNumberOfTerms());
      assertFalse(arrayList0.contains(0));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinComplementaryCreditsNeeded();
      assertEquals(2021, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(2021, curriculum0.getMinNumberOfEnrolledCredits());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(286, curriculum0.getMaxNumberOfTerms());
      assertEquals(2021, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(8233, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(4042.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertNull(curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(286, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2021, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2021, curriculum0.getMinNumberOfTerms());
      assertFalse(arrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum(";", (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-569), (-569), 873, (-569), 873, (-569), 873, 0, (-569), (-569), arrayList1, arrayList1, stack0, arrayList1, stack0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-569), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-569), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-569), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(";", curriculum0.getCourseCode());
      assertEquals((-569), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-569), curriculum0.getMinNumberOfTerms());
      assertEquals(873, curriculum0.getMinElectiveCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(873, curriculum0.getMaxNumberOfTerms());
      assertEquals((-569), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-834.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(873, curriculum0.getMinActivitiesNeeded());
      assertFalse(arrayList0.contains(873));
      assertFalse(stack0.contains(";"));
      assertFalse(arrayList1.contains(";"));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinComplementaryCreditsNeeded();
      assertEquals((-569), int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-569), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-569), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-569), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(";", curriculum0.getCourseCode());
      assertEquals((-569), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-569), curriculum0.getMinNumberOfTerms());
      assertEquals(873, curriculum0.getMinElectiveCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(873, curriculum0.getMaxNumberOfTerms());
      assertEquals((-569), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-834.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(873, curriculum0.getMinActivitiesNeeded());
      assertFalse(arrayList0.contains(873));
      assertFalse(stack0.contains(";"));
      assertFalse(arrayList1.contains(";"));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("", "6p-32/`CX/)d$OXAq", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 0, (-5928), (-1), (-5928), (-1), 0, set0, set0, set0, set0, set0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("6p-32/`CX/)d$OXAq", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-5928), curriculum0.getMinNumberOfTerms());
      assertEquals((-5928), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-1), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertFalse(set0.contains(""));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinActivitiesNeeded();
      assertEquals(0, int0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("6p-32/`CX/)d$OXAq", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-5928), curriculum0.getMinNumberOfTerms());
      assertEquals((-5928), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-1), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertFalse(set0.contains(""));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Curriculum curriculum0 = new Curriculum("A~dxYDa=", "A~dxYDa=", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 391, 391, 391, 0, 391, 391, 0, 391, 391, (-1578), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(391, curriculum0.getMinActivitiesNeeded());
      assertEquals((-1578), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(391, curriculum0.getMinNumberOfTerms());
      assertEquals("A~dxYDa=", curriculum0.getCurriculumCode());
      assertEquals(391, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("A~dxYDa=", curriculum0.getCourseCode());
      assertEquals(1173.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(391, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(391, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(391, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(391, curriculum0.getMinOptionalCreditsNeeded());
      assertFalse(arrayList0.contains(0));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinActivitiesNeeded();
      assertEquals(391, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(391, curriculum0.getMinActivitiesNeeded());
      assertEquals((-1578), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(391, curriculum0.getMinNumberOfTerms());
      assertEquals("A~dxYDa=", curriculum0.getCurriculumCode());
      assertEquals(391, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("A~dxYDa=", curriculum0.getCourseCode());
      assertEquals(1173.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(391, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(391, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(391, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(391, curriculum0.getMinOptionalCreditsNeeded());
      assertFalse(arrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 3559, 3559, 3559, 1, 3559, 1, 0, 0, 0, (-659), set0, set0, set0, set0, set0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(3559, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(10678.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(3559, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(3559, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(1, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-659), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(3559, curriculum0.getMinActivitiesNeeded());
      assertFalse(arrayList0.contains(0));
      assertFalse(set0.contains(""));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMaxNumberOfTerms();
      assertEquals(0, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(3559, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(10678.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(3559, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(3559, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(1, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-659), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(3559, curriculum0.getMinActivitiesNeeded());
      assertFalse(arrayList0.contains(0));
      assertFalse(set0.contains(""));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>(1366);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Curriculum curriculum0 = new Curriculum("r2.aP<#H%2f5$OJcg9", "r2.aP<#H%2f5$OJcg9", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-102), 0, 0, (-1), 0, (-1), 0, (-102), 0, (-1327), hashSet0, hashSet0, hashSet0, hashSet0, hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("r2.aP<#H%2f5$OJcg9", curriculum0.getCurriculumCode());
      assertEquals((-1), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-103.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-102), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-102), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1327), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("r2.aP<#H%2f5$OJcg9", curriculum0.getCourseCode());
      assertEquals((-1), curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertFalse(hashSet0.contains("r2.aP<#H%2f5$OJcg9"));
      assertNotNull(curriculum0);
      
      curriculum0.setMaxNumberOfTerms((-1801));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("r2.aP<#H%2f5$OJcg9", curriculum0.getCurriculumCode());
      assertEquals((-1), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-103.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-102), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-102), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1327), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("r2.aP<#H%2f5$OJcg9", curriculum0.getCourseCode());
      assertEquals((-1), curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-1801), curriculum0.getMaxNumberOfTerms());
      assertFalse(hashSet0.contains("r2.aP<#H%2f5$OJcg9"));
      
      int int0 = curriculum0.getMaxNumberOfTerms();
      assertEquals((-1801), int0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("r2.aP<#H%2f5$OJcg9", curriculum0.getCurriculumCode());
      assertEquals((-1), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-103.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-102), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-102), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1327), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("r2.aP<#H%2f5$OJcg9", curriculum0.getCourseCode());
      assertEquals((-1), curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-1801), curriculum0.getMaxNumberOfTerms());
      assertFalse(hashSet0.contains("r2.aP<#H%2f5$OJcg9"));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(1));
      assertNotNull(arrayList0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Curriculum curriculum0 = new Curriculum("", (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 1, 1, 2756, 2587, 2587, 2756, 1, 2587, 0, (-892), (Collection<String>) null, (Collection<String>) null, stack0, (Collection<String>) null, (Collection<String>) null);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(2587, curriculum0.getMinActivitiesNeeded());
      assertEquals(5345.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2756, curriculum0.getMinNumberOfTerms());
      assertEquals(2756, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(1, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-892), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2587, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2587, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMaxNumberOfTerms());
      assertFalse(arrayList0.contains(1));
      assertFalse(stack0.contains(""));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMaxNumberOfEnrolledCredits();
      assertEquals(0, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(2587, curriculum0.getMinActivitiesNeeded());
      assertEquals(5345.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2756, curriculum0.getMinNumberOfTerms());
      assertEquals(2756, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(1, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-892), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2587, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2587, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMaxNumberOfTerms());
      assertFalse(arrayList0.contains(1));
      assertFalse(stack0.contains(""));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("')", "')", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 914, 914, 914, 914, 4, 4, 4, (-1333), 4, 4, set0, set0, set0, set0, set0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertEquals(3656.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(914, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(4, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(914, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(914, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(4, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1333), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(914, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(4, curriculum0.getMinActivitiesNeeded());
      assertEquals("')", curriculum0.getCourseCode());
      assertEquals(4, curriculum0.getMaxNumberOfTerms());
      assertEquals(4, curriculum0.getMinNumberOfTerms());
      assertEquals("')", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains((-1333)));
      assertFalse(set0.contains("')"));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMaxNumberOfEnrolledCredits();
      assertEquals(4, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertEquals(3656.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(914, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(4, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(914, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(914, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(4, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1333), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(914, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(4, curriculum0.getMinActivitiesNeeded());
      assertEquals("')", curriculum0.getCourseCode());
      assertEquals(4, curriculum0.getMaxNumberOfTerms());
      assertEquals(4, curriculum0.getMinNumberOfTerms());
      assertEquals("')", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains((-1333)));
      assertFalse(set0.contains("')"));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Curriculum curriculum0 = new Curriculum("Functions.forPredicate(", "Functions.forPredicate(", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1251), (-1251), (-590), (-2007), (-1251), (-590), (-2007), 0, 0, 651, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1251), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1251), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2007), curriculum0.getMaxNumberOfTerms());
      assertEquals((-1251), curriculum0.getMinActivitiesNeeded());
      assertEquals((-2007), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("Functions.forPredicate(", curriculum0.getCourseCode());
      assertEquals((-5099.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("Functions.forPredicate(", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-590), curriculum0.getMinNumberOfTerms());
      assertEquals((-590), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(651, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertFalse(arrayList0.contains((-1251)));
      assertNotNull(curriculum0);
      
      Collection<String> collection0 = curriculum0.getMandatorySubjectsList();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1251), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1251), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2007), curriculum0.getMaxNumberOfTerms());
      assertEquals((-1251), curriculum0.getMinActivitiesNeeded());
      assertEquals((-2007), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("Functions.forPredicate(", curriculum0.getCourseCode());
      assertEquals((-5099.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("Functions.forPredicate(", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-590), curriculum0.getMinNumberOfTerms());
      assertEquals((-590), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(651, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertFalse(arrayList0.contains((-1251)));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum(", optionalSubjectsList=", "(fC4TA", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 0, (-933), 1247, 3158, (-933), 1952, arrayDeque0, arrayDeque0, set0, arrayDeque0, arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals((-933), curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1952, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("(fC4TA", curriculum0.getCurriculumCode());
      assertEquals((-933), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(3158, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1247, curriculum0.getMaxNumberOfTerms());
      assertEquals(", optionalSubjectsList=", curriculum0.getCourseCode());
      assertFalse(arrayDeque0.contains("(fC4TA"));
      assertFalse(set0.contains("(fC4TA"));
      assertNotNull(curriculum0);
      
      ArrayList<Integer> arrayList0 = curriculum0.getIdealOptionalCreditsList();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals((-933), curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1952, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("(fC4TA", curriculum0.getCurriculumCode());
      assertEquals((-933), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(3158, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1247, curriculum0.getMaxNumberOfTerms());
      assertEquals(", optionalSubjectsList=", curriculum0.getCourseCode());
      assertFalse(arrayDeque0.contains("(fC4TA"));
      assertFalse(set0.contains("(fC4TA"));
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(0));
      
      Locale locale0 = Locale.PRC;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum(", maxNumberOfEnrolledCredits=", ", maxNumberOfEnrolledCredits=", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 54, 2121, 125, 125, 54, 2121, 125, (-549), 0, (-549), set0, set0, set0, set0, set0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(2121, curriculum0.getMinNumberOfTerms());
      assertEquals(125, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2425.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(125, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(54, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-549), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(54, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertEquals(", maxNumberOfEnrolledCredits=", curriculum0.getCurriculumCode());
      assertEquals((-549), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(", maxNumberOfEnrolledCredits=", curriculum0.getCourseCode());
      assertEquals(2121, curriculum0.getMinOptionalCreditsNeeded());
      assertFalse(arrayList0.contains(54));
      assertTrue(arrayList0.contains(0));
      assertFalse(set0.contains(", maxNumberOfEnrolledCredits="));
      assertNotNull(curriculum0);
      
      ArrayList<Integer> arrayList1 = curriculum0.getIdealOptionalCreditsList();
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(2121, curriculum0.getMinNumberOfTerms());
      assertEquals(125, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2425.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(125, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(54, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-549), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(54, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertEquals(", maxNumberOfEnrolledCredits=", curriculum0.getCurriculumCode());
      assertEquals((-549), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(", maxNumberOfEnrolledCredits=", curriculum0.getCourseCode());
      assertEquals(2121, curriculum0.getMinOptionalCreditsNeeded());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList0.contains(54));
      assertTrue(arrayList0.contains(0));
      assertFalse(set0.contains(", maxNumberOfEnrolledCredits="));
      assertTrue(arrayList1.contains(0));
      assertFalse(arrayList1.contains(54));
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer(3867);
      assertEquals(3867, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(3867));
      
      Curriculum curriculum0 = new Curriculum("a5jrtn098$", "a5jrtn098$", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1917), 92, (-1917), 1, (-1917), (-1917), 1, (-1917), 92, 1, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1917), curriculum0.getMinActivitiesNeeded());
      assertEquals("a5jrtn098$", curriculum0.getCurriculumCode());
      assertEquals((-1917), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(1, curriculum0.getMaxNumberOfTerms());
      assertEquals("a5jrtn098$", curriculum0.getCourseCode());
      assertEquals(92, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1917), curriculum0.getMinNumberOfTerms());
      assertEquals((-1917), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1917), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-3741.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(92, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertFalse(arrayList0.contains((-1917)));
      assertTrue(arrayList0.contains(3867));
      assertNotNull(curriculum0);
      
      Integer integer1 = curriculum0.getIdealOptionalCredits(1);
      assertEquals(3867, (int)integer1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1917), curriculum0.getMinActivitiesNeeded());
      assertEquals("a5jrtn098$", curriculum0.getCurriculumCode());
      assertEquals((-1917), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(1, curriculum0.getMaxNumberOfTerms());
      assertEquals("a5jrtn098$", curriculum0.getCourseCode());
      assertEquals(92, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1917), curriculum0.getMinNumberOfTerms());
      assertEquals((-1917), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1917), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-3741.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(92, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertFalse(arrayList0.contains((-1917)));
      assertTrue(arrayList0.contains(3867));
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer((-1448));
      assertEquals((-1448), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains((-1448)));
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("Buq%GKX:r\") U:f", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-216), (-216), (-216), (-216), (-216), (-216), (-216), 5760, (-1475), (-1448), arrayList1, arrayList1, arrayList1, set0, arrayList1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertEquals((-216), curriculum0.getMinNumberOfTerms());
      assertEquals((-1448), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-216), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("Buq%GKX:r\") U:f", curriculum0.getCourseCode());
      assertEquals((-216), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-216), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-216), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1475), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(5760, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-216), curriculum0.getMaxNumberOfTerms());
      assertEquals((-864.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-216), curriculum0.getMinActivitiesNeeded());
      assertTrue(arrayList0.contains((-1448)));
      assertFalse(arrayList0.contains((-216)));
      assertFalse(arrayList1.contains("Buq%GKX:r\") U:f"));
      assertFalse(set0.contains("Buq%GKX:r\") U:f"));
      assertNotNull(curriculum0);
      
      Integer integer1 = curriculum0.getIdealOptionalCredits(1);
      assertEquals((-1448), (int)integer1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertEquals((-216), curriculum0.getMinNumberOfTerms());
      assertEquals((-1448), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-216), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("Buq%GKX:r\") U:f", curriculum0.getCourseCode());
      assertEquals((-216), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-216), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-216), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1475), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(5760, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-216), curriculum0.getMaxNumberOfTerms());
      assertEquals((-864.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-216), curriculum0.getMinActivitiesNeeded());
      assertTrue(arrayList0.contains((-1448)));
      assertFalse(arrayList0.contains((-216)));
      assertFalse(arrayList1.contains("Buq%GKX:r\") U:f"));
      assertFalse(set0.contains("Buq%GKX:r\") U:f"));
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer((-1571));
      assertEquals((-1571), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((-1571)));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Curriculum curriculum0 = new Curriculum("*#`#'Mg=x#Znm7He", "Curriculum{courseCode='", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1571), (-1571), 1500450270, (-1571), 1500450270, (-551), 97, 1435, (-1918), 86251, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals((-1918), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1571), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("*#`#'Mg=x#Znm7He", curriculum0.getCourseCode());
      assertEquals(1435, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1500450270, curriculum0.getMinActivitiesNeeded());
      assertEquals(1.500445557E9, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-551), curriculum0.getMinNumberOfTerms());
      assertEquals(97, curriculum0.getMaxNumberOfTerms());
      assertEquals(86251, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1571), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1571), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("Curriculum{courseCode='", curriculum0.getCurriculumCode());
      assertEquals(1500450270, curriculum0.getMinElectiveCreditsNeeded());
      assertFalse(arrayList0.contains(1500450270));
      assertTrue(arrayList0.contains((-1571)));
      assertFalse(linkedHashSet0.contains("Curriculum{courseCode='"));
      assertNotNull(curriculum0);
      
      Integer integer1 = curriculum0.getIdealOptionalCredits(1);
      assertEquals((-1571), (int)integer1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals((-1918), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1571), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("*#`#'Mg=x#Znm7He", curriculum0.getCourseCode());
      assertEquals(1435, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1500450270, curriculum0.getMinActivitiesNeeded());
      assertEquals(1.500445557E9, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-551), curriculum0.getMinNumberOfTerms());
      assertEquals(97, curriculum0.getMaxNumberOfTerms());
      assertEquals(86251, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1571), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1571), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("Curriculum{courseCode='", curriculum0.getCurriculumCode());
      assertEquals(1500450270, curriculum0.getMinElectiveCreditsNeeded());
      assertFalse(arrayList0.contains(1500450270));
      assertTrue(arrayList0.contains((-1571)));
      assertFalse(linkedHashSet0.contains("Curriculum{courseCode='"));
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer(4577);
      assertEquals(4577, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(integer0));
      
      Curriculum curriculum0 = new Curriculum((String) null, (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 4577, 4577, (-3580), 954, 524, (-3580), 479, 1965, 954, 678, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(curriculum0.getCourseCode());
      assertEquals(1965, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(954, curriculum0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(479, curriculum0.getMaxNumberOfTerms());
      assertEquals(678, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(954, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(6528.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(524, curriculum0.getMinActivitiesNeeded());
      assertEquals((-3580), curriculum0.getMinNumberOfTerms());
      assertEquals(4577, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(4577, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-3580), curriculum0.getMinElectiveCreditsNeeded());
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayList0.contains((-3580)));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getIdealMaxCredits(1);
      assertEquals(18308, int0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(curriculum0.getCourseCode());
      assertEquals(1965, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(954, curriculum0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(479, curriculum0.getMaxNumberOfTerms());
      assertEquals(678, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(954, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(6528.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(524, curriculum0.getMinActivitiesNeeded());
      assertEquals((-3580), curriculum0.getMinNumberOfTerms());
      assertEquals(4577, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(4577, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-3580), curriculum0.getMinElectiveCreditsNeeded());
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayList0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Curriculum curriculum0 = new Curriculum("<+og'N4M", "com.google.common.base.Predicates$InPredicate", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 133, 8202, 448, 8202, 133, (-25), 3867, 133, 1, (-2099), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(133, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("<+og'N4M", curriculum0.getCourseCode());
      assertEquals("com.google.common.base.Predicates$InPredicate", curriculum0.getCurriculumCode());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(133, curriculum0.getMinActivitiesNeeded());
      assertEquals(133, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(16985.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2099), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(448, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(3867, curriculum0.getMaxNumberOfTerms());
      assertEquals(8202, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(8202, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-25), curriculum0.getMinNumberOfTerms());
      assertFalse(arrayList0.contains(448));
      assertNotNull(curriculum0);
      
      ArrayList<Integer> arrayList1 = curriculum0.getIdealMandatoryCreditsList();
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(133, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("<+og'N4M", curriculum0.getCourseCode());
      assertEquals("com.google.common.base.Predicates$InPredicate", curriculum0.getCurriculumCode());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(133, curriculum0.getMinActivitiesNeeded());
      assertEquals(133, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(16985.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2099), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(448, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(3867, curriculum0.getMaxNumberOfTerms());
      assertEquals(8202, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(8202, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-25), curriculum0.getMinNumberOfTerms());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList0.contains(448));
      assertFalse(arrayList1.contains(448));
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Integer) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Curriculum curriculum0 = new Curriculum(", minElectiveCreditsNeeded=", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 7, 7, (-2770), 0, 0, 24, 7, 24, 7, (-2770), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(7, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-2770), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(24, curriculum0.getMinNumberOfTerms());
      assertEquals(7, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(24, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-2756.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(7, curriculum0.getMaxNumberOfTerms());
      assertEquals((-2770), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(", minElectiveCreditsNeeded=", curriculum0.getCourseCode());
      assertEquals(7, curriculum0.getMinOptionalCreditsNeeded());
      assertFalse(arrayList0.contains(7));
      assertNotNull(curriculum0);
      
      ArrayList<Integer> arrayList1 = curriculum0.getIdealMandatoryCreditsList();
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(7, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-2770), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(24, curriculum0.getMinNumberOfTerms());
      assertEquals(7, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(24, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-2756.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(7, curriculum0.getMaxNumberOfTerms());
      assertEquals((-2770), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(", minElectiveCreditsNeeded=", curriculum0.getCourseCode());
      assertEquals(7, curriculum0.getMinOptionalCreditsNeeded());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList0.contains(7));
      assertFalse(arrayList1.contains(7));
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Integer) null);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(265);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Curriculum curriculum0 = new Curriculum("", "DlN/fZ+{/jS'GF", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1496), 4616, 4616, (-70), (-1231), (-944), 1098, (-944), 6, 1, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(4616, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1098, curriculum0.getMaxNumberOfTerms());
      assertEquals((-944), curriculum0.getMinNumberOfTerms());
      assertEquals((-70), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(4616, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1231), curriculum0.getMinActivitiesNeeded());
      assertEquals(6, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("DlN/fZ+{/jS'GF", curriculum0.getCurriculumCode());
      assertEquals((-1496), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-944), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(7666.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCourseCode());
      assertFalse(arrayList0.contains((-944)));
      assertFalse(arrayDeque0.contains(""));
      assertNotNull(curriculum0);
      
      Integer integer0 = curriculum0.getIdealMandatoryCredits(1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(4616, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1098, curriculum0.getMaxNumberOfTerms());
      assertEquals((-944), curriculum0.getMinNumberOfTerms());
      assertEquals((-70), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(4616, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1231), curriculum0.getMinActivitiesNeeded());
      assertEquals(6, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("DlN/fZ+{/jS'GF", curriculum0.getCurriculumCode());
      assertEquals((-1496), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-944), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(7666.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCourseCode());
      assertFalse(arrayList0.contains((-1496)));
      assertFalse(arrayDeque0.contains(""));
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer(163);
      assertEquals(163, (int)integer0);
      assertNotNull(integer0);
      
      Curriculum curriculum0 = new Curriculum("", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 163, 163, 163, 163, 163, 163, 163, 4082, 163, 163, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(652.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(163, curriculum0.getMinNumberOfTerms());
      assertEquals(163, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(163, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(163, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(163, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(163, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(163, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(4082, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(163, curriculum0.getMinActivitiesNeeded());
      assertEquals(163, curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains(163));
      assertNotNull(curriculum0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(163));
      assertFalse(arrayList0.contains(4082));
      
      Integer integer1 = curriculum0.getIdealMandatoryCredits(1);
      assertEquals(163, (int)integer1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(652.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(163, curriculum0.getMinNumberOfTerms());
      assertEquals(163, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(163, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(163, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(163, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(163, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(163, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(4082, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(163, curriculum0.getMinActivitiesNeeded());
      assertEquals(163, curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertTrue(arrayList0.contains(163));
      assertFalse(arrayList0.contains(1));
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer((-1448));
      assertEquals((-1448), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(integer0));
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("Buq%GKX:r\") U:f", "Buq%GKX:r\") U:f", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-490), (-490), (-490), (-490), (-490), (-490), (-490), (-490), (-1475), (-1448), arrayList1, arrayList1, arrayList1, set0, arrayList1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals((-1448), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("Buq%GKX:r\") U:f", curriculum0.getCourseCode());
      assertEquals((-1475), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-490), curriculum0.getMinActivitiesNeeded());
      assertEquals("Buq%GKX:r\") U:f", curriculum0.getCurriculumCode());
      assertEquals((-490), curriculum0.getMaxNumberOfTerms());
      assertEquals((-490), curriculum0.getMinNumberOfTerms());
      assertEquals((-490), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-490), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-490), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-490), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1960.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-490), curriculum0.getMinNumberOfEnrolledCredits());
      assertTrue(arrayList0.contains((-1448)));
      assertFalse(arrayList0.contains((-490)));
      assertFalse(arrayList1.contains("Buq%GKX:r\") U:f"));
      assertFalse(set0.contains("Buq%GKX:r\") U:f"));
      assertNotNull(curriculum0);
      
      Integer integer1 = curriculum0.getIdealMandatoryCredits(1);
      assertEquals((-1448), (int)integer1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals((-1448), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("Buq%GKX:r\") U:f", curriculum0.getCourseCode());
      assertEquals((-1475), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-490), curriculum0.getMinActivitiesNeeded());
      assertEquals("Buq%GKX:r\") U:f", curriculum0.getCurriculumCode());
      assertEquals((-490), curriculum0.getMaxNumberOfTerms());
      assertEquals((-490), curriculum0.getMinNumberOfTerms());
      assertEquals((-490), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-490), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-490), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-490), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1960.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-490), curriculum0.getMinNumberOfEnrolledCredits());
      assertTrue(arrayList0.contains((-1448)));
      assertFalse(arrayList0.contains((-490)));
      assertFalse(arrayList1.contains("Buq%GKX:r\") U:f"));
      assertFalse(set0.contains("Buq%GKX:r\") U:f"));
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("0SV**J72J", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, (-153), 920, 0, 63, (-153), 1, set0, set0, set0, set0, set0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-153), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(920, curriculum0.getMinNumberOfTerms());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-153), curriculum0.getMinActivitiesNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals("0SV**J72J", curriculum0.getCourseCode());
      assertEquals(1, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(63, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertFalse(set0.contains("0SV**J72J"));
      assertNotNull(curriculum0);
      
      ArrayList<Integer> arrayList0 = curriculum0.getIdealElectiveCreditsList();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-153), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(920, curriculum0.getMinNumberOfTerms());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-153), curriculum0.getMinActivitiesNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals("0SV**J72J", curriculum0.getCourseCode());
      assertEquals(1, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(63, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertFalse(set0.contains("0SV**J72J"));
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Integer) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Curriculum curriculum0 = new Curriculum(", minElectiveCreditsNeeded=", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 7, 7, (-2770), 0, 0, 24, 7, 24, 7, (-2770), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-2770), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(", minElectiveCreditsNeeded=", curriculum0.getCourseCode());
      assertEquals((-2756.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(7, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(24, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(7, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(7, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(24, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-2770), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(7, curriculum0.getMaxNumberOfTerms());
      assertFalse(arrayList0.contains(0));
      assertNotNull(curriculum0);
      
      ArrayList<Integer> arrayList1 = curriculum0.getIdealElectiveCreditsList();
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-2770), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(", minElectiveCreditsNeeded=", curriculum0.getCourseCode());
      assertEquals((-2756.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(7, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(24, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(7, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(7, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(24, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-2770), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(7, curriculum0.getMaxNumberOfTerms());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList0.contains(0));
      assertFalse(arrayList1.contains(0));
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>(726);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum("HM[Q#o2}-TS", "HM[Q#o2}-TS", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 0, 0, 0, 0, 726, 726, 726, 0, 0, (Collection<String>) null, arrayList1, arrayList1, (Collection<String>) null, arrayList1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(726, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("HM[Q#o2}-TS", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("HM[Q#o2}-TS", curriculum0.getCurriculumCode());
      assertEquals(726, curriculum0.getMinNumberOfTerms());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(726, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertFalse(arrayList0.contains(0));
      assertFalse(arrayList1.contains("HM[Q#o2}-TS"));
      assertNotNull(curriculum0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(0));
      assertFalse(arrayList0.contains(726));
      
      Integer integer1 = curriculum0.getIdealElectiveCredits(1);
      assertEquals(0, (int)integer1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(726, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("HM[Q#o2}-TS", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("HM[Q#o2}-TS", curriculum0.getCurriculumCode());
      assertEquals(726, curriculum0.getMinNumberOfTerms());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(726, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertTrue(arrayList0.contains(0));
      assertFalse(arrayList0.contains(726));
      assertFalse(arrayList1.contains("HM[Q#o2}-TS"));
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Integer integer0 = new Integer((-465));
      assertEquals((-465), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = hashSet0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(hashSet0.contains((-465)));
      
      boolean boolean1 = arrayList0.addAll((Collection<? extends Integer>) hashSet0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(arrayList0.contains((-465)));
      assertTrue(hashSet0.contains((-465)));
      assertTrue(boolean1 == boolean0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Curriculum curriculum0 = new Curriculum("3(1^WHd48L!|%z>u", ")Qb*lzw.k]@nB", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-465), (-465), (-465), (-465), (-465), (-2724), (-2724), 1733, (-1), 1733, treeSet0, treeSet0, treeSet0, treeSet0, treeSet0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-465), curriculum0.getMinActivitiesNeeded());
      assertEquals((-465), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1733, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1733, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("3(1^WHd48L!|%z>u", curriculum0.getCourseCode());
      assertEquals(")Qb*lzw.k]@nB", curriculum0.getCurriculumCode());
      assertEquals((-465), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1860.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2724), curriculum0.getMinNumberOfTerms());
      assertEquals((-465), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-2724), curriculum0.getMaxNumberOfTerms());
      assertEquals((-465), curriculum0.getMinMandatoryCreditsNeeded());
      assertFalse(arrayList0.contains((-1)));
      assertTrue(arrayList0.contains((-465)));
      assertFalse(treeSet0.contains("3(1^WHd48L!|%z>u"));
      assertNotNull(curriculum0);
      
      Integer integer1 = curriculum0.getIdealElectiveCredits(1);
      assertEquals((-465), (int)integer1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-465), curriculum0.getMinActivitiesNeeded());
      assertEquals((-465), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1733, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1733, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("3(1^WHd48L!|%z>u", curriculum0.getCourseCode());
      assertEquals(")Qb*lzw.k]@nB", curriculum0.getCurriculumCode());
      assertEquals((-465), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1860.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2724), curriculum0.getMinNumberOfTerms());
      assertEquals((-465), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-2724), curriculum0.getMaxNumberOfTerms());
      assertEquals((-465), curriculum0.getMinMandatoryCreditsNeeded());
      assertFalse(arrayList0.contains((-1)));
      assertTrue(arrayList0.contains((-465)));
      assertFalse(treeSet0.contains("3(1^WHd48L!|%z>u"));
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer((byte) (-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(integer0));
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Curriculum curriculum0 = new Curriculum(", minMandatoryCreditsNeeded=", "-SA9Wxe", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 20, 1, (byte) (-108), 20, 1, (-1827), (-1821), 1231, 17, 17, stack0, stack0, stack0, stack0, stack0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals((-1827), curriculum0.getMinNumberOfTerms());
      assertEquals(20, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(", minMandatoryCreditsNeeded=", curriculum0.getCourseCode());
      assertEquals((-67.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("-SA9Wxe", curriculum0.getCurriculumCode());
      assertEquals(17, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1231, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(17, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1821), curriculum0.getMaxNumberOfTerms());
      assertEquals((-108), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculum0.getMinActivitiesNeeded());
      assertEquals(20, curriculum0.getMinComplementaryCreditsNeeded());
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayList0.contains(17));
      assertFalse(stack0.contains(", minMandatoryCreditsNeeded="));
      assertNotNull(curriculum0);
      
      Integer integer1 = curriculum0.getIdealElectiveCredits(1);
      assertEquals((-1), (int)integer1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals((-1827), curriculum0.getMinNumberOfTerms());
      assertEquals(20, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(", minMandatoryCreditsNeeded=", curriculum0.getCourseCode());
      assertEquals((-67.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("-SA9Wxe", curriculum0.getCurriculumCode());
      assertEquals(17, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1231, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(17, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1821), curriculum0.getMaxNumberOfTerms());
      assertEquals((-108), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculum0.getMinActivitiesNeeded());
      assertEquals(20, curriculum0.getMinComplementaryCreditsNeeded());
      assertTrue(arrayList0.contains(integer1));
      assertFalse(arrayList0.contains(17));
      assertFalse(stack0.contains(", minMandatoryCreditsNeeded="));
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(""));
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum(", mandatorySubjectsList=", ", mandatorySubjectsList=", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 1682554634, 1682554634, 0, 125, 0, 44, 0, 125, 8202, 0, set0, set0, set0, set0, (Collection<String>) null);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(44, curriculum0.getMinNumberOfTerms());
      assertEquals(", mandatorySubjectsList=", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(125, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1682554634, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(8202, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1682554634, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(", mandatorySubjectsList=", curriculum0.getCourseCode());
      assertEquals((-9.29857903E8), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertFalse(set0.contains(", mandatorySubjectsList="));
      assertNotNull(curriculum0);
      
      ArrayList<Integer> arrayList0 = curriculum0.getIdealComplementaryCreditsList();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(44, curriculum0.getMinNumberOfTerms());
      assertEquals(", mandatorySubjectsList=", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(125, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1682554634, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(8202, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1682554634, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(", mandatorySubjectsList=", curriculum0.getCourseCode());
      assertEquals((-9.29857903E8), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertFalse(set0.contains(", mandatorySubjectsList="));
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Integer) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Curriculum curriculum0 = new Curriculum(", minElectiveCreditsNeeded=", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 7, 7, (-2770), 0, 0, 24, 7, 24, 7, (-2770), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(24, curriculum0.getMinNumberOfTerms());
      assertEquals((-2770), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(7, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(7, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(", minElectiveCreditsNeeded=", curriculum0.getCourseCode());
      assertEquals((-2756.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(7, curriculum0.getMaxNumberOfTerms());
      assertEquals((-2770), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(24, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(7, curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains(7));
      assertNotNull(curriculum0);
      
      ArrayList<Integer> arrayList1 = curriculum0.getIdealComplementaryCreditsList();
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(24, curriculum0.getMinNumberOfTerms());
      assertEquals((-2770), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(7, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(7, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(", minElectiveCreditsNeeded=", curriculum0.getCourseCode());
      assertEquals((-2756.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(7, curriculum0.getMaxNumberOfTerms());
      assertEquals((-2770), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(24, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(7, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertFalse(arrayList0.contains(7));
      assertFalse(arrayList1.contains(7));
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer((-1448));
      assertEquals((-1448), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(integer0));
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("Buq%GKX:r\") U:f", "Buq%GKX:r\") U:f", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-490), (-490), (-490), (-490), (-490), (-490), (-490), (-490), (-1475), (-1448), arrayList1, arrayList1, arrayList1, set0, arrayList1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertEquals((-490), curriculum0.getMaxNumberOfTerms());
      assertEquals((-490), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-490), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-490), curriculum0.getMinActivitiesNeeded());
      assertEquals("Buq%GKX:r\") U:f", curriculum0.getCurriculumCode());
      assertEquals((-490), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1475), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-490), curriculum0.getMinNumberOfTerms());
      assertEquals((-1448), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("Buq%GKX:r\") U:f", curriculum0.getCourseCode());
      assertEquals((-490), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-490), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1960.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertTrue(arrayList0.contains((-1448)));
      assertFalse(arrayList0.contains((-490)));
      assertFalse(arrayList1.contains("Buq%GKX:r\") U:f"));
      assertFalse(set0.contains("Buq%GKX:r\") U:f"));
      assertNotNull(curriculum0);
      
      Integer integer1 = curriculum0.getIdealComplementaryCredits(1);
      assertEquals((-1448), (int)integer1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertEquals((-490), curriculum0.getMaxNumberOfTerms());
      assertEquals((-490), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-490), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-490), curriculum0.getMinActivitiesNeeded());
      assertEquals("Buq%GKX:r\") U:f", curriculum0.getCurriculumCode());
      assertEquals((-490), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1475), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-490), curriculum0.getMinNumberOfTerms());
      assertEquals((-1448), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("Buq%GKX:r\") U:f", curriculum0.getCourseCode());
      assertEquals((-490), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-490), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1960.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertTrue(arrayList0.contains((-1448)));
      assertFalse(arrayList0.contains((-490)));
      assertFalse(arrayList1.contains("Buq%GKX:r\") U:f"));
      assertFalse(set0.contains("Buq%GKX:r\") U:f"));
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = Integer.getInteger("INSTANCE", (-1101));
      assertEquals((-1101), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((-1101)));
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("INSTANCE"));
      assertNotNull(stack0);
      
      Curriculum curriculum0 = new Curriculum("INSTANCE", "INSTANCE", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1101), (-1101), (-1101), (-1101), (-1101), (-1101), (-1101), 1073741824, (-1101), 1073741824, stack0, stack0, stack0, stack0, stack0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals((-1101), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1101), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("INSTANCE", curriculum0.getCurriculumCode());
      assertEquals(1073741824, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-4404.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1101), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1101), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1101), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1073741824, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1101), curriculum0.getMaxNumberOfTerms());
      assertEquals("INSTANCE", curriculum0.getCourseCode());
      assertEquals((-1101), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1101), curriculum0.getMinNumberOfTerms());
      assertTrue(arrayList0.contains((-1101)));
      assertFalse(arrayList0.contains(1073741824));
      assertFalse(stack0.contains("INSTANCE"));
      assertNotNull(curriculum0);
      
      Integer integer1 = curriculum0.getIdealComplementaryCredits(1);
      assertEquals((-1101), (int)integer1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals((-1101), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1101), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("INSTANCE", curriculum0.getCurriculumCode());
      assertEquals(1073741824, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-4404.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1101), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1101), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1101), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1073741824, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1101), curriculum0.getMaxNumberOfTerms());
      assertEquals("INSTANCE", curriculum0.getCourseCode());
      assertEquals((-1101), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1101), curriculum0.getMinNumberOfTerms());
      assertTrue(arrayList0.contains((-1101)));
      assertFalse(arrayList0.contains(1073741824));
      assertFalse(stack0.contains("INSTANCE"));
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Curriculum curriculum0 = new Curriculum(" numHashFunctions: ", "+kg46DeR<6SzbLV#L", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, Integer.MAX_VALUE, 0, 0, 0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE, 0, 0, (Collection<String>) null, (Collection<String>) null, arrayDeque0, (Collection<String>) null, arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinNumberOfTerms());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(" numHashFunctions: ", curriculum0.getCourseCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("+kg46DeR<6SzbLV#L", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2.147483647E9, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertFalse(arrayDeque0.contains(" numHashFunctions: "));
      assertNotNull(curriculum0);
      
      ArrayList<Integer> arrayList0 = curriculum0.getExpectedMinAccumulatedCreditsList();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinNumberOfTerms());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(" numHashFunctions: ", curriculum0.getCourseCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("+kg46DeR<6SzbLV#L", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2.147483647E9, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertFalse(arrayDeque0.contains(" numHashFunctions: "));
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Integer integer0 = Integer.getInteger("5R_NnQ(ccx&1*", (-215));
      assertEquals((-215), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(integer0));
      
      Curriculum curriculum0 = new Curriculum("PTL_F5PjNYe|4aB", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 3425, 1, 0, 0, 3425, (-2621), 0, 0, 0, (-1864), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("PTL_F5PjNYe|4aB", curriculum0.getCourseCode());
      assertEquals(3425, curriculum0.getMinActivitiesNeeded());
      assertEquals((-2621), curriculum0.getMinNumberOfTerms());
      assertEquals(3425, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1864), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(3426.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayList0.contains(0));
      assertNotNull(curriculum0);
      
      ArrayList<Integer> arrayList1 = curriculum0.getExpectedMinAccumulatedCreditsList();
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("PTL_F5PjNYe|4aB", curriculum0.getCourseCode());
      assertEquals(3425, curriculum0.getMinActivitiesNeeded());
      assertEquals((-2621), curriculum0.getMinNumberOfTerms());
      assertEquals(3425, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1864), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(3426.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayList0.contains(0));
      assertTrue(arrayList1.contains(integer0));
      assertFalse(arrayList1.contains(0));
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Integer) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Curriculum curriculum0 = new Curriculum(", minElectiveCreditsNeeded=", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 7, 7, (-2770), 0, 0, 24, 7, 24, 7, (-2770), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(7, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(24, curriculum0.getMinNumberOfTerms());
      assertEquals(7, curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-2770), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(24, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(7, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(", minElectiveCreditsNeeded=", curriculum0.getCourseCode());
      assertEquals((-2770), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-2756.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(7, curriculum0.getMinOptionalCreditsNeeded());
      assertFalse(arrayList0.contains(7));
      assertNotNull(curriculum0);
      
      Integer integer0 = curriculum0.getExpectedMinAccumulatedCredits(0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(7, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(24, curriculum0.getMinNumberOfTerms());
      assertEquals(7, curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-2770), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(24, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(7, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(", minElectiveCreditsNeeded=", curriculum0.getCourseCode());
      assertEquals((-2770), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-2756.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(7, curriculum0.getMinOptionalCreditsNeeded());
      assertFalse(arrayList0.contains(7));
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(integer0));
      
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum(", maxNumberOfEnrolledCredits=", ", maxNumberOfEnrolledCredits=", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 54, 2121, 125, 125, 54, 2121, 125, (-549), 0, (-549), set0, set0, set0, set0, set0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals((-549), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(125, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2425.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-549), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(2121, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(54, curriculum0.getMinActivitiesNeeded());
      assertEquals(2121, curriculum0.getMinNumberOfTerms());
      assertEquals(54, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(125, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(", maxNumberOfEnrolledCredits=", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertEquals(", maxNumberOfEnrolledCredits=", curriculum0.getCurriculumCode());
      assertTrue(arrayList0.contains(0));
      assertFalse(arrayList0.contains(125));
      assertFalse(set0.contains(", maxNumberOfEnrolledCredits="));
      assertNotNull(curriculum0);
      
      Integer integer1 = curriculum0.getExpectedMinAccumulatedCredits(0);
      assertEquals(0, (int)integer1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals((-549), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(125, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2425.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-549), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(2121, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(54, curriculum0.getMinActivitiesNeeded());
      assertEquals(2121, curriculum0.getMinNumberOfTerms());
      assertEquals(54, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(125, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(", maxNumberOfEnrolledCredits=", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertEquals(", maxNumberOfEnrolledCredits=", curriculum0.getCurriculumCode());
      assertTrue(arrayList0.contains(0));
      assertFalse(arrayList0.contains(125));
      assertFalse(set0.contains(", maxNumberOfEnrolledCredits="));
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer((-180));
      assertEquals((-180), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(integer0));
      
      Curriculum curriculum0 = new Curriculum("", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 125, (-1493), (-1493), 3208, (-97), 125, 125, (-97), 0, (-1493), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(125, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-97), curriculum0.getMinActivitiesNeeded());
      assertEquals(3208, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1493), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1493), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(347.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1493), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMinNumberOfTerms());
      assertEquals((-97), curriculum0.getMinNumberOfEnrolledCredits());
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayList0.contains(125));
      assertNotNull(curriculum0);
      
      Integer integer1 = curriculum0.getExpectedMinAccumulatedCredits(0);
      assertEquals((-180), (int)integer1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(125, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-97), curriculum0.getMinActivitiesNeeded());
      assertEquals(3208, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1493), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1493), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(347.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1493), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMinNumberOfTerms());
      assertEquals((-97), curriculum0.getMinNumberOfEnrolledCredits());
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayList0.contains(125));
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum("", ", idealElectiveCreditsList=", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1435), 2268, 2268, 2268, (-444), 0, (-3357), (-444), 0, 0, arrayList1, arrayList1, arrayList1, arrayList1, arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(2268, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-3357), curriculum0.getMaxNumberOfTerms());
      assertEquals(5369.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2268, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-444), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(2268, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1435), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(", idealElectiveCreditsList=", curriculum0.getCurriculumCode());
      assertEquals((-444), curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains((-444)));
      assertFalse(arrayList1.contains(""));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getExceptionalAdditionalEnrolledCredits();
      assertEquals(0, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(2268, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-3357), curriculum0.getMaxNumberOfTerms());
      assertEquals(5369.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2268, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-444), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(2268, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1435), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(", idealElectiveCreditsList=", curriculum0.getCurriculumCode());
      assertEquals((-444), curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains((-444)));
      assertFalse(arrayList1.contains(""));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Curriculum curriculum0 = new Curriculum("", "", arrayList0, arrayList0, (ArrayList<Integer>) null, (ArrayList<Integer>) null, arrayList0, 0, 2287, (-1), 2287, 2601, (-933), 2287, (-1), 1690, 1639, set0, set0, set0, priorityQueue0, priorityQueue0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertEquals(2287, curriculum0.getMaxNumberOfTerms());
      assertEquals(2601, curriculum0.getMinActivitiesNeeded());
      assertEquals(1690, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(4573.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-933), curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(2287, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1639, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(2287, curriculum0.getMinComplementaryCreditsNeeded());
      assertFalse(arrayList0.contains(0));
      assertFalse(set0.contains(""));
      assertFalse(priorityQueue0.contains(""));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getExceptionalAdditionalEnrolledCredits();
      assertEquals(1639, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertEquals(2287, curriculum0.getMaxNumberOfTerms());
      assertEquals(2601, curriculum0.getMinActivitiesNeeded());
      assertEquals(1690, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(4573.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-933), curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(2287, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1639, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(2287, curriculum0.getMinComplementaryCreditsNeeded());
      assertFalse(arrayList0.contains(0));
      assertFalse(set0.contains(""));
      assertFalse(priorityQueue0.contains(""));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>(726);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum("H#o2}-TS", "H#o2}-TS", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 0, 0, 0, 0, 726, 726, 726, 0, 0, (Collection<String>) null, arrayList1, arrayList1, (Collection<String>) null, arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals("H#o2}-TS", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(726, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(726, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("H#o2}-TS", curriculum0.getCourseCode());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(726, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertFalse(arrayList0.contains(726));
      assertFalse(arrayList1.contains("H#o2}-TS"));
      assertNotNull(curriculum0);
      
      Collection<String> collection0 = curriculum0.getElectiveSubjectsList();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals("H#o2}-TS", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(726, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(726, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("H#o2}-TS", curriculum0.getCourseCode());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(726, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertFalse(arrayList0.contains(726));
      assertFalse(arrayList1.contains("H#o2}-TS"));
      assertFalse(collection0.contains("H#o2}-TS"));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Curriculum curriculum0 = new Curriculum((String) null, (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 1887, 1887, 1887, 8192, 16, 1887, (-1193), 16, 0, (-2359), treeSet0, treeSet0, treeSet0, treeSet0, treeSet0);
      assertEquals(1887, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(16, curriculum0.getMinNumberOfEnrolledCredits());
      assertNull(curriculum0.getCourseCode());
      assertEquals(1887, curriculum0.getMinMandatoryCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(13853.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1887, curriculum0.getMinNumberOfTerms());
      assertEquals(1887, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-2359), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(8192, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1193), curriculum0.getMaxNumberOfTerms());
      assertEquals(16, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertNotNull(curriculum0);
      
      String string0 = curriculum0.getCurriculumCode();
      assertEquals(1887, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(16, curriculum0.getMinNumberOfEnrolledCredits());
      assertNull(curriculum0.getCourseCode());
      assertEquals(1887, curriculum0.getMinMandatoryCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(13853.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1887, curriculum0.getMinNumberOfTerms());
      assertEquals(1887, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-2359), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(8192, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1193), curriculum0.getMaxNumberOfTerms());
      assertEquals(16, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Curriculum curriculum0 = new Curriculum("", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 125, (-1493), (-1493), 3208, (-97), 125, 125, (-97), 0, (-1493), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-1493), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(125, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(3208, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1493), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMinNumberOfTerms());
      assertEquals((-97), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1493), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-97), curriculum0.getMinActivitiesNeeded());
      assertEquals(347.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertFalse(arrayList0.contains((-1493)));
      assertNotNull(curriculum0);
      
      String string0 = curriculum0.getCurriculumCode();
      assertEquals("", string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-1493), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(125, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(3208, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1493), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMinNumberOfTerms());
      assertEquals((-97), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1493), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-97), curriculum0.getMinActivitiesNeeded());
      assertEquals(347.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertFalse(arrayList0.contains((-1493)));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(3033);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(3033));
      assertNotNull(arrayList0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((SortedSet<? extends String>) treeSet0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Curriculum curriculum0 = new Curriculum((String) null, (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 3033, 1201, 1201, 0, 3033, 0, 2206, 0, 0, 0, priorityQueue0, priorityQueue0, treeSet0, treeSet0, treeSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertNull(curriculum0.getCourseCode());
      assertEquals(5435.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2206, curriculum0.getMaxNumberOfTerms());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(3033, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1201, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(3033, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1201, curriculum0.getMinElectiveCreditsNeeded());
      assertFalse(arrayList0.contains(0));
      assertNotNull(curriculum0);
      
      String string0 = curriculum0.getCourseCode();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertNull(curriculum0.getCourseCode());
      assertEquals(5435.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2206, curriculum0.getMaxNumberOfTerms());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(3033, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1201, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(3033, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1201, curriculum0.getMinElectiveCreditsNeeded());
      assertFalse(arrayList0.contains(0));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum("", ", idealElectiveCreditsList=", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1435), 2268, 2268, 2268, (-444), 0, (-3357), (-444), 0, 0, arrayList1, arrayList1, arrayList1, arrayList1, arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals((-444), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(2268, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2268, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-3357), curriculum0.getMaxNumberOfTerms());
      assertEquals(2268, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-444), curriculum0.getMinActivitiesNeeded());
      assertEquals(", idealElectiveCreditsList=", curriculum0.getCurriculumCode());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(5369.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1435), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertFalse(arrayList0.contains((-3357)));
      assertFalse(arrayList1.contains(", idealElectiveCreditsList="));
      assertNotNull(curriculum0);
      
      String string0 = curriculum0.getCourseCode();
      assertEquals("", string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals((-444), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(2268, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2268, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-3357), curriculum0.getMaxNumberOfTerms());
      assertEquals(2268, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-444), curriculum0.getMinActivitiesNeeded());
      assertEquals(", idealElectiveCreditsList=", curriculum0.getCurriculumCode());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(5369.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1435), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertFalse(arrayList0.contains((-3357)));
      assertFalse(arrayList1.contains(string0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", ", idealMandatoryCreditsList=", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 876, 876, 876, 20, (-1618), (-3179), (-856), (-856), 0, 39, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals((-856), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(", idealMandatoryCreditsList=", curriculum0.getCurriculumCode());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-856), curriculum0.getMaxNumberOfTerms());
      assertEquals(20, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1618), curriculum0.getMinActivitiesNeeded());
      assertEquals(876, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-3179), curriculum0.getMinNumberOfTerms());
      assertEquals(2648.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(876, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(876, curriculum0.getMinElectiveCreditsNeeded());
      assertNotNull(curriculum0);
      
      Collection<String> collection0 = curriculum0.getComplementarySubjectsList();
      assertEquals((-856), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(", idealMandatoryCreditsList=", curriculum0.getCurriculumCode());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-856), curriculum0.getMaxNumberOfTerms());
      assertEquals(20, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1618), curriculum0.getMinActivitiesNeeded());
      assertEquals(876, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-3179), curriculum0.getMinNumberOfTerms());
      assertEquals(2648.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(876, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(876, curriculum0.getMinElectiveCreditsNeeded());
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Curriculum curriculum0 = new Curriculum("<+og'N4M", "com.google.common.base.Predicates$InPredicate", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 133, 8202, 448, 8202, 133, (-25), 3867, 133, 1, (-2099), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(133, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(16985.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(448, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("com.google.common.base.Predicates$InPredicate", curriculum0.getCurriculumCode());
      assertEquals((-2099), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("<+og'N4M", curriculum0.getCourseCode());
      assertEquals(133, curriculum0.getMinActivitiesNeeded());
      assertEquals((-25), curriculum0.getMinNumberOfTerms());
      assertEquals(3867, curriculum0.getMaxNumberOfTerms());
      assertEquals(8202, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(8202, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(133, curriculum0.getMinMandatoryCreditsNeeded());
      assertFalse(arrayList0.contains(1));
      assertNotNull(curriculum0);
      
      Collection<String> collection0 = curriculum0.getComplementaryActivitiesList();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(133, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(16985.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(448, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("com.google.common.base.Predicates$InPredicate", curriculum0.getCurriculumCode());
      assertEquals((-2099), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("<+og'N4M", curriculum0.getCourseCode());
      assertEquals(133, curriculum0.getMinActivitiesNeeded());
      assertEquals((-25), curriculum0.getMinNumberOfTerms());
      assertEquals(3867, curriculum0.getMaxNumberOfTerms());
      assertEquals(8202, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(8202, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(133, curriculum0.getMinMandatoryCreditsNeeded());
      assertFalse(arrayList0.contains(1));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("", "V4mWXH~QB:WpE@H", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 1, 0, 1, (-2991), (-113), (-2991), set0, set0, set0, set0, set0);
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-2991), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-113), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(1, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-2991), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1, curriculum0.getMaxNumberOfTerms());
      assertEquals("V4mWXH~QB:WpE@H", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertFalse(set0.contains(""));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getTargetOptionalCredits(8202);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Integer) null);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Curriculum curriculum0 = new Curriculum(", minElectiveCreditsNeeded=", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 7, 7, (-2770), 0, 0, 24, 7, 24, 7, (-2770), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(24, curriculum0.getMinNumberOfTerms());
      assertEquals(7, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(24, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(7, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(7, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-2770), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(7, curriculum0.getMaxNumberOfTerms());
      assertEquals((-2756.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2770), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(", minElectiveCreditsNeeded=", curriculum0.getCourseCode());
      assertFalse(arrayList0.contains(7));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getTargetElectiveCredits(24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum(", expectedMinAccumulatedCreditsList=", ", expectedMinAccumulatedCreditsList=", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 8199, 8199, 575, 0, 503, 0, (-1759), (-1055), 8199, 3654, set0, set0, set0, set0, set0);
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(8199, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(8199, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(503, curriculum0.getMinActivitiesNeeded());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculum0.getCurriculumCode());
      assertEquals(16973.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(8199, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1055), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(3654, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculum0.getCourseCode());
      assertEquals(575, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-1759), curriculum0.getMaxNumberOfTerms());
      assertFalse(set0.contains(", expectedMinAccumulatedCreditsList="));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getTargetComplementaryCredits(3654);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Curriculum curriculum0 = new Curriculum((String) null, (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 1887, 1887, 1887, 8192, 16, 1887, (-1193), 16, 0, (-2359), treeSet0, treeSet0, treeSet0, treeSet0, treeSet0);
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(1887, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1887, curriculum0.getMinNumberOfTerms());
      assertEquals(1887, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(8192, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1887, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(16, curriculum0.getMinActivitiesNeeded());
      assertEquals(13853.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(16, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-2359), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1193), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculum0.getCourseCode());
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getIdealOptionalCredits(8192);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 3559, 3559, 3559, 1, 3559, 1, 0, 0, 0, (-659), set0, set0, set0, set0, set0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(3559, curriculum0.getMinActivitiesNeeded());
      assertEquals(10678.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(3559, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(3559, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(3559, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-659), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertFalse(arrayList0.contains(3559));
      assertFalse(set0.contains(""));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getIdealOptionalCredits((-1209));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 3894, 3894, 1383, 3894, 1383, 1383, 0, 3606, 1383, 1383, set0, set0, set0, set0, set0);
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(3894, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(3606, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1383, curriculum0.getMinActivitiesNeeded());
      assertEquals(1383, curriculum0.getMinNumberOfTerms());
      assertEquals(1383, curriculum0.getMinElectiveCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(13065.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(3894, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(1383, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(3894, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(1383, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertFalse(set0.contains(""));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getIdealMaxCredits(8192);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Curriculum curriculum0 = new Curriculum("3(1^WHd48L!|%z>u", "3(1^WHd48L!|%z>u", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-465), (-465), 0, 0, 0, (-465), 0, (-465), (-465), 0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals((-465), curriculum0.getMinNumberOfTerms());
      assertEquals((-930.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("3(1^WHd48L!|%z>u", curriculum0.getCourseCode());
      assertEquals((-465), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("3(1^WHd48L!|%z>u", curriculum0.getCurriculumCode());
      assertEquals((-465), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-465), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-465), curriculum0.getMinMandatoryCreditsNeeded());
      assertFalse(arrayList0.contains(0));
      assertFalse(linkedHashSet0.contains("3(1^WHd48L!|%z>u"));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getIdealMaxCredits(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum("", ", minActivitiesNeeded=", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-777), (-777), 0, 846, 0, (-821), 1647, 6, (-418), 2886, arrayList1, arrayList1, arrayList1, arrayList1, arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals((-777), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-777), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2886, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(846, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-821), curriculum0.getMinNumberOfTerms());
      assertEquals(1647, curriculum0.getMaxNumberOfTerms());
      assertEquals(6, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-418), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-708.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(", minActivitiesNeeded=", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains((-821)));
      assertFalse(arrayList1.contains(", minActivitiesNeeded="));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getIdealMandatoryCredits(3156);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3155, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Curriculum curriculum0 = new Curriculum("", "\u0000\u05BE\u05D0\u05F3\u0600\u0750\u0E00\u1E00\u2100\uFB50\uFE70\uFF61", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 477, (-1742), (-1742), 477, 477, 0, (-705), 0, (-705), (-705), linkedList0, linkedList0, linkedList0, linkedList0, linkedList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(477, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-705), curriculum0.getMaxNumberOfTerms());
      assertEquals((-2530.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(477, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1742), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1742), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-705), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(477, curriculum0.getMinActivitiesNeeded());
      assertEquals((-705), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("\u0000\u05BE\u05D0\u05F3\u0600\u0750\u0E00\u1E00\u2100\uFB50\uFE70\uFF61", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains(477));
      assertFalse(linkedList0.contains(""));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getIdealMandatoryCredits((-1742));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Vector<String> vector0 = new Vector<String>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Curriculum curriculum0 = new Curriculum("ZXuC", "ZXuC", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 1610, 2266, 2266, 2266, 46, 46, 1610, (-108), 46, 2266, arrayDeque0, arrayDeque0, arrayDeque0, vector0, vector0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(2266, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2266, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1610, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-108), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(8408.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("ZXuC", curriculum0.getCurriculumCode());
      assertEquals(2266, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(46, curriculum0.getMinNumberOfTerms());
      assertEquals("ZXuC", curriculum0.getCourseCode());
      assertEquals(2266, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(46, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1610, curriculum0.getMaxNumberOfTerms());
      assertEquals(46, curriculum0.getMinActivitiesNeeded());
      assertFalse(arrayList0.contains(1610));
      assertFalse(arrayDeque0.contains("ZXuC"));
      assertFalse(vector0.contains("ZXuC"));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getIdealElectiveCredits(3106);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3105, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Curriculum curriculum0 = new Curriculum("a5jrtn098$", "a5jrtn098$", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1917), 92, (-1917), 1, (-1917), (-1917), 1, (-1917), 92, 1, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1917), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-3741.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(92, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("a5jrtn098$", curriculum0.getCurriculumCode());
      assertEquals((-1917), curriculum0.getMinActivitiesNeeded());
      assertEquals(1, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1917), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("a5jrtn098$", curriculum0.getCourseCode());
      assertEquals(92, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1917), curriculum0.getMinNumberOfTerms());
      assertEquals((-1917), curriculum0.getMinElectiveCreditsNeeded());
      assertFalse(arrayList0.contains(1));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getIdealElectiveCredits((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Curriculum curriculum0 = new Curriculum((String) null, "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 10, 10, 0, 10, 10, 10, 10, 0, 0, 307, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(10, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(10, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(30.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(10, curriculum0.getMinNumberOfTerms());
      assertEquals(10, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(307, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertNull(curriculum0.getCourseCode());
      assertEquals(10, curriculum0.getMaxNumberOfTerms());
      assertEquals(10, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains(0));
      assertFalse(arrayDeque0.contains(""));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getIdealComplementaryCredits(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Curriculum curriculum0 = new Curriculum("", "Gn;*(y:lM", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-826), 1629, (-826), 4591, 4591, (-1), (-826), 0, 0, 0, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(4591, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1), curriculum0.getMinNumberOfTerms());
      assertEquals((-826), curriculum0.getMaxNumberOfTerms());
      assertEquals(1629, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-826), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("Gn;*(y:lM", curriculum0.getCurriculumCode());
      assertEquals(4591, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(4568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-826), curriculum0.getMinMandatoryCreditsNeeded());
      assertFalse(arrayList0.contains(0));
      assertFalse(arrayDeque0.contains(""));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getIdealComplementaryCredits(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 629, (-3481), 629, 0, 629, (-3481), 629, (-3481), (-3481), 629, arrayList0, linkedHashSet0, (Collection<String>) null, arrayList0, arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals((-2223.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(629, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-3481), curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(629, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-3481), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(629, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(629, curriculum0.getMinActivitiesNeeded());
      assertEquals((-3481), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-3481), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(629, curriculum0.getMaxNumberOfTerms());
      assertFalse(arrayList0.contains(""));
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getExpectedMinAccumulatedCredits((-3481));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum((String) null, (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 10, 125, (-1647), 10, (-1647), Integer.MIN_VALUE, 10, 10, (-1647), 0, set0, (Collection<String>) null, set0, (Collection<String>) null, (Collection<String>) null);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertEquals(10, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1647), curriculum0.getMinActivitiesNeeded());
      assertEquals(125, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1647), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(Integer.MIN_VALUE, curriculum0.getMinNumberOfTerms());
      assertEquals((-1502.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertNull(curriculum0.getCurriculumCode());
      assertNull(curriculum0.getCourseCode());
      assertEquals(10, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(10, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(10, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1647), curriculum0.getMinElectiveCreditsNeeded());
      assertFalse(arrayList0.contains((-1647)));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getExpectedMinAccumulatedCredits((-869));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Curriculum curriculum0 = new Curriculum("", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, (-1516), 0, 0, 0, 3025, 0, 0, (-862048943), 0, priorityQueue0, priorityQueue0, priorityQueue0, priorityQueue0, arrayDeque0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, priorityQueue0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals((-862048943), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(3025, curriculum0.getMinNumberOfTerms());
      assertEquals((-1516.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1516), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertFalse(arrayList0.contains(0));
      assertFalse(priorityQueue0.contains(""));
      assertFalse(arrayDeque0.contains(""));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinComplementaryCreditsNeeded();
      assertEquals(0, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, priorityQueue0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals((-862048943), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(3025, curriculum0.getMinNumberOfTerms());
      assertEquals((-1516.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1516), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertFalse(arrayList0.contains(0));
      assertFalse(priorityQueue0.contains(""));
      assertFalse(arrayDeque0.contains(""));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum("~>^q%Zw", "~>^q%Zw", (ArrayList<Integer>) null, arrayList0, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 1748, 1023, 1748, 0, 0, 0, 0, 1073741823, 6, 0, arrayList1, arrayList1, arrayList1, arrayList1, arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(1748, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(6, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("~>^q%Zw", curriculum0.getCourseCode());
      assertEquals(1748, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(4519.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals("~>^q%Zw", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1073741823, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1023, curriculum0.getMinOptionalCreditsNeeded());
      assertFalse(arrayList0.contains(1748));
      assertFalse(arrayList1.contains("~>^q%Zw"));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getIdealMandatoryCredits(180);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum("org.apache.commons.io.filefilter.FalseFileFilter", "d8YE R~G", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 0, 0, 0, (-1993), 0, 0, 0, 0, 40, arrayList1, arrayList1, arrayList1, arrayList1, arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("d8YE R~G", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-1993), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("org.apache.commons.io.filefilter.FalseFileFilter", curriculum0.getCourseCode());
      assertEquals(40, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains((-1993)));
      assertFalse(arrayList1.contains("org.apache.commons.io.filefilter.FalseFileFilter"));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinOptionalCreditsNeeded();
      assertEquals(0, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("d8YE R~G", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-1993), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("org.apache.commons.io.filefilter.FalseFileFilter", curriculum0.getCourseCode());
      assertEquals(40, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains((-1993)));
      assertFalse(arrayList1.contains("org.apache.commons.io.filefilter.FalseFileFilter"));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Curriculum curriculum0 = new Curriculum("K,#kOKDf~<1.)!DQ", "K,#kOKDf~<1.)!DQ", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-824), 0, 0, 0, 0, 0, 2605, (-1701), 754, (-1701), stack0, stack0, stack0, stack0, stack0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals("K,#kOKDf~<1.)!DQ", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("K,#kOKDf~<1.)!DQ", curriculum0.getCourseCode());
      assertEquals((-1701), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(2605, curriculum0.getMaxNumberOfTerms());
      assertEquals((-824), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1701), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-824.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(754, curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains(2605));
      assertFalse(stack0.contains("K,#kOKDf~<1.)!DQ"));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinMandatoryCreditsNeeded();
      assertEquals((-824), int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals("K,#kOKDf~<1.)!DQ", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("K,#kOKDf~<1.)!DQ", curriculum0.getCourseCode());
      assertEquals((-1701), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(2605, curriculum0.getMaxNumberOfTerms());
      assertEquals((-824), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1701), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-824.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(754, curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains(2605));
      assertFalse(stack0.contains("K,#kOKDf~<1.)!DQ"));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum("", ", idealElectiveCreditsList=", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1435), 2268, 2268, 2268, (-444), 0, (-3357), (-444), 0, 0, arrayList1, arrayList1, arrayList1, arrayList1, arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals((-444), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(5369.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1435), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(", idealElectiveCreditsList=", curriculum0.getCurriculumCode());
      assertEquals(2268, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-3357), curriculum0.getMaxNumberOfTerms());
      assertEquals(2268, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(2268, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-444), curriculum0.getMinActivitiesNeeded());
      assertFalse(arrayList0.contains(0));
      assertFalse(arrayList1.contains(""));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getMinElectiveCreditsNeeded();
      assertEquals(2268, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals((-444), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(5369.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1435), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(", idealElectiveCreditsList=", curriculum0.getCurriculumCode());
      assertEquals(2268, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-3357), curriculum0.getMaxNumberOfTerms());
      assertEquals(2268, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(2268, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-444), curriculum0.getMinActivitiesNeeded());
      assertFalse(arrayList0.contains(int0));
      assertFalse(arrayList1.contains(""));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("WwO]LF~>;!F#C}@]37", "WwO]LF~>;!F#C}@]37", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 135, 135, 0, (-2039), 707, (-1), 0, 0, (-1), 0, set0, set0, set0, set0, set0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("WwO]LF~>;!F#C}@]37", curriculum0.getCurriculumCode());
      assertEquals(707, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(135, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(135, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2039), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("WwO]LF~>;!F#C}@]37", curriculum0.getCourseCode());
      assertEquals((-1), curriculum0.getMinNumberOfTerms());
      assertEquals((-1769.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertFalse(arrayList0.contains((-1)));
      assertFalse(set0.contains("WwO]LF~>;!F#C}@]37"));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getIdealOptionalCredits(135);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 134, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Curriculum curriculum0 = new Curriculum("", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 1636, 1636, 0, 1636, (-1567), 0, (-1567), 0, 1636, 0, linkedList0, treeSet0, treeSet0, linkedList0, linkedList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, linkedList0.size());
      assertEquals((-1567), curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(4908.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1636, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1636, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1636, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(1636, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1567), curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains(0));
      assertFalse(linkedList0.contains(""));
      assertFalse(treeSet0.contains(""));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getTargetElectiveCredits(0);
      assertEquals(0, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, linkedList0.size());
      assertEquals((-1567), curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(4908.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1636, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1636, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1636, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(1636, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1567), curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains(0));
      assertFalse(linkedList0.contains(""));
      assertFalse(treeSet0.contains(""));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>(726);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum("HM[Q#o2}-TS", "HM[Q#o2}-TS", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-15), (-15), (-15), (-15), (-15), 726, 726, 726, (-15), (-15), (Collection<String>) null, arrayList1, arrayList1, (Collection<String>) null, arrayList1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals((-15), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("HM[Q#o2}-TS", curriculum0.getCourseCode());
      assertEquals((-60.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-15), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("HM[Q#o2}-TS", curriculum0.getCurriculumCode());
      assertEquals((-15), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(726, curriculum0.getMaxNumberOfTerms());
      assertEquals((-15), curriculum0.getMinActivitiesNeeded());
      assertEquals(726, curriculum0.getMinNumberOfTerms());
      assertEquals((-15), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-15), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-15), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(726, curriculum0.getMinNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains((-15)));
      assertFalse(arrayList1.contains("HM[Q#o2}-TS"));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getTargetOptionalCredits((-15));
      assertEquals(0, int0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals((-15), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("HM[Q#o2}-TS", curriculum0.getCourseCode());
      assertEquals((-60.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-15), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("HM[Q#o2}-TS", curriculum0.getCurriculumCode());
      assertEquals((-15), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(726, curriculum0.getMaxNumberOfTerms());
      assertEquals((-15), curriculum0.getMinActivitiesNeeded());
      assertEquals(726, curriculum0.getMinNumberOfTerms());
      assertEquals((-15), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-15), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-15), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(726, curriculum0.getMinNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains(726));
      assertFalse(arrayList1.contains("HM[Q#o2}-TS"));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Vector<String> vector0 = new Vector<String>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Curriculum curriculum0 = new Curriculum("y7G2F&VHRr^A%", "y7G2F&VHRr^A%", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, set0, set0, set0, set0, vector0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1194, curriculum0.getMinActivitiesNeeded());
      assertEquals("y7G2F&VHRr^A%", curriculum0.getCurriculumCode());
      assertEquals(1194, curriculum0.getMaxNumberOfTerms());
      assertEquals(1194, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1194, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(4776.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1194, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1194, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1194, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1194, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("y7G2F&VHRr^A%", curriculum0.getCourseCode());
      assertEquals(1194, curriculum0.getMinNumberOfTerms());
      assertEquals(1194, curriculum0.getMinElectiveCreditsNeeded());
      assertFalse(arrayList0.contains(1194));
      assertFalse(set0.contains("y7G2F&VHRr^A%"));
      assertFalse(vector0.contains("y7G2F&VHRr^A%"));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getTargetComplementaryCredits((-1916));
      assertEquals(0, int0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1194, curriculum0.getMinActivitiesNeeded());
      assertEquals("y7G2F&VHRr^A%", curriculum0.getCurriculumCode());
      assertEquals(1194, curriculum0.getMaxNumberOfTerms());
      assertEquals(1194, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1194, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(4776.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1194, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1194, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1194, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1194, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("y7G2F&VHRr^A%", curriculum0.getCourseCode());
      assertEquals(1194, curriculum0.getMinNumberOfTerms());
      assertEquals(1194, curriculum0.getMinElectiveCreditsNeeded());
      assertFalse(arrayList0.contains(1194));
      assertFalse(set0.contains("y7G2F&VHRr^A%"));
      assertFalse(vector0.contains("y7G2F&VHRr^A%"));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(""));
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum(", mandatorySubjectsList=", ", mandatorySubjectsList=", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 1682554634, 1682554634, 0, 125, 0, 44, 0, 125, 8202, 0, set0, set0, set0, set0, (Collection<String>) null);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(", mandatorySubjectsList=", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(8202, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1682554634, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1682554634, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(", mandatorySubjectsList=", curriculum0.getCourseCode());
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(44, curriculum0.getMinNumberOfTerms());
      assertEquals((-9.29857903E8), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertFalse(set0.contains(""));
      assertNotNull(curriculum0);
      
      // Undeclared exception!
      try { 
        curriculum0.getTargetMandatoryCredits(114);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum("6l~yMwY@hf", "6l~yMwY@hf", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), arrayList1, arrayList1, arrayList1, arrayList1, arrayList1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals((-1435), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1435), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1435), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("6l~yMwY@hf", curriculum0.getCourseCode());
      assertEquals((-1435), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1435), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("6l~yMwY@hf", curriculum0.getCurriculumCode());
      assertEquals((-1435), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1435), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1435), curriculum0.getMinNumberOfTerms());
      assertEquals((-5740.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1435), curriculum0.getMaxNumberOfTerms());
      assertEquals((-1435), curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains((-1435)));
      assertFalse(arrayList1.contains("6l~yMwY@hf"));
      assertNotNull(curriculum0);
      
      int int0 = curriculum0.getTargetMandatoryCredits((-1435));
      assertEquals(0, int0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals((-1435), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1435), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1435), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("6l~yMwY@hf", curriculum0.getCourseCode());
      assertEquals((-1435), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1435), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("6l~yMwY@hf", curriculum0.getCurriculumCode());
      assertEquals((-1435), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1435), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1435), curriculum0.getMinNumberOfTerms());
      assertEquals((-5740.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1435), curriculum0.getMaxNumberOfTerms());
      assertEquals((-1435), curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains((-1435)));
      assertFalse(arrayList1.contains("6l~yMwY@hf"));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Curriculum curriculum0 = new Curriculum("k^dw\"-n#", "k^dw\"-n#", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 44, 44, (-2990), 0, (-2990), 20, 20, 37, (-2990), hashSet0, hashSet0, hashSet0, hashSet0, hashSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals((-2990), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("k^dw\"-n#", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-2990), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-2902.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-2990), curriculum0.getMinNumberOfTerms());
      assertEquals(44, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(20, curriculum0.getMaxNumberOfTerms());
      assertEquals(44, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(37, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("k^dw\"-n#", curriculum0.getCourseCode());
      assertFalse(arrayList0.contains(0));
      assertFalse(hashSet0.contains("k^dw\"-n#"));
      assertNotNull(curriculum0);
      
      curriculum0.setIdealComplementaryCreditsList(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals((-2990), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("k^dw\"-n#", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-2990), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-2902.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-2990), curriculum0.getMinNumberOfTerms());
      assertEquals(44, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(20, curriculum0.getMaxNumberOfTerms());
      assertEquals(44, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(37, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("k^dw\"-n#", curriculum0.getCourseCode());
      assertFalse(arrayList0.contains(0));
      assertFalse(hashSet0.contains("k^dw\"-n#"));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("@) vZt-?*<k", "@) vZt-?*<k", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, set0, set0, set0, set0, set0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(47, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(188.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(47, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(47, curriculum0.getMinActivitiesNeeded());
      assertEquals(47, curriculum0.getMinNumberOfTerms());
      assertEquals(47, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(47, curriculum0.getMaxNumberOfTerms());
      assertEquals(47, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(47, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(47, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("@) vZt-?*<k", curriculum0.getCourseCode());
      assertEquals(47, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("@) vZt-?*<k", curriculum0.getCurriculumCode());
      assertFalse(set0.contains("@) vZt-?*<k"));
      assertNotNull(curriculum0);
      
      curriculum0.setOptionalSubjectsList(set0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(47, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(188.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(47, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(47, curriculum0.getMinActivitiesNeeded());
      assertEquals(47, curriculum0.getMinNumberOfTerms());
      assertEquals(47, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(47, curriculum0.getMaxNumberOfTerms());
      assertEquals(47, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(47, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(47, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("@) vZt-?*<k", curriculum0.getCourseCode());
      assertEquals(47, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("@) vZt-?*<k", curriculum0.getCurriculumCode());
      assertFalse(set0.contains("@) vZt-?*<k"));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum(", minNumberOfTerms=", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, (-836), 3382, (-836), (-836), 3382, (-836), (-2147), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals((-2147), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-836), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(3382, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(", minNumberOfTerms=", curriculum0.getCourseCode());
      assertEquals((-836), curriculum0.getMaxNumberOfTerms());
      assertEquals(3382, curriculum0.getMinActivitiesNeeded());
      assertEquals((-836), curriculum0.getMinNumberOfTerms());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-836), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-836.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertNotNull(curriculum0);
      
      curriculum0.setMinMandatoryCreditsNeeded((-836));
      assertEquals((-2147), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-836), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(3382, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1672.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(", minNumberOfTerms=", curriculum0.getCourseCode());
      assertEquals((-836), curriculum0.getMaxNumberOfTerms());
      assertEquals(3382, curriculum0.getMinActivitiesNeeded());
      assertEquals((-836), curriculum0.getMinNumberOfTerms());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals((-836), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-836), curriculum0.getMinComplementaryCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Curriculum curriculum0 = new Curriculum("k^dw\"-n#", "k^dw\"-n#", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 44, 44, (-2990), 0, (-2990), 20, 20, 37, (-2990), hashSet0, hashSet0, hashSet0, hashSet0, hashSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2990), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-2902.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2990), curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-2990), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("k^dw\"-n#", curriculum0.getCurriculumCode());
      assertEquals("k^dw\"-n#", curriculum0.getCourseCode());
      assertEquals(37, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(44, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(44, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(20, curriculum0.getMaxNumberOfTerms());
      assertFalse(arrayList0.contains(37));
      assertFalse(hashSet0.contains("k^dw\"-n#"));
      assertNotNull(curriculum0);
      
      curriculum0.setExceptionalAdditionalEnrolledCredits(5);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2990), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-2902.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2990), curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("k^dw\"-n#", curriculum0.getCurriculumCode());
      assertEquals("k^dw\"-n#", curriculum0.getCourseCode());
      assertEquals(37, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(5, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(44, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(44, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(20, curriculum0.getMaxNumberOfTerms());
      assertFalse(arrayList0.contains(37));
      assertFalse(hashSet0.contains("k^dw\"-n#"));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Curriculum curriculum0 = new Curriculum(", minNumberOfTerms=", ", minNumberOfTerms=", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, hashSet0, hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertEquals(125, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(125, curriculum0.getMinNumberOfTerms());
      assertEquals(125, curriculum0.getMinActivitiesNeeded());
      assertEquals(", minNumberOfTerms=", curriculum0.getCourseCode());
      assertEquals(500.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(125, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(125, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(", minNumberOfTerms=", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(125, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(125, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertFalse(hashSet0.contains(", minNumberOfTerms="));
      assertNotNull(curriculum0);
      
      curriculum0.setMinOptionalCreditsNeeded(125);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertEquals(125, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(125, curriculum0.getMinNumberOfTerms());
      assertEquals(125, curriculum0.getMinActivitiesNeeded());
      assertEquals(", minNumberOfTerms=", curriculum0.getCourseCode());
      assertEquals(500.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(125, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(125, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(", minNumberOfTerms=", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(125, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(125, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertFalse(hashSet0.contains(", minNumberOfTerms="));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum("6l~yMwY@hf", "6l~yMwY@hf", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), arrayList1, arrayList1, arrayList1, arrayList1, arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals("6l~yMwY@hf", curriculum0.getCurriculumCode());
      assertEquals((-1435), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1435), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1435), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("6l~yMwY@hf", curriculum0.getCourseCode());
      assertEquals((-1435), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1435), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1435), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1435), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1435), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1435), curriculum0.getMinNumberOfTerms());
      assertEquals((-1435), curriculum0.getMaxNumberOfTerms());
      assertEquals((-5740.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertFalse(arrayList0.contains((-1435)));
      assertFalse(arrayList1.contains("6l~yMwY@hf"));
      assertNotNull(curriculum0);
      
      ArrayList<Integer> arrayList2 = curriculum0.getExpectedMinAccumulatedCreditsList();
      assertSame(arrayList0, arrayList2);
      assertSame(arrayList2, arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals("6l~yMwY@hf", curriculum0.getCurriculumCode());
      assertEquals((-1435), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1435), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1435), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("6l~yMwY@hf", curriculum0.getCourseCode());
      assertEquals((-1435), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1435), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1435), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1435), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1435), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1435), curriculum0.getMinNumberOfTerms());
      assertEquals((-1435), curriculum0.getMaxNumberOfTerms());
      assertEquals((-5740.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertFalse(arrayList0.contains((-1435)));
      assertFalse(arrayList1.contains("6l~yMwY@hf"));
      assertFalse(arrayList2.contains((-1435)));
      assertNotNull(arrayList2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Curriculum curriculum0 = new Curriculum("k^dw\"-n#", "k^dw\"-n#", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 44, 44, (-2990), 0, (-2990), 20, 20, 37, (-2990), hashSet0, hashSet0, hashSet0, hashSet0, hashSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-2902.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2990), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("k^dw\"-n#", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2990), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(44, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-2990), curriculum0.getMinNumberOfTerms());
      assertEquals(44, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(20, curriculum0.getMaxNumberOfTerms());
      assertEquals(37, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("k^dw\"-n#", curriculum0.getCourseCode());
      assertFalse(arrayList0.contains(44));
      assertFalse(hashSet0.contains("k^dw\"-n#"));
      assertNotNull(curriculum0);
      
      ArrayList<Integer> arrayList1 = curriculum0.getIdealComplementaryCreditsList();
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-2902.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2990), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("k^dw\"-n#", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2990), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(44, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-2990), curriculum0.getMinNumberOfTerms());
      assertEquals(44, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(20, curriculum0.getMaxNumberOfTerms());
      assertEquals(37, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("k^dw\"-n#", curriculum0.getCourseCode());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList0.contains(44));
      assertFalse(hashSet0.contains("k^dw\"-n#"));
      assertFalse(arrayList1.contains(44));
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Vector<String> vector0 = new Vector<String>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Curriculum curriculum0 = new Curriculum("y7G2F&VHRr^A%", "y7G2F&VHRr^A%", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, set0, set0, set0, set0, vector0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1194, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1194, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1194, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1194, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1194, curriculum0.getMinNumberOfTerms());
      assertEquals(1194, curriculum0.getMaxNumberOfTerms());
      assertEquals("y7G2F&VHRr^A%", curriculum0.getCurriculumCode());
      assertEquals(1194, curriculum0.getMinActivitiesNeeded());
      assertEquals(1194, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1194, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("y7G2F&VHRr^A%", curriculum0.getCourseCode());
      assertEquals(1194, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(4776.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertFalse(arrayList0.contains(1194));
      assertFalse(set0.contains("y7G2F&VHRr^A%"));
      assertFalse(vector0.contains("y7G2F&VHRr^A%"));
      assertNotNull(curriculum0);
      
      ArrayList<Integer> arrayList1 = curriculum0.getIdealElectiveCreditsList();
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1194, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1194, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1194, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1194, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1194, curriculum0.getMinNumberOfTerms());
      assertEquals(1194, curriculum0.getMaxNumberOfTerms());
      assertEquals("y7G2F&VHRr^A%", curriculum0.getCurriculumCode());
      assertEquals(1194, curriculum0.getMinActivitiesNeeded());
      assertEquals(1194, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1194, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("y7G2F&VHRr^A%", curriculum0.getCourseCode());
      assertEquals(1194, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(4776.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList0.contains(1194));
      assertFalse(set0.contains("y7G2F&VHRr^A%"));
      assertFalse(vector0.contains("y7G2F&VHRr^A%"));
      assertFalse(arrayList1.contains(1194));
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "com.google.common.collect.Ordering", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-4069), 0, (-4069), 883, 0, 0, 0, 0, (-1260), 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(883, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1260), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-7255.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("com.google.common.collect.Ordering", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-4069), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-4069), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertNotNull(curriculum0);
      
      curriculum0.setMinElectiveCreditsNeeded(0);
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(883, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1260), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("com.google.common.collect.Ordering", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-3186.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-4069), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 629, (-3481), 629, 0, 629, (-3481), 629, (-3481), (-3481), 629, arrayList0, linkedHashSet0, (Collection<String>) null, arrayList0, arrayList0);
      String string0 = curriculum0.toString();
      assertEquals("Curriculum{courseCode='', curriculumCode='', idealMandatoryCreditsList=null, idealOptionalCreditsList=null, idealElectiveCreditsList=null, idealComplementaryCreditsList=null, expectedMinAccumulatedCreditsList=null, minMandatoryCreditsNeeded=629, minOptionalCreditsNeeded=-3481, minElectiveCreditsNeeded=629, minComplementaryCreditsNeeded=0, minActivitiesNeeded=629, minNumberOfTerms=-3481, maxNumberOfTerms=629, minNumberOfEnrolledCredits=-3481, maxNumberOfEnrolledCredits=-3481, exceptionalAdditionalEnrolledCredits=629, mandatorySubjectsList=[], optionalSubjectsList=[], electiveSubjectsList=null, complementarySubjectsList=[], complementaryActivitiesList=[]}", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 629, (-3481), 629, 0, 629, (-3481), 629, (-3481), (-3481), 629, arrayList0, linkedHashSet0, (Collection<String>) null, arrayList0, arrayList0);
      int int0 = curriculum0.getMinNumberOfEnrolledCredits();
      assertEquals((-3481), int0);
      assertEquals((-3481), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(629, curriculum0.getMaxNumberOfTerms());
      assertEquals(629, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2223.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-3481), curriculum0.getMinNumberOfTerms());
      assertEquals(629, curriculum0.getMinActivitiesNeeded());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-4200));
      arrayList0.add(integer0);
      Curriculum curriculum0 = new Curriculum((String) null, (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 4577, (-4200), (-3580), 954, 524, (-3580), 479, 1965, 954, 678, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      int int0 = curriculum0.getIdealMaxCredits(1);
      assertEquals(1965, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(479, curriculum0.getMaxNumberOfTerms());
      assertEquals(678, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(524, curriculum0.getMinActivitiesNeeded());
      assertEquals((-2249.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-16800), int0);
      assertEquals((-3580), curriculum0.getMinNumberOfTerms());
      assertEquals(954, curriculum0.getMaxNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Curriculum curriculum0 = new Curriculum("6l~yMwY@hf", "6l~yMwY@hf", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), arrayList1, arrayList1, arrayList1, arrayList1, arrayList1);
      int int0 = curriculum0.getExceptionalAdditionalEnrolledCredits();
      assertEquals((-5740.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1435), curriculum0.getMinNumberOfTerms());
      assertEquals((-1435), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1435), int0);
      assertEquals((-1435), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1435), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1435), curriculum0.getMaxNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum(", minNumberOfTerms=", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, (-836), 3382, (-836), (-836), 3382, (-836), (-2147), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      curriculum0.getCourseCode();
      assertEquals((-836.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2147), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-836), curriculum0.getMaxNumberOfTerms());
      assertEquals(3382, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(3382, curriculum0.getMinActivitiesNeeded());
      assertEquals((-836), curriculum0.getMinNumberOfTerms());
      assertEquals((-836), curriculum0.getMaxNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      HashSet<String> hashSet0 = new HashSet<String>();
      Curriculum curriculum0 = new Curriculum("k^dw\"-n#", "k^dw\"-n#", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 44, 44, (-2990), 0, (-2990), 20, 20, 37, (-2990), hashSet0, hashSet0, hashSet0, hashSet0, hashSet0);
      curriculum0.getComplementarySubjectsList();
      assertEquals((-2990), curriculum0.getMinNumberOfTerms());
      assertEquals((-2990), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2902.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(20, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(37, curriculum0.getMaxNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Curriculum curriculum0 = new Curriculum(":r!b!Ex4`i}vf", ":r!b!Ex4`i}vf", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 4631, 4631, 4631, 4631, 4631, 4631, 4631, 4631, 4631, 4631, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0);
      curriculum0.getOptionalSubjectsList();
      assertEquals(18524.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(4631, curriculum0.getMinNumberOfTerms());
      assertEquals(4631, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(4631, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(4631, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(4631, curriculum0.getMinActivitiesNeeded());
      assertEquals(4631, curriculum0.getMaxNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum(", minNumberOfTerms=", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, (-836), 3382, (-836), (-836), 3382, (-836), (-2147), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      curriculum0.setMandatorySubjectsList((Collection<String>) null);
      assertEquals(3382, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-836), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-836), curriculum0.getMinNumberOfTerms());
      assertEquals((-836.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2147), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(3382, curriculum0.getMinActivitiesNeeded());
      assertEquals((-836), curriculum0.getMaxNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      HashSet<String> hashSet0 = new HashSet<String>();
      Curriculum curriculum0 = new Curriculum("mC?^lbIf0pN\"=*Ngz", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1468), (-1468), 0, (-1468), 0, 0, 0, (-368), (-368), 1415, hashSet0, hashSet0, hashSet0, hashSet0, hashSet0);
      curriculum0.setMinNumberOfTerms(0);
      assertEquals(1415, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("mC?^lbIf0pN\"=*Ngz", curriculum0.getCourseCode());
      assertEquals((-4404.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-368), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-368), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Curriculum curriculum0 = new Curriculum("g(1^WHSd48L|z>u", "g(1^WHSd48L|z>u", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-477), (-477), (-477), (-477), (-477), (-477), (-477), (-477), (-477), (-477), linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      curriculum0.getCurriculumCode();
      assertEquals((-477), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-477), curriculum0.getMinActivitiesNeeded());
      assertEquals((-477), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-477), curriculum0.getMinNumberOfTerms());
      assertEquals((-477), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1908.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-477), curriculum0.getMaxNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<String> arrayList1 = new ArrayList<String>(726);
      Curriculum curriculum0 = new Curriculum("HM[Q#o2}-TS", "HM[Q#o2}-TS", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-15), (-15), (-15), (-15), (-15), 726, 726, 726, (-15), (-15), (Collection<String>) null, arrayList1, arrayList1, (Collection<String>) null, arrayList1);
      curriculum0.setIdealOptionalCreditsList(arrayList0);
      assertEquals((-60.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(726, curriculum0.getMaxNumberOfTerms());
      assertEquals(726, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-15), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-15), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-15), curriculum0.getMinActivitiesNeeded());
      assertEquals(726, curriculum0.getMinNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum(", minNumberOfTerms=", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, (-836), 3382, (-836), (-836), 3382, (-836), (-2147), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      curriculum0.setComplementarySubjectsList((Collection<String>) null);
      assertEquals(3382, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-2147), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-836), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-836), curriculum0.getMaxNumberOfTerms());
      assertEquals((-836), curriculum0.getMinNumberOfTerms());
      assertEquals((-836.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(3382, curriculum0.getMinActivitiesNeeded());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum(", minNumberOfTerms=", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, (-836), 3382, (-836), (-836), 3382, (-836), (-2147), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      curriculum0.setIdealElectiveCreditsList((ArrayList<Integer>) null);
      assertEquals((-836.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(3382, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-2147), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-836), curriculum0.getMinNumberOfTerms());
      assertEquals(3382, curriculum0.getMinActivitiesNeeded());
      assertEquals((-836), curriculum0.getMaxNumberOfTerms());
      assertEquals((-836), curriculum0.getMaxNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      Curriculum curriculum0 = new Curriculum(", minNumberOfTerms=", ", minNumberOfTerms=", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, hashSet0, hashSet0);
      curriculum0.setElectiveSubjectsList(hashSet0);
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertEquals(125, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(125, curriculum0.getMinActivitiesNeeded());
      assertEquals(500.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(125, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(125, curriculum0.getMinNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Curriculum curriculum0 = new Curriculum("Buq%GKX:r\") U:f", "Buq%GKX:r\") U:f", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-490), (-490), (-490), (-490), (-490), (-490), (-490), (-490), (-490), (-490), arrayList1, arrayList1, arrayList1, set0, arrayList1);
      int int0 = curriculum0.getMaxNumberOfEnrolledCredits();
      assertEquals((-490), curriculum0.getMaxNumberOfTerms());
      assertEquals((-490), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-490), curriculum0.getMinNumberOfTerms());
      assertEquals((-490), int0);
      assertEquals((-490), curriculum0.getMinActivitiesNeeded());
      assertEquals((-490), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1960.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 461845907, 3515, 461845907, 461845907, 3981, 3515, 3981, 461845907, 6, 461845907, treeSet0, treeSet0, treeSet0, treeSet0, treeSet0);
      // Undeclared exception!
      try { 
        curriculum0.getIdealElectiveCredits(3515);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      Curriculum curriculum0 = new Curriculum(", minNumberOfTerms=", ", minNumberOfTerms=", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, hashSet0, hashSet0);
      Collection<String> collection0 = curriculum0.getElectiveSubjectsList();
      assertNull(collection0);
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(125, curriculum0.getMinNumberOfTerms());
      assertEquals(125, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(500.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(125, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 461845907, 3515, 461845907, 461845907, 3981, 3515, 3981, 461845907, 6, 461845907, treeSet0, treeSet0, treeSet0, treeSet0, treeSet0);
      curriculum0.getIdealMandatoryCreditsList();
      assertEquals(461845907, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(3515, curriculum0.getMinNumberOfTerms());
      assertEquals(6, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1.385541236E9, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(3981, curriculum0.getMinActivitiesNeeded());
      assertEquals(461845907, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(3981, curriculum0.getMaxNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Curriculum curriculum0 = new Curriculum("", "", arrayList0, arrayList0, (ArrayList<Integer>) null, (ArrayList<Integer>) null, arrayList0, 0, 2287, (-1), 2287, 2601, (-933), 2287, (-1), 1690, 1639, set0, set0, set0, priorityQueue0, priorityQueue0);
      curriculum0.getIdealOptionalCreditsList();
      assertEquals((-1), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(4573.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1690, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2601, curriculum0.getMinActivitiesNeeded());
      assertEquals((-933), curriculum0.getMinNumberOfTerms());
      assertEquals(1639, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(2287, curriculum0.getMaxNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Curriculum curriculum0 = new Curriculum(":r!b!Ex4`i}vf", ":r!b!Ex4`i}vf", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 4631, 4631, 4631, 4631, 4631, 4631, 4631, 4631, 4631, 4631, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0);
      int int0 = curriculum0.getMaxNumberOfTerms();
      assertEquals(4631, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(4631, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(4631, curriculum0.getMinNumberOfTerms());
      assertEquals(18524.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(4631, int0);
      assertEquals(4631, curriculum0.getMinActivitiesNeeded());
      assertEquals(4631, curriculum0.getMinNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Curriculum curriculum0 = new Curriculum("", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 1636, 1636, 0, 1636, (-1567), 0, (-1567), 0, 1636, 0, linkedList0, treeSet0, treeSet0, linkedList0, linkedList0);
      int int0 = curriculum0.getMinActivitiesNeeded();
      assertEquals((-1567), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-1567), int0);
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(4908.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1636, curriculum0.getMaxNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Curriculum curriculum0 = new Curriculum("WwO]LF~>;!F#C}@]37", "WwO]LF~>;!F#C}@]37", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 135, 135, 0, (-2039), 707, (-1), 0, 0, (-1), 0, set0, set0, set0, set0, set0);
      curriculum0.setExpectedMinAccumulatedCreditsList(arrayList0);
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1769.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1), curriculum0.getMinNumberOfTerms());
      assertEquals((-1), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(707, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Curriculum curriculum0 = new Curriculum("6l~yMwY@hf", "6l~yMwY@hf", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), arrayList1, arrayList1, arrayList1, arrayList1, arrayList1);
      int int0 = curriculum0.getMinNumberOfTerms();
      assertEquals((-5740.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1435), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1435), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1435), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1435), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1435), curriculum0.getMaxNumberOfTerms());
      assertEquals((-1435), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum(", minNumberOfTerms=", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, (-836), 3382, (-836), (-836), 3382, (-836), (-2147), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals(3382, curriculum0.getMinActivitiesNeeded());
      
      curriculum0.setMinActivitiesNeeded(0);
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 461845907, 3515, 461845907, 461845907, 3981, 3515, 3981, 461845907, 6, 461845907, treeSet0, treeSet0, treeSet0, treeSet0, treeSet0);
      curriculum0.getComplementaryActivitiesList();
      assertEquals(6, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(461845907, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1.385541236E9, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(461845907, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(3981, curriculum0.getMaxNumberOfTerms());
      assertEquals(3515, curriculum0.getMinNumberOfTerms());
      assertEquals(3981, curriculum0.getMinActivitiesNeeded());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Curriculum curriculum0 = new Curriculum("-,Xf", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 31, 0, 2, 0, 1965, (-1706), (-1452), (-1706), 2, 2567, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0);
      // Undeclared exception!
      try { 
        curriculum0.getExpectedMinAccumulatedCredits(1965);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1965, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum(", minNumberOfTerms=", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, (-836), 3382, (-836), (-836), 3382, (-836), (-2147), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      curriculum0.setCurriculumCode(", minNumberOfTerms=");
      assertEquals((-836.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2147), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-836), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-836), curriculum0.getMinNumberOfTerms());
      assertEquals((-836), curriculum0.getMaxNumberOfTerms());
      assertEquals(3382, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(3382, curriculum0.getMinActivitiesNeeded());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum(", minNumberOfTerms=", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, (-836), 3382, (-836), (-836), 3382, (-836), (-2147), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      // Undeclared exception!
      try { 
        curriculum0.getIdealComplementaryCredits(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Curriculum curriculum0 = new Curriculum("6l~yMwY@hf", "6l~yMwY@hf", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), arrayList1, arrayList1, arrayList1, arrayList1, arrayList1);
      curriculum0.setMinNumberOfEnrolledCredits((-1435));
      assertEquals((-1435), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1435), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1435), curriculum0.getMinNumberOfTerms());
      assertEquals((-1435), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1435), curriculum0.getMaxNumberOfTerms());
      assertEquals((-5740.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Curriculum curriculum0 = new Curriculum("6l~yMwY@hf", "6l~yMwY@hf", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), arrayList1, arrayList1, arrayList1, arrayList1, arrayList1);
      curriculum0.setMinComplementaryCreditsNeeded((-1));
      assertEquals((-1), curriculum0.getMinComplementaryCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Curriculum curriculum0 = new Curriculum("g(1^WHSd48L|z>u", "g(1^WHSd48L|z>u", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-477), (-477), (-477), (-477), (-477), (-477), (-477), (-477), (-477), (-477), linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      double double0 = curriculum0.getMinNumberOfCreditsNeeded();
      assertEquals((-477), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1908.0), double0, 0.01);
      assertEquals((-477), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-477), curriculum0.getMinNumberOfTerms());
      assertEquals((-477), curriculum0.getMaxNumberOfTerms());
      assertEquals((-477), curriculum0.getMinActivitiesNeeded());
      assertEquals((-477), curriculum0.getMaxNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Curriculum curriculum0 = new Curriculum("", "", arrayList0, arrayList0, (ArrayList<Integer>) null, (ArrayList<Integer>) null, arrayList0, 0, 2287, (-1), 2287, 2601, (-933), 2287, (-1), 1690, 1639, set0, set0, set0, priorityQueue0, priorityQueue0);
      // Undeclared exception!
      try { 
        curriculum0.getIdealMaxCredits(1690);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1689, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum(", minNumberOfTerms=", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, (-836), 3382, (-836), (-836), 3382, (-836), (-2147), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      curriculum0.setCourseCode(", minNumberOfTerms=");
      assertEquals((-836), curriculum0.getMaxNumberOfTerms());
      assertEquals((-836), curriculum0.getMinNumberOfTerms());
      assertEquals((-2147), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-836), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-836.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(3382, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(3382, curriculum0.getMinActivitiesNeeded());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Curriculum curriculum0 = new Curriculum("6l~yMwY@hf", "6l~yMwY@hf", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), arrayList1, arrayList1, arrayList1, arrayList1, arrayList1);
      curriculum0.setComplementaryActivitiesList(arrayList1);
      assertEquals((-5740.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1435), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1435), curriculum0.getMinNumberOfTerms());
      assertEquals((-1435), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1435), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1435), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1435), curriculum0.getMaxNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Locale locale0 = new Locale("");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Curriculum curriculum0 = new Curriculum(", mandatorySubjectsList=", ", mandatorySubjectsList=", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 1682554634, 1682554634, 0, 125, 0, 44, 0, 125, 8202, 0, set0, set0, set0, set0, (Collection<String>) null);
      curriculum0.setIdealMandatoryCreditsList((ArrayList<Integer>) null);
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(8202, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-9.29857903E8), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(44, curriculum0.getMinNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Curriculum curriculum0 = new Curriculum("6l~yMwY@hf", "6l~yMwY@hf", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), (-1435), arrayList1, arrayList1, arrayList1, arrayList1, arrayList1);
      curriculum0.getMandatorySubjectsList();
      assertEquals((-1435), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1435), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1435), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1435), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-5740.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1435), curriculum0.getMaxNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Curriculum curriculum0 = new Curriculum("oI;", "oI;", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-102), (-102), (-102), (-102), (-102), (-102), (-102), (-102), (-102), (-102), linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      curriculum0.setMaxNumberOfEnrolledCredits((-102));
      assertEquals((-102), curriculum0.getMinNumberOfTerms());
      assertEquals((-102), curriculum0.getMaxNumberOfTerms());
      assertEquals((-408.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-102), curriculum0.getMinActivitiesNeeded());
      assertEquals((-102), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-102), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-102), curriculum0.getMinNumberOfEnrolledCredits());
  }
}
