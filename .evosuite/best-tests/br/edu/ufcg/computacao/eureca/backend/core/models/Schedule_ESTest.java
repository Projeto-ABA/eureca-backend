/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 22:35:12 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.models.ClassSchedule;
import br.edu.ufcg.computacao.eureca.backend.core.models.Schedule;
import br.edu.ufcg.computacao.eureca.backend.core.models.WeekDay;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Schedule_ESTest extends Schedule_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stack<ClassSchedule> stack0 = new Stack<ClassSchedule>();
      Schedule schedule0 = new Schedule((-859), "%`MIO$vFq:A9", stack0);
      schedule0.getSchedule();
      assertEquals((-859), schedule0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeSet<ClassSchedule> treeSet0 = new TreeSet<ClassSchedule>();
      Schedule schedule0 = new Schedule(0, (String) null, treeSet0);
      schedule0.getClassCode();
      assertEquals(0, schedule0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PriorityQueue<ClassSchedule> priorityQueue0 = new PriorityQueue<ClassSchedule>();
      Schedule schedule0 = new Schedule(0, "", priorityQueue0);
      schedule0.getClassCode();
      assertEquals(0, schedule0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayDeque<ClassSchedule> arrayDeque0 = new ArrayDeque<ClassSchedule>();
      Schedule schedule0 = new Schedule(0, "=)", arrayDeque0);
      int int0 = schedule0.getAvailability();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashSet<ClassSchedule> hashSet0 = new HashSet<ClassSchedule>();
      Schedule schedule0 = new Schedule(7, "ecZ4x<JbJ.SFk", hashSet0);
      int int0 = schedule0.getAvailability();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Schedule schedule0 = new Schedule((-1846), "", (Collection<ClassSchedule>) null);
      // Undeclared exception!
      try { 
        schedule0.haveConflict(schedule0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.util.EurecaUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeSet<ClassSchedule> treeSet0 = new TreeSet<ClassSchedule>();
      LinkedHashSet<ClassSchedule> linkedHashSet0 = new LinkedHashSet<ClassSchedule>(treeSet0);
      WeekDay weekDay0 = WeekDay.TUESDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, "(Object[])null", "com.google.common.base.Converter");
      linkedHashSet0.add(classSchedule0);
      Schedule schedule0 = new Schedule(1, "com.google.common.base.Converter", linkedHashSet0);
      Schedule schedule1 = new Schedule(1, "com.google.common.base.Converter", treeSet0);
      // Undeclared exception!
      try { 
        schedule1.haveConflict(schedule0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // br.edu.ufcg.computacao.eureca.backend.core.models.ClassSchedule cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Schedule schedule0 = new Schedule((-805), "com.google.common.hash.LongAddables$1", (Collection<ClassSchedule>) null);
      Schedule schedule1 = new Schedule((-805), "com.google.common.hash.LongAddables$1", (Collection<ClassSchedule>) null);
      // Undeclared exception!
      try { 
        schedule0.equals(schedule1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Schedule", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Schedule schedule0 = new Schedule((-1846), "", (Collection<ClassSchedule>) null);
      schedule0.getSchedule();
      assertEquals((-1846), schedule0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack<ClassSchedule> stack0 = new Stack<ClassSchedule>();
      Schedule schedule0 = new Schedule(11, ",cY.", stack0);
      WeekDay weekDay0 = WeekDay.SATURDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, ",cY.", ",cY.");
      stack0.add(classSchedule0);
      boolean boolean0 = schedule0.haveConflict(schedule0);
      assertTrue(boolean0);
      assertEquals(11, schedule0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<ClassSchedule> stack0 = new Stack<ClassSchedule>();
      Schedule schedule0 = new Schedule((-227), "3HY[2I(", stack0);
      Schedule schedule1 = new Schedule(0, "3HY[2I(", stack0);
      schedule1.equals(schedule0);
      assertEquals((-227), schedule0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<ClassSchedule> linkedList0 = new LinkedList<ClassSchedule>();
      Schedule schedule0 = new Schedule(2985, (String) null, linkedList0);
      boolean boolean0 = schedule0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(2985, schedule0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<ClassSchedule> stack0 = new Stack<ClassSchedule>();
      Schedule schedule0 = new Schedule((-227), "3HY[2I(", stack0);
      boolean boolean0 = schedule0.equals(schedule0);
      assertEquals((-227), schedule0.getAvailability());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stack<ClassSchedule> stack0 = new Stack<ClassSchedule>();
      Schedule schedule0 = new Schedule((-227), "3HY[2I(", stack0);
      Object object0 = new Object();
      boolean boolean0 = schedule0.equals(object0);
      assertEquals((-227), schedule0.getAvailability());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Stack<ClassSchedule> stack0 = new Stack<ClassSchedule>();
      Schedule schedule0 = new Schedule((-227), "3HY[2I(", stack0);
      int int0 = schedule0.getAvailability();
      assertEquals((-227), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stack<ClassSchedule> stack0 = new Stack<ClassSchedule>();
      Schedule schedule0 = new Schedule((-227), "3HY[2I(", stack0);
      schedule0.hashCode();
      assertEquals((-227), schedule0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stack<ClassSchedule> stack0 = new Stack<ClassSchedule>();
      Schedule schedule0 = new Schedule((-227), "3HY[2I(", stack0);
      schedule0.setAvailability((-227));
      assertEquals((-227), schedule0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Stack<ClassSchedule> stack0 = new Stack<ClassSchedule>();
      Schedule schedule0 = new Schedule((-227), "3HY[2I(", stack0);
      schedule0.decrementAvailability();
      assertEquals((-228), schedule0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Stack<ClassSchedule> stack0 = new Stack<ClassSchedule>();
      Schedule schedule0 = new Schedule((-227), "3HY[2I(", stack0);
      schedule0.getClassCode();
      assertEquals((-227), schedule0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Stack<ClassSchedule> stack0 = new Stack<ClassSchedule>();
      Schedule schedule0 = new Schedule((-227), "3HY[2I(", stack0);
      schedule0.setSchedule(stack0);
      assertEquals((-227), schedule0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Stack<ClassSchedule> stack0 = new Stack<ClassSchedule>();
      Schedule schedule0 = new Schedule((-227), "3HY[2I(", stack0);
      boolean boolean0 = schedule0.haveConflict(schedule0);
      assertFalse(boolean0);
      assertEquals((-227), schedule0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Stack<ClassSchedule> stack0 = new Stack<ClassSchedule>();
      Schedule schedule0 = new Schedule((-227), "3HY[2I(", stack0);
      schedule0.setClassCode("");
      assertEquals((-227), schedule0.getAvailability());
  }
}
