/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:01:28 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.subject;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectCSV;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetrics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubjectCSV_ESTest extends SubjectCSV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = mock(SubjectMetrics.class, new ViolatedAssumptionAnswer());
      SubjectCSV subjectCSV0 = new SubjectCSV("$%@", "%Ov*Kd@|", "$%@", "%Ov*Kd@|", (String) null, subjectMetrics0);
      String string0 = subjectCSV0.getTerm();
      assertEquals("$%@", subjectCSV0.getSubjectCode());
      assertEquals("%Ov*Kd@|", subjectCSV0.getSubjectName());
      assertEquals("$%@", subjectCSV0.getCourseCode());
      assertEquals("%Ov*Kd@|", subjectCSV0.getCurriculumCode());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SubjectCSV subjectCSV0 = new SubjectCSV("1y8K[ e}|-9X", "1y8K[ e}|-9X", ";k#5ImyB", "-;gkKMa<jk!`gKhP|", "SubjectCSV{courseCode='", (SubjectMetrics) null);
      String string0 = subjectCSV0.getTerm();
      assertEquals("SubjectCSV{courseCode='", string0);
      assertEquals("-;gkKMa<jk!`gKhP|", subjectCSV0.getSubjectName());
      assertEquals(";k#5ImyB", subjectCSV0.getSubjectCode());
      assertEquals("1y8K[ e}|-9X", subjectCSV0.getCourseCode());
      assertEquals("1y8K[ e}|-9X", subjectCSV0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = mock(SubjectMetrics.class, new ViolatedAssumptionAnswer());
      SubjectCSV subjectCSV0 = new SubjectCSV("", "", "", ", metrics='", (String) null, subjectMetrics0);
      assertEquals(", metrics='", subjectCSV0.getSubjectName());
      
      subjectCSV0.setSubjectName((String) null);
      subjectCSV0.getSubjectName();
      assertEquals("", subjectCSV0.getCourseCode());
      assertEquals("", subjectCSV0.getSubjectCode());
      assertEquals("", subjectCSV0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubjectCSV subjectCSV0 = new SubjectCSV((String) null, (String) null, "", "", "", (SubjectMetrics) null);
      String string0 = subjectCSV0.getSubjectName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubjectCSV subjectCSV0 = new SubjectCSV((String) null, (String) null, "", "", "", (SubjectMetrics) null);
      subjectCSV0.setSubjectCode((String) null);
      String string0 = subjectCSV0.getSubjectCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubjectCSV subjectCSV0 = new SubjectCSV("e^X", "e^X", "", "e^X", "", (SubjectMetrics) null);
      String string0 = subjectCSV0.getSubjectCode();
      assertEquals("e^X", subjectCSV0.getCurriculumCode());
      assertEquals("e^X", subjectCSV0.getSubjectName());
      assertEquals("", string0);
      assertEquals("", subjectCSV0.getTerm());
      assertEquals("e^X", subjectCSV0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubjectCSV subjectCSV0 = new SubjectCSV("1y8K[ e}|-9X", "1y8K[ e}|-9X", ";k#5ImyB", "-;gkKMa<jk!`gKhP|", "SubjectCSV{courseCode='", (SubjectMetrics) null);
      subjectCSV0.getMetrics();
      assertEquals("1y8K[ e}|-9X", subjectCSV0.getCurriculumCode());
      assertEquals(";k#5ImyB", subjectCSV0.getSubjectCode());
      assertEquals("1y8K[ e}|-9X", subjectCSV0.getCourseCode());
      assertEquals("SubjectCSV{courseCode='", subjectCSV0.getTerm());
      assertEquals("-;gkKMa<jk!`gKhP|", subjectCSV0.getSubjectName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubjectCSV subjectCSV0 = new SubjectCSV("", "", (String) null, "", (String) null, (SubjectMetrics) null);
      subjectCSV0.setCurriculumCode((String) null);
      String string0 = subjectCSV0.getCurriculumCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubjectCSV subjectCSV0 = new SubjectCSV("1y8K[ e}|-9X", "1y8K[ e}|-9X", ";k#5ImyB", "-;gkKMa<jk!`gKhP|", "SubjectCSV{courseCode='", (SubjectMetrics) null);
      assertEquals("1y8K[ e}|-9X", subjectCSV0.getCurriculumCode());
      
      subjectCSV0.setCurriculumCode("");
      subjectCSV0.getCurriculumCode();
      assertEquals("SubjectCSV{courseCode='", subjectCSV0.getTerm());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubjectCSV subjectCSV0 = new SubjectCSV("", "", (String) null, "", (String) null, (SubjectMetrics) null);
      subjectCSV0.setCourseCode("(;");
      String string0 = subjectCSV0.getCourseCode();
      assertEquals("(;", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = mock(SubjectMetrics.class, new ViolatedAssumptionAnswer());
      SubjectCSV subjectCSV0 = new SubjectCSV("", "", "", ", metrics='", (String) null, subjectMetrics0);
      String string0 = subjectCSV0.getCourseCode();
      assertEquals("", string0);
      assertEquals("", subjectCSV0.getCurriculumCode());
      assertEquals(", metrics='", subjectCSV0.getSubjectName());
      assertNotNull(string0);
      assertEquals("", subjectCSV0.getSubjectCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubjectCSV subjectCSV0 = new SubjectCSV("", "", "br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectCSV", "", "br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectCSV", (SubjectMetrics) null);
      SubjectCSV subjectCSV1 = new SubjectCSV("", "", "", "", "", (SubjectMetrics) null);
      int int0 = subjectCSV0.compareTo(subjectCSV1);
      assertEquals("", subjectCSV0.getSubjectName());
      assertEquals(148, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = mock(SubjectMetrics.class, new ViolatedAssumptionAnswer());
      SubjectCSV subjectCSV0 = new SubjectCSV("@MIn", "@MIn", ", metrics='", "", "@MIn", subjectMetrics0);
      SubjectMetrics subjectMetrics1 = mock(SubjectMetrics.class, new ViolatedAssumptionAnswer());
      SubjectCSV subjectCSV1 = new SubjectCSV("", "", "", (String) null, (String) null, subjectMetrics1);
      int int0 = subjectCSV0.compareTo(subjectCSV1);
      assertEquals("@MIn", subjectCSV0.getCurriculumCode());
      assertEquals("@MIn", subjectCSV0.getTerm());
      assertEquals(", metrics='", subjectCSV0.getSubjectCode());
      assertEquals("", subjectCSV0.getSubjectName());
      assertEquals((-46), int0);
      assertEquals("@MIn", subjectCSV0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = mock(SubjectMetrics.class, new ViolatedAssumptionAnswer());
      SubjectCSV subjectCSV0 = new SubjectCSV("@MIn", "@MIn", ", metrics='", "", "@MIn", subjectMetrics0);
      // Undeclared exception!
      try { 
        subjectCSV0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SubjectCSV subjectCSV0 = new SubjectCSV("1y8K[ e}|-9X", "1y8K[ e}|-9X", ";k#5ImyB", "-;gkKMa<jk!`gKhP|", "SubjectCSV{courseCode='", (SubjectMetrics) null);
      // Undeclared exception!
      try { 
        subjectCSV0.compareTo("SubjectCSV{courseCode='");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectCSV
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SubjectCSV subjectCSV0 = new SubjectCSV("1y8K[ e}|-9X", "1y8K[ e}|-9X", ";k#5ImyB", "-;gkKMa<jk!`gKhP|", "SubjectCSV{courseCode='", (SubjectMetrics) null);
      String string0 = subjectCSV0.getSubjectCode();
      assertEquals(";k#5ImyB", string0);
      assertEquals("1y8K[ e}|-9X", subjectCSV0.getCourseCode());
      assertEquals("1y8K[ e}|-9X", subjectCSV0.getCurriculumCode());
      assertEquals("SubjectCSV{courseCode='", subjectCSV0.getTerm());
      assertEquals("-;gkKMa<jk!`gKhP|", subjectCSV0.getSubjectName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubjectCSV subjectCSV0 = new SubjectCSV("1y8K[ e}|-9X", "1y8K[ e}|-9X", ";k#5ImyB", "-;gkKMa<jk!`gKhP|", "SubjectCSV{courseCode='", (SubjectMetrics) null);
      String string0 = subjectCSV0.getCurriculumCode();
      assertEquals("-;gkKMa<jk!`gKhP|", subjectCSV0.getSubjectName());
      assertEquals("SubjectCSV{courseCode='", subjectCSV0.getTerm());
      assertEquals("1y8K[ e}|-9X", subjectCSV0.getCourseCode());
      assertEquals(";k#5ImyB", subjectCSV0.getSubjectCode());
      assertEquals("1y8K[ e}|-9X", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SubjectCSV subjectCSV0 = new SubjectCSV((String) null, (String) null, "", "", "", (SubjectMetrics) null);
      String string0 = subjectCSV0.getCourseCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = mock(SubjectMetrics.class, new ViolatedAssumptionAnswer());
      SubjectCSV subjectCSV0 = new SubjectCSV(";*Q/>x^", ";*Q/>x^", ";*Q/>x^", "", "", subjectMetrics0);
      String string0 = subjectCSV0.getTerm();
      assertEquals(";*Q/>x^", subjectCSV0.getCourseCode());
      assertEquals("", subjectCSV0.getSubjectName());
      assertEquals(";*Q/>x^", subjectCSV0.getSubjectCode());
      assertEquals(";*Q/>x^", subjectCSV0.getCurriculumCode());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = mock(SubjectMetrics.class, new ViolatedAssumptionAnswer());
      SubjectCSV subjectCSV0 = new SubjectCSV("t.\"i1L|]f#3dzWURY", "t.\"i1L|]f#3dzWURY", "t.\"i1L|]f#3dzWURY", "t.\"i1L|]f#3dzWURY", "t.\"i1L|]f#3dzWURY", subjectMetrics0);
      String string0 = subjectCSV0.getSubjectName();
      assertEquals("t.\"i1L|]f#3dzWURY", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = mock(SubjectMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(subjectMetrics0).toString();
      SubjectCSV subjectCSV0 = new SubjectCSV("t.\"i1L|]f#3dzWURY", "t.\"i1L|]f#3dzWURY", "t.\"i1L|]f#3dzWURY", "t.\"i1L|]f#3dzWURY", "t.\"i1L|]f#3dzWURY", subjectMetrics0);
      String string0 = subjectCSV0.toString();
      assertEquals("SubjectCSV{courseCode='t.\"i1L|]f#3dzWURY', curriculumCode='t.\"i1L|]f#3dzWURY', subjectCode='t.\"i1L|]f#3dzWURY', subjectName='t.\"i1L|]f#3dzWURY', term='t.\"i1L|]f#3dzWURY', metrics='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = mock(SubjectMetrics.class, new ViolatedAssumptionAnswer());
      SubjectCSV subjectCSV0 = new SubjectCSV(";*Q/>x^", ";*Q/>x^", ";*Q/>x^", "", "", subjectMetrics0);
      assertEquals("", subjectCSV0.getTerm());
      
      subjectCSV0.setTerm("SmE");
      assertEquals(";*Q/>x^", subjectCSV0.getSubjectCode());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = mock(SubjectMetrics.class, new ViolatedAssumptionAnswer());
      SubjectCSV subjectCSV0 = new SubjectCSV(";*Q/>x^", ";*Q/>x^", ";*Q/>x^", "", "", subjectMetrics0);
      SubjectMetrics subjectMetrics1 = mock(SubjectMetrics.class, new ViolatedAssumptionAnswer());
      subjectCSV0.setMetrics(subjectMetrics1);
      assertEquals("", subjectCSV0.getSubjectName());
      assertEquals(";*Q/>x^", subjectCSV0.getCourseCode());
      assertEquals(";*Q/>x^", subjectCSV0.getSubjectCode());
      assertEquals("", subjectCSV0.getTerm());
      assertEquals(";*Q/>x^", subjectCSV0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = mock(SubjectMetrics.class, new ViolatedAssumptionAnswer());
      SubjectCSV subjectCSV0 = new SubjectCSV("@MIn", "@MIn", ", metrics='", "", "@MIn", subjectMetrics0);
      subjectCSV0.compareTo(subjectCSV0);
      assertEquals("", subjectCSV0.getSubjectName());
      assertEquals("@MIn", subjectCSV0.getCourseCode());
      assertEquals(", metrics='", subjectCSV0.getSubjectCode());
      assertEquals("@MIn", subjectCSV0.getTerm());
      assertEquals("@MIn", subjectCSV0.getCurriculumCode());
  }
}
