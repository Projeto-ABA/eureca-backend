/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 22:12:01 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.NationalIdRegistrationKey;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.StudentData;
import br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum;
import br.edu.ufcg.computacao.eureca.backend.core.models.Student;
import br.edu.ufcg.computacao.eureca.backend.core.models.StudentStatus;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Set;
import org.apache.log4j.LogManager;
import org.apache.log4j.spi.LoggerRepository;
import org.apache.log4j.spi.RepositorySelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StudentData_ESTest extends StudentData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      studentData0.setStatus(studentStatus0);
      boolean boolean0 = studentData0.isDropout();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      studentData0.setStatus(studentStatus0);
      boolean boolean0 = studentData0.isAlumnus();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setSuspendedTerms(981);
      int int0 = studentData0.getSuspendedTerms();
      assertEquals(981, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setSuspendedTerms((-317));
      int int0 = studentData0.getSuspendedTerms();
      assertEquals((-317), int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      studentData0.setStatus(studentStatus0);
      String string0 = studentData0.getStatusTerm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StudentData studentData0 = new StudentData("", "Ativo", ", admissionGrade=", "5xI}we=^TP;Mu", "5xI}we=^TP;Mu", "", "Ativo", "PoxA", ", admissionGrade=", "eOT\"6[&nJCc[g/(", "t3qdds>X%4k\"", "com.google.common.base.CharM=tcher$Any", "t3qdds>X%4k\"", (String) null, "o;O([=d.1aRUvb n", ", mandatoryHours=", "5v3Ag}MH9XMI,RD'M", (-2611), (-2611), (-2611), (-2611), (-2611), (-2611), 1011.3679109241004, (-812.194775), 0.0, (-4418), (-4418), 1316, 14, 14, 0.0);
      String string0 = studentData0.getSecondarySchoolGraduationYear();
      assertEquals("5v3Ag}MH9XMI,RD'M", studentData0.getCurriculumCode());
      assertEquals("5xI}we=^TP;Mu", studentData0.getAffirmativePolicy());
      assertEquals("Ativo", string0);
      assertEquals("eOT\"6[&nJCc[g/(", studentData0.getMaritalStatus());
      assertEquals("t3qdds>X%4k\"", studentData0.getPlaceOfBirth());
      assertNotNull(string0);
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals((-2611), studentData0.getOptionalHours());
      assertEquals("o;O([=d.1aRUvb n", studentData0.getDisabilities());
      assertEquals((-7833), studentData0.getCompletedCredits());
      assertEquals("5xI}we=^TP;Mu", studentData0.getBirthDate());
      assertEquals(", mandatoryHours=", studentData0.getCourseCode());
      assertEquals("com.google.common.base.CharM=tcher$Any", studentData0.getCountry());
      assertEquals((-2611), studentData0.getMandatoryHours());
      assertEquals("t3qdds>X%4k\"", studentData0.getNationality());
      assertEquals(", admissionGrade=", studentData0.getGender());
      assertEquals("", studentData0.getName());
      assertEquals("PoxA", studentData0.getEmail());
      assertEquals((-2611), studentData0.getComplementaryHours());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARm(\"<}wS)'a", "AVe3nARm(\"<}wS)'a", "AVe3nARm(\"<}wS)'a", (String) null, (String) null, "mh3,P~d<bmGqqt @Wh'", ", enrolledCredits=", (String) null, ", enrolledCredits=", "mh3,P~d<bmGqqt @Wh'", "AVe3nARm(\"<}wS)'a", (String) null, "*.k(,8", "*.k(,8", "org.apache.commons.io.filefilter.AgeFileFilter", "n2@Y\"FJ>rG1$&", "7}+8.\"cUlP^ P@=Md&0", 7, 7, 1023, 1023, 1023, (-1), 2.0, (-1), 1451.05456685783, (-196532228), 8233, 8233, (-41), 8233, (-230.280632));
      String string0 = studentData0.getSecondarySchool();
      assertEquals(", enrolledCredits=", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("AVe3nARm(\"<}wS)'a", studentData0.getNationality());
      assertEquals("org.apache.commons.io.filefilter.AgeFileFilter", studentData0.getDisabilities());
      assertEquals("AVe3nARm(\"<}wS)'a", studentData0.getName());
      assertEquals(1023, studentData0.getOptionalHours());
      assertEquals("*.k(,8", studentData0.getPlaceOfBirth());
      assertEquals("*.k(,8", studentData0.getRace());
      assertEquals("mh3,P~d<bmGqqt @Wh'", string0);
      assertEquals("mh3,P~d<bmGqqt @Wh'", studentData0.getMaritalStatus());
      assertEquals(", enrolledCredits=", studentData0.getGender());
      assertEquals(1029, studentData0.getCompletedCredits());
      assertNotNull(string0);
      assertEquals(7, studentData0.getMandatoryHours());
      assertEquals("n2@Y\"FJ>rG1$&", studentData0.getCourseCode());
      assertEquals("7}+8.\"cUlP^ P@=Md&0", studentData0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setSecondarySchool("");
      String string0 = studentData0.getSecondarySchool();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setRace("@7Ai1C-AcwM)9");
      String string0 = studentData0.getRace();
      assertEquals("@7Ai1C-AcwM)9", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setRace("");
      String string0 = studentData0.getRace();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getPlaceOfBirth();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setPlaceOfBirth("");
      String string0 = studentData0.getPlaceOfBirth();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setOptionalHours(Integer.MAX_VALUE);
      int int0 = studentData0.getOptionalHours();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setOptionalHours((-2465));
      int int0 = studentData0.getOptionalHours();
      assertEquals((-2465), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setOptionalCredits(125);
      int int0 = studentData0.getOptionalCredits();
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setOptionalCredits((-472));
      int int0 = studentData0.getOptionalCredits();
      assertEquals((-472), int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setNationality(", admisinTerm='");
      String string0 = studentData0.getNationality();
      assertEquals(", admisinTerm='", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setNationality("");
      String string0 = studentData0.getNationality();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setName(", gpa=");
      String string0 = studentData0.getName();
      assertEquals(", gpa=", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StudentData studentData0 = new StudentData("", "Ativo", ", admissionGrade=", "5xI}we=^TP;Mu", "5xI}we=^TP;Mu", "", "Ativo", "PoxA", ", admissionGrade=", "eOT\"6[&nJCc[g/(", "t3qdds>X%4k\"", "com.google.common.base.CharM=tcher$Any", "t3qdds>X%4k\"", (String) null, "o;O([=d.1aRUvb n", ", mandatoryHours=", "5v3Ag}MH9XMI,RD'M", (-2611), (-2611), (-2611), (-2611), (-2611), (-2611), 1011.3679109241004, (-812.194775), 0.0, (-4418), (-4418), 1316, 14, 14, 0.0);
      String string0 = studentData0.getName();
      assertEquals((-2611), studentData0.getOptionalHours());
      assertEquals((-2611), studentData0.getMandatoryHours());
      assertEquals((-2611), studentData0.getComplementaryHours());
      assertEquals(", mandatoryHours=", studentData0.getCourseCode());
      assertEquals("t3qdds>X%4k\"", studentData0.getNationality());
      assertEquals(", admissionGrade=", studentData0.getGender());
      assertEquals("o;O([=d.1aRUvb n", studentData0.getDisabilities());
      assertEquals("5xI}we=^TP;Mu", studentData0.getBirthDate());
      assertEquals("5v3Ag}MH9XMI,RD'M", studentData0.getCurriculumCode());
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals("", string0);
      assertEquals("t3qdds>X%4k\"", studentData0.getPlaceOfBirth());
      assertEquals("eOT\"6[&nJCc[g/(", studentData0.getMaritalStatus());
      assertEquals("5xI}we=^TP;Mu", studentData0.getAffirmativePolicy());
      assertEquals("com.google.common.base.CharM=tcher$Any", studentData0.getCountry());
      assertEquals("Ativo", studentData0.getSecondarySchoolGraduationYear());
      assertEquals((-7833), studentData0.getCompletedCredits());
      assertEquals("PoxA", studentData0.getEmail());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getMobilityTerms();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StudentData studentData0 = new StudentData("BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", (String) null, (String) null, "org.apache.log4j.ProvisionNode", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "\" was already parsed.", "BloomFilters must have equal funnels (%s != %s)", (String) null, "@\" $YiQh@=H", "must have equal funnels %", "-S2591D4)h|H3G=6s", "\" was already parsed.", 31, 31, (-566), 31, 2010, 31, 0.0, 0.0, 0.0, 31, (-566), 31, 31, 2010, (-566));
      studentData0.getMobilityTerms();
      assertEquals("-S2591D4)h|H3G=6s", studentData0.getCourseCode());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getAffirmativePolicy());
      assertEquals("\" was already parsed.", studentData0.getNationality());
      assertEquals("@\" $YiQh@=H", studentData0.getRace());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getName());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getEmail());
      assertEquals(2010, studentData0.getComplementaryHours());
      assertEquals(31, studentData0.getMandatoryHours());
      assertEquals("\" was already parsed.", studentData0.getCurriculumCode());
      assertEquals("org.apache.log4j.ProvisionNode", studentData0.getSecondarySchoolGraduationYear());
      assertEquals((-566), studentData0.getOptionalHours());
      assertEquals(93, studentData0.getCompletedCredits());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setMc(1795.5);
      double double0 = studentData0.getMc();
      assertEquals(1795.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setMc((-1983838611));
      double double0 = studentData0.getMc();
      assertEquals((-1.983838611E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getMaritalStatus();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setMaritalStatus(")Lx{3v'2E)J.L%");
      String string0 = studentData0.getMaritalStatus();
      assertEquals(")Lx{3v'2E)J.L%", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StudentData studentData0 = new StudentData((String) null, "4(S9[)KdLRlSFb5L", "4(S9[)KdLRlSFb5L", "4(S9[)KdLRlSFb5L", (String) null, (String) null, "L]T{7Y(j}cTiTO", "2=IbW3#h\"M ]jQ", "4(S9[)KdLRlSFb5L", "cxq", "2=IbW3#h\"M ]jQ", "2=IbW3#h\"M ]jQ", (String) null, "2=IbW3#h\"M ]jQ", "cxq", (String) null, "2=IbW3#h\"M ]jQ", 341, 301, (-1459109987), (-1459109987), (-1091), 1346, 0.0, (-1091), (-632.31985), 1346, (-1459109987), 191, (-1459109987), (-2006059313), 4.0);
      int int0 = studentData0.getMandatoryHours();
      assertEquals("2=IbW3#h\"M ]jQ", studentData0.getRace());
      assertEquals("2=IbW3#h\"M ]jQ", studentData0.getCurriculumCode());
      assertEquals("2=IbW3#h\"M ]jQ", studentData0.getCountry());
      assertEquals("L]T{7Y(j}cTiTO", studentData0.getSecondarySchoolGraduationYear());
      assertEquals((-1459109987), studentData0.getOptionalHours());
      assertEquals((-1459108340), studentData0.getCompletedCredits());
      assertEquals("4(S9[)KdLRlSFb5L", studentData0.getAffirmativePolicy());
      assertEquals((-1091), studentData0.getComplementaryHours());
      assertEquals("cxq", studentData0.getDisabilities());
      assertEquals("cxq", studentData0.getMaritalStatus());
      assertEquals("4(S9[)KdLRlSFb5L", studentData0.getGender());
      assertEquals("2=IbW3#h\"M ]jQ", studentData0.getNationality());
      assertEquals("2=IbW3#h\"M ]jQ", studentData0.getEmail());
      assertEquals(341, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setMandatoryHours((-1468720904));
      int int0 = studentData0.getMandatoryHours();
      assertEquals((-1468720904), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getMandatoryCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StudentData studentData0 = new StudentData("BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "yXwQi^=UC56sfUK1r", ", country='", "yXwQi^=UC56sfUK1r", "log4j called after unloading, see http://logging.apache.org/log4j/1.2/faq.html#unload.", "", "], Rendered class: [", "], Rendered class: [", "BloomFilters must have equal funnels (%s != %s)", "CharMatcher.javaIsoControl()", "JnO5LC$/Tr:i", "Curriculum{courseCode='", "XLn\"oAiZ0.|bNn|5{Vo", "", 1, 1, (-3006), 49, (-1132481822), (-1132481822), 1, 49, (-1132481822), 49, (-1132481822), (-1936975327), 63, 63, (-3006));
      int int0 = studentData0.getMandatoryCredits();
      assertEquals((-1132481822), studentData0.getComplementaryHours());
      assertEquals((-3006), studentData0.getOptionalHours());
      assertEquals("", studentData0.getGender());
      assertEquals("XLn\"oAiZ0.|bNn|5{Vo", studentData0.getCourseCode());
      assertEquals("JnO5LC$/Tr:i", studentData0.getRace());
      assertEquals(1, studentData0.getMandatoryHours());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getCountry());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getName());
      assertEquals("log4j called after unloading, see http://logging.apache.org/log4j/1.2/faq.html#unload.", studentData0.getEmail());
      assertEquals("CharMatcher.javaIsoControl()", studentData0.getPlaceOfBirth());
      assertEquals("Curriculum{courseCode='", studentData0.getDisabilities());
      assertEquals("], Rendered class: [", studentData0.getMaritalStatus());
      assertEquals((-1132481772), studentData0.getCompletedCredits());
      assertEquals(", country='", studentData0.getSecondarySchool());
      assertEquals("yXwQi^=UC56sfUK1r", studentData0.getBirthDate());
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getAffirmativePolicy());
      assertEquals("yXwQi^=UC56sfUK1r", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("], Rendered class: [", studentData0.getNationality());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "", "", ", enrolledCredits=", "csnlD]pUcT~", ".'vqtB W$", "csnlD]pUcT~", "Jau+UA5V(V", ".'vqtB W$", "", 2469, 2469, (-1796310091), (-1796310091), (-1796310091), 137, (-739.9621), (-739.9621), 1.0, (-1161267112), (-3243), 2469, (-3243), (-3243), (-883.99));
      studentData0.getInstitutionalEnrollments();
      assertEquals("", studentData0.getGender());
      assertEquals("csnlD]pUcT~", studentData0.getCountry());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getBirthDate());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getSecondarySchoolGraduationYear());
      assertEquals((-1796310091), studentData0.getComplementaryHours());
      assertEquals("S| *B'fkP", studentData0.getEmail());
      assertEquals(2469, studentData0.getMandatoryHours());
      assertEquals(", enrolledCredits=", studentData0.getNationality());
      assertEquals(".'vqtB W$", studentData0.getPlaceOfBirth());
      assertEquals("S| *B'fkP", studentData0.getSecondarySchool());
      assertEquals("Jau+UA5V(V", studentData0.getDisabilities());
      assertEquals("", studentData0.getMaritalStatus());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getAffirmativePolicy());
      assertEquals(".'vqtB W$", studentData0.getCourseCode());
      assertEquals((-1796307485), studentData0.getCompletedCredits());
      assertEquals((-1796310091), studentData0.getOptionalHours());
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals("csnlD]pUcT~", studentData0.getRace());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StudentData studentData0 = new StudentData("BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "yXwQi^=UC56sfUK1r", ", country='", "yXwQi^=UC56sfUK1r", "log4j called after unloading, see http://logging.apache.org/log4j/1.2/faq.html#unload.", "", "], Rendered class: [", "], Rendered class: [", "BloomFilters must have equal funnels (%s != %s)", "CharMatcher.javaIsoControl()", "JnO5LC$/Tr:i", "Curriculum{courseCode='", "XLn\"oAiZ0.|bNn|5{Vo", "", 1, 1, (-3006), 49, (-1132481822), (-1132481822), 1, 49, (-1132481822), 49, (-1132481822), (-1936975327), 63, 63, (-3006));
      studentData0.getInstitutionalEnrollments();
      assertEquals(", country='", studentData0.getSecondarySchool());
      assertEquals("log4j called after unloading, see http://logging.apache.org/log4j/1.2/faq.html#unload.", studentData0.getEmail());
      assertEquals(1, studentData0.getMandatoryHours());
      assertEquals("", studentData0.getGender());
      assertEquals((-1132481772), studentData0.getCompletedCredits());
      assertEquals("], Rendered class: [", studentData0.getMaritalStatus());
      assertEquals("CharMatcher.javaIsoControl()", studentData0.getPlaceOfBirth());
      assertEquals("Curriculum{courseCode='", studentData0.getDisabilities());
      assertEquals("JnO5LC$/Tr:i", studentData0.getRace());
      assertEquals("yXwQi^=UC56sfUK1r", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getName());
      assertEquals((-1132481822), studentData0.getComplementaryHours());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getCountry());
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals("yXwQi^=UC56sfUK1r", studentData0.getBirthDate());
      assertEquals("XLn\"oAiZ0.|bNn|5{Vo", studentData0.getCourseCode());
      assertEquals("], Rendered class: [", studentData0.getNationality());
      assertEquals((-3006), studentData0.getOptionalHours());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setIea(1.0);
      double double0 = studentData0.getIea();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setIea((-1614825884));
      double double0 = studentData0.getIea();
      assertEquals((-1.614825884E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setGpa(1458.814);
      double double0 = studentData0.getGpa();
      assertEquals(1458.814, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setGpa((-1879.24194));
      double double0 = studentData0.getGpa();
      assertEquals((-1879.24194), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getGender();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "", "", ", enrolledCredits=", "csnlD]pUcT~", ".'vqtB W$", "csnlD]pUcT~", "Jau+UA5V(V", "org.apache.log4j.helpers.LogLog", "", 2469, (-1970497108), (-1796310091), (-1796310091), (-1796310091), 137, (-753.0393994549829), (-753.0393994549829), 1.0, (-1161267112), 2469, (-1970497108), 2469, 1424, (-883.99));
      String string0 = studentData0.getGender();
      assertEquals("S| *B'fkP", studentData0.getSecondarySchool());
      assertEquals(", enrolledCredits=", studentData0.getNationality());
      assertEquals(".'vqtB W$", studentData0.getPlaceOfBirth());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getAffirmativePolicy());
      assertEquals((-1796310091), studentData0.getOptionalHours());
      assertEquals(528160234, studentData0.getCompletedCredits());
      assertEquals("", studentData0.getMaritalStatus());
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals("csnlD]pUcT~", studentData0.getRace());
      assertEquals("org.apache.log4j.helpers.LogLog", studentData0.getCourseCode());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getBirthDate());
      assertEquals("", string0);
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getName());
      assertEquals("csnlD]pUcT~", studentData0.getCountry());
      assertEquals((-1796310091), studentData0.getComplementaryHours());
      assertEquals("S| *B'fkP", studentData0.getEmail());
      assertEquals(2469, studentData0.getMandatoryHours());
      assertEquals("Jau+UA5V(V", studentData0.getDisabilities());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getEnrolledCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "", "", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "", "AVe3nARd(\"0}wS)'a", "", "", "", 2469, 2469, (-1796310113), (-1796310113), (-1796310113), 2469, (-753.0393994549829), (-753.0393994549829), 1.0, 2469, 2469, 2469, 2469, (-1796310113), 2469);
      studentData0.getEnrolledCredits();
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getName());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getBirthDate());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getNationality());
      assertEquals("", studentData0.getPlaceOfBirth());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getEmail());
      assertEquals((-1796305175), studentData0.getCompletedCredits());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getCountry());
      assertEquals((-1796310113), studentData0.getOptionalHours());
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals("", studentData0.getDisabilities());
      assertEquals("", studentData0.getMaritalStatus());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getAffirmativePolicy());
      assertEquals("", studentData0.getCourseCode());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getRace());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getSecondarySchoolGraduationYear());
      assertEquals((-1796310113), studentData0.getComplementaryHours());
      assertEquals(2469, studentData0.getMandatoryHours());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVS3nARd(\"0\"wS)'a", "AVS3nARd(\"0\"wS)'a", "log<ger-ref", "9O 9vJGd^u", "c/lwN", "9O 9vJGd^u", "IS_NULL", ", complementaryHours=", "", "c/lwN", "GRADUADO", "AVe3nARd", "c/lwN", ", gender='", ", complementaryHours=", "org.apache.log4j.spi.LoggerFactory", "log<ger-ref", (-1795663565), (-1795663565), (-462), (-462), 959, 2363, (-1335.3005), 583.096322883, 5650.3612, (-1279), (-1727265948), (-719), (-462), (-406), 0.0);
      String string0 = studentData0.getEmail();
      assertEquals("IS_NULL", studentData0.getSecondarySchoolGraduationYear());
      assertEquals(", complementaryHours=", string0);
      assertEquals("9O 9vJGd^u", studentData0.getSecondarySchool());
      assertEquals("c/lwN", studentData0.getBirthDate());
      assertEquals(959, studentData0.getComplementaryHours());
      assertEquals((-1795663565), studentData0.getMandatoryHours());
      assertEquals("9O 9vJGd^u", studentData0.getAffirmativePolicy());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getName());
      assertEquals(", gender='", studentData0.getRace());
      assertEquals("org.apache.log4j.spi.LoggerFactory", studentData0.getCourseCode());
      assertEquals("GRADUADO", studentData0.getNationality());
      assertEquals("log<ger-ref", studentData0.getCurriculumCode());
      assertEquals((-462), studentData0.getOptionalHours());
      assertEquals((-1795661664), studentData0.getCompletedCredits());
      assertEquals("c/lwN", studentData0.getPlaceOfBirth());
      assertEquals("AVe3nARd", studentData0.getCountry());
      assertEquals("c/lwN", studentData0.getMaritalStatus());
      assertEquals(", complementaryHours=", studentData0.getDisabilities());
      assertEquals("", studentData0.getGender());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getDisabilities();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "", "", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "", "AVe3nARd(\"p}wH)'a", "", "", "", 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 1.0, 2500, 2500, 2500, 2500, 2500, 2500);
      String string0 = studentData0.getDisabilities();
      assertEquals("AVe3nARd(\"p}wH)'a", studentData0.getSecondarySchool());
      assertEquals("", studentData0.getCourseCode());
      assertEquals("", string0);
      assertEquals(2500, studentData0.getOptionalHours());
      assertEquals("AVe3nARd(\"p}wH)'a", studentData0.getName());
      assertEquals("AVe3nARd(\"p}wH)'a", studentData0.getRace());
      assertEquals("", studentData0.getPlaceOfBirth());
      assertEquals("", studentData0.getMaritalStatus());
      assertEquals("AVe3nARd(\"p}wH)'a", studentData0.getEmail());
      assertEquals("AVe3nARd(\"p}wH)'a", studentData0.getNationality());
      assertEquals("", studentData0.getGender());
      assertEquals("AVe3nARd(\"p}wH)'a", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("AVe3nARd(\"p}wH)'a", studentData0.getAffirmativePolicy());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setCurriculumCode("AVe3nARd(\"0}wS)'a");
      String string0 = studentData0.getCurriculumCode();
      assertEquals("AVe3nARd(\"0}wS)'a", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "", "", ", enrolledCredits=", "csnlD]pUcT~", ".'vqtB W$", "csnlD]pUcT~", "Jau+UA5V(V", "org.apache.log4j.helpers.LogLog", "", 2469, (-1970497108), (-1796310091), (-1796310091), (-1796310091), 137, (-753.0393994549829), (-753.0393994549829), 1.0, (-1161267112), (-3243), (-1970497108), (-3243), 1424, (-883.99));
      String string0 = studentData0.getCurriculumCode();
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getName());
      assertEquals("", string0);
      assertEquals("", studentData0.getMaritalStatus());
      assertEquals("org.apache.log4j.helpers.LogLog", studentData0.getCourseCode());
      assertEquals(528160234, studentData0.getCompletedCredits());
      assertEquals("csnlD]pUcT~", studentData0.getCountry());
      assertEquals((-1796310091), studentData0.getComplementaryHours());
      assertEquals((-1796310091), studentData0.getOptionalHours());
      assertEquals("S| *B'fkP", studentData0.getSecondarySchool());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getBirthDate());
      assertEquals("S| *B'fkP", studentData0.getEmail());
      assertEquals("Jau+UA5V(V", studentData0.getDisabilities());
      assertEquals(2469, studentData0.getMandatoryHours());
      assertEquals(", enrolledCredits=", studentData0.getNationality());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getAffirmativePolicy());
      assertEquals("csnlD]pUcT~", studentData0.getRace());
      assertEquals(".'vqtB W$", studentData0.getPlaceOfBirth());
      assertEquals("", studentData0.getGender());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setCourseCode(", secondarySchool='");
      String string0 = studentData0.getCourseCode();
      assertEquals(", secondarySchool='", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setCourseCode("");
      String string0 = studentData0.getCourseCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getCountry();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StudentData studentData0 = new StudentData("BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", (String) null, (String) null, "org.apa)he.log4j.ProvisionNode", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", (String) null, (String) null, "must have equal funnels %", "-S2591D4)h|H3G=6s", "BloomFilters must have equal funnels (%s != %s)", 31, 31, (-566), (-1847), (-1847), (-1847), (-566), 31, (-566), (-1847), (-566), 31, (-1847), (-1847), (-566));
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getCountry());
      
      studentData0.setCountry("");
      studentData0.getCountry();
      assertEquals("org.apa)he.log4j.ProvisionNode", studentData0.getSecondarySchoolGraduationYear());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setCompletedTerms(1540);
      int int0 = studentData0.getCompletedTerms();
      assertEquals(1540, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setCompletedTerms((-701));
      int int0 = studentData0.getCompletedTerms();
      assertEquals((-701), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StudentData studentData0 = new StudentData(", optionalHours=", "AVe3nARd(\"0}wS)'a", ", optionalHours=", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", (String) null, (String) null, (String) null, ")tzoS;", ")tzoS;", "6]3q", "AVe3nARd(\"0}wS)'a", (String) null, (String) null, (String) null, (String) null, ", secondarySchoolGraduationYear='", (-36), 3424, (-36), (-9), 7, 3424, 3424, 15.581255417983183, (-36), (-36), 2591, (-9), 2591, 3424, 0.0);
      int int0 = studentData0.getCompletedCredits();
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getCountry());
      assertEquals(6839, int0);
      assertEquals((-36), studentData0.getMandatoryHours());
      assertEquals(")tzoS;", studentData0.getGender());
      assertEquals(")tzoS;", studentData0.getMaritalStatus());
      assertEquals(", optionalHours=", studentData0.getName());
      assertEquals(", secondarySchoolGraduationYear='", studentData0.getCurriculumCode());
      assertEquals(7, studentData0.getComplementaryHours());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getAffirmativePolicy());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getBirthDate());
      assertEquals((-36), studentData0.getOptionalHours());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setMandatoryCredits((-1845882420));
      int int0 = studentData0.getCompletedCredits();
      assertEquals((-1845882420), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setComplementaryHours((-247698345));
      int int0 = studentData0.getComplementaryHours();
      assertEquals((-247698345), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getComplementaryCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "", "", ", enrolledCredits=", "csnlD]pUcT~", ".'vqtB W$", "csnlD]pUcT~", "Jau+UA5V(V", "org.apache.log4j.helpers.LogLog", "", 2469, (-1970497108), (-1796310091), (-1796310091), (-1796310091), 137, (-739.9621), (-739.9621), 1.0, (-1161267112), (-3243), (-1970497108), (-3243), 1424, (-883.99));
      int int0 = studentData0.getComplementaryCredits();
      assertEquals(528160234, studentData0.getCompletedCredits());
      assertEquals("Jau+UA5V(V", studentData0.getDisabilities());
      assertEquals((-1796310091), studentData0.getOptionalHours());
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals("S| *B'fkP", studentData0.getEmail());
      assertEquals("org.apache.log4j.helpers.LogLog", studentData0.getCourseCode());
      assertEquals("csnlD]pUcT~", studentData0.getCountry());
      assertEquals("", studentData0.getGender());
      assertEquals("", studentData0.getMaritalStatus());
      assertEquals("csnlD]pUcT~", studentData0.getRace());
      assertEquals(2469, studentData0.getMandatoryHours());
      assertEquals("S| *B'fkP", studentData0.getSecondarySchool());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getBirthDate());
      assertEquals(", enrolledCredits=", studentData0.getNationality());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getName());
      assertEquals((-1796310091), studentData0.getComplementaryHours());
      assertEquals(137, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getBirthDate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAttemptedCredits(9);
      int int0 = studentData0.getAttemptedCredits();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAttemptedCredits((-1102));
      int int0 = studentData0.getAttemptedCredits();
      assertEquals((-1102), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getAffirmativePolicy();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StudentData studentData0 = new StudentData("k)c5t(i$NuO.;y$1jd", "AVe3nARd(\"0}wS)'a", "Parsed \"", "..", "Parsed \"", "k)c5t(i$NuO.;y$1jd", "(Run'Ft||7IT$:(", ", iea=", ", complementaryCredits=", "AVe3nARd(\"0}wS)'a", ", iea=", "..", "K_/s]N|*;{Cl", "@l^>%#pqJo0w", ", termsCount=", "RdLJ+[7u47Y6Z", "o", 50000, 50000, 50000, 50000, (-860), 1191, 50000, 1191, (-860), 2244, (-860), 1191, (-1733670227), (-860), 362.0);
      String string0 = studentData0.getAffirmativePolicy();
      assertEquals("..", studentData0.getCountry());
      assertEquals(", complementaryCredits=", studentData0.getGender());
      assertEquals("Parsed \"", studentData0.getBirthDate());
      assertEquals("k)c5t(i$NuO.;y$1jd", studentData0.getName());
      assertEquals("RdLJ+[7u47Y6Z", studentData0.getCourseCode());
      assertEquals("(Run'Ft||7IT$:(", studentData0.getSecondarySchoolGraduationYear());
      assertEquals(50000, studentData0.getMandatoryHours());
      assertEquals("..", string0);
      assertEquals("K_/s]N|*;{Cl", studentData0.getPlaceOfBirth());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getMaritalStatus());
      assertEquals("@l^>%#pqJo0w", studentData0.getRace());
      assertEquals(", iea=", studentData0.getNationality());
      assertEquals(", iea=", studentData0.getEmail());
      assertEquals(50000, studentData0.getOptionalHours());
      assertEquals(", termsCount=", studentData0.getDisabilities());
      assertEquals((-860), studentData0.getComplementaryHours());
      assertEquals("o", studentData0.getCurriculumCode());
      assertEquals("k)c5t(i$NuO.;y$1jd", studentData0.getSecondarySchool());
      assertEquals(50000, studentData0.getOptionalCredits());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAdmissionTerm("");
      String string0 = studentData0.getAdmissionTerm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAdmissionTerm("vKsF");
      String string0 = studentData0.getAdmissionStr();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAdmissionTerm("");
      studentData0.setAdmissionStr("");
      String string0 = studentData0.getAdmissionStr();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      double double0 = studentData0.getAdmissionGrade();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAdmissionGrade(1.0);
      double double0 = studentData0.getAdmissionGrade();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "", "", ", enrolledCredits=", "csnlD]pUcT~", ".'vqtB W$", "csnlD]pUcT~", "Jau+UA5V(V", "org.apache.log4j.helpers.LogLog", "", 2469, (-1970497108), (-1796310091), (-1796310091), (-1796310091), 137, (-753.0393994549829), (-753.0393994549829), 1.0, (-1161267112), 2469, (-1970497108), 2469, 1424, (-883.99));
      assertEquals(2469, studentData0.getMandatoryHours());
      
      studentData0.setMandatoryHours((-1161267112));
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      studentData0.createStudent(nationalIdRegistrationKey0, (Curriculum) null);
      assertEquals(528160234, studentData0.getCompletedCredits());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "", "", ", enrolledCredits=", "csnlD]pUcT~", ".'vqtB W$", "csnlD]pUcT~", "Jau+UA5V(V", "org.apache.log4j.helpers.LogLog", "", 2469, (-1970497108), (-1796310091), (-1796310091), (-1796310091), 137, (-753.0393994549829), (-753.0393994549829), (-753.0393994549829), (-1161267112), 2469, (-1970497108), 2469, (-1161267112), (-883.99));
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      Student student0 = studentData0.createStudent(nationalIdRegistrationKey0, (Curriculum) null);
      assertEquals("}wS)'a", student0.getAdmissionTerm());
      assertEquals((-1796310091), student0.getComplementaryHours());
      assertEquals("org.apache.log4j.helpers.LogLog", student0.getCourseCode());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("AVe3nARd", student0.getStatusStr());
      assertEquals((-883.99), student0.getAdmissionGrade(), 0.01);
      assertEquals(2469, student0.getMobilityTerms());
      assertEquals(528160234, student0.getCompletedCredits());
      assertEquals("AVe3nARd(\"", student0.getAdmissionStr());
      assertEquals("", student0.getGender());
      assertEquals(".'vqtB W$", student0.getPlaceOfBirth());
      assertEquals((-1970497108), student0.getInstitutionalEnrollments());
      assertEquals((-753.0393994549829), student0.getGpa(), 0.01);
      assertEquals("0}wS'a", student0.getStatusTerm());
      assertEquals("AVe3nARd(\"0}wS)'a", student0.getName());
      assertEquals((-1796310091), student0.getOptionalHours());
      assertEquals("csnlD]pUcT~", student0.getRace());
      assertEquals(2469, student0.getSuspendedTerms());
      assertEquals("csnlD]pUcT~", student0.getCountry());
      assertEquals(", enrolledCredits=", student0.getNationality());
      assertEquals("S| *B'fkP", student0.getEmail());
      assertEquals("S| *B'fkP", student0.getSecondarySchool());
      assertEquals("Jau+UA5V(V", student0.getDisabilities());
      assertEquals("AVe3nARd(\"0}wS)'a", student0.getBirthDate());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"p}RwH)'a", "AVe3nARd(\"p}RwH)'a", "AVe3nARd(\"p}RwH)'a", "AVe3nARd(\"p}RwH)'a", "AVe3nARd(\"p}RwH)'a", "AVe3nARd(\"p}RwH)'a", "AVe3nARd(\"p}RwH)'a", "AVe3nARd(\"p}RwH)'a", "AVe3nARd(\"p}RwH)'a", "AVe3nARd(\"p}RwH)'a", "AVe3nARd(\"p}RwH)'a", "AVe3nARd(\"p}RwH)'a", "AVe3nARd(\"p}RwH)'a", "AVe3nARd(\"p}RwH)'a", "AVe3nARd(\"p}RwH)'a", "AVe3nARd(\"p}RwH)'a", "AVe3nARd(\"p}RwH)'a", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      Student student0 = studentData0.createStudent(nationalIdRegistrationKey0, (Curriculum) null);
      assertEquals("}RwH'a", student0.getStatusTerm());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("AVe3nARd(\"p", student0.getAdmissionStr());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("AVe3nARd\"", student0.getStatusStr());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals("RwH)'a", student0.getAdmissionTerm());
      assertEquals(0, student0.getMandatoryCredits());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "", "", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "", "AVe3nARd(\"0}wS)'a", "", "", "", 2469, 2469, (-1796310113), (-1796310113), (-1796310113), 2469, (-753.0393994549829), (-753.0393994549829), 1.0, 2469, 2469, 2469, 2469, (-1796310113), 2469);
      studentData0.setAttemptedCredits(2469);
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      studentData0.createStudent(nationalIdRegistrationKey0, (Curriculum) null);
      assertEquals(2469, studentData0.getAttemptedCredits());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "", "", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "", "AVe3nARd(\"p}wH)'a", "", "", "", 2469, 2469, 2469, 2469, 2469, 2469, 2469, 2469, 1.0, 2469, 2469, 2469, 2469, 2469, 2469);
      studentData0.setAttemptedCredits((-2730));
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      studentData0.createStudent(nationalIdRegistrationKey0, (Curriculum) null);
      assertEquals((-2730), studentData0.getAttemptedCredits());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StudentData studentData0 = new StudentData("BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", (String) null, (String) null, "org.apache.log4j.ProvisionNode", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "] props: ", "\" was already parsed.", "] props: ", (String) null, "@\" $YiQh@=H", "must have equal funnels %", "-S2591D4)h|H3G=6s", "\" was already parsed.", 31, 31, (-566), (-1794), 2010, (-1794), 0.0, 0.0, 0.0, (-1794), (-566), 31, (-1794), 2010, 0.0);
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Curriculum curriculum0 = new Curriculum(", nationality='", "'!EG#c_`vV", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 2010, 31, 92, (-2210), (-1984136894), (-1984136894), 63, 31, 2010, set0, set0, set0, set0, set0);
      Student student0 = new Student("\" was already parsed.", "lYf`msSp&YS*2", "0\u0660\u06F0\u07C0\u0966\u09E6\u0A66\u0AE6\u0B66\u0BE6\u0C66\u0CE6\u0D66\u0DE6\u0E50\u0ED0\u0F20\u1040\u1090\u17E0\u1810\u1946\u19D0\u1A80\u1A90\u1B50\u1BB0\u1C40\u1C50\uA620\uA8D0\uA900\uA9D0\uA9F0\uAA50\uABF0\uFF10", "lYf`msSp&YS*2", "", "&\"<AID^vE3dR0`9e- ", "c,}q|n$==1", "must have equal funnels %", "N2AfoZ%vLm", ", gender='", ", mandatoryHours=", "@\" $YiQh@=H", studentStatus0, "c,}q|n$==1", "-S2591D4)h|H3G=6s", "R$BTWP@zJ}$$^;Uz", "org.apache.log4j.ProvisionNode", "RuPuBd1BD7I7~,Z)9+P", "must have equal funnels %", "] props: ", "W:", "", curriculum0, (-1935864034), 2352, 92, (-1935864034), (-1984136894), 2352, (-1935864034), (-1984136894), 63, (-2224.5818259), (-1794), 63, 374, (-1794), (-3246), 0.03);
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey(student0);
      Student student1 = studentData0.createStudent(nationalIdRegistrationKey0, curriculum0);
      assertEquals("BloomFilters must have equal funnels (%s != %s)", student1.getAffirmativePolicy());
      assertEquals("org.apache.log4j.ProvisionNode", student1.getSecondarySchoolGraduationYear());
      assertEquals("must have equal funnels %", student1.getDisabilities());
      assertEquals(2010, student1.getComplementaryHours());
      assertEquals("must have equal funnels %", student1.getStatusStr());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", student1.getGender());
      assertEquals(0.0, student1.getIea(), 0.01);
      assertEquals("] props: ", student1.getCountry());
      assertEquals("@\" $YiQh@=H", student1.getRace());
      assertEquals("] props: ", student1.getMaritalStatus());
      assertEquals("-S2591D4)h|H3G=6s", student1.getCourseCode());
      assertEquals((-566), student1.getOptionalHours());
      assertEquals("!= %s)", student1.getAdmissionTerm());
      assertEquals((-3557), student1.getCompletedCredits());
      assertEquals((-1794), student1.getMobilityTerms());
      assertEquals("\" was already parsed.", student1.getNationality());
      assertEquals("BloomFilters must have equal funnels (%s", student1.getAdmissionStr());
      assertEquals(31, student1.getMandatoryHours());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", student1.getEmail());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setStatusStr(",Qg;2=");
      // Undeclared exception!
      try { 
        studentData0.isDropout();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setStatusStr("RlI9,.tpD");
      // Undeclared exception!
      try { 
        studentData0.isActive();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setStatusStr("7ss L%E_I8");
      // Undeclared exception!
      try { 
        studentData0.getStatusTerm();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setStatusStr(">tGA");
      // Undeclared exception!
      try { 
        studentData0.getStatusStr();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setStatusStr("");
      // Undeclared exception!
      try { 
        studentData0.getStatus();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAdmissionStr("");
      // Undeclared exception!
      try { 
        studentData0.getAdmissionTerm();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey("N_DZw;}", "N_DZw;}");
      studentData0.setStatusStr("Au,`");
      // Undeclared exception!
      try { 
        studentData0.createStudent(nationalIdRegistrationKey0, (Curriculum) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      // Undeclared exception!
      try { 
        studentData0.createStudent(nationalIdRegistrationKey0, (Curriculum) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StudentData studentData0 = null;
      try {
        studentData0 = new StudentData("b*S", "AVe3nARd(\"0}wS)'a", "b*S", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", (String) null, (String) null, (String) null, ")toS;", ")toS;", "6]3q", "AVe3nARd(\"0}wS)'a", (String) null, (String) null, (String) null, (String) null, ", secondarySchoolGraduationYear='", 0, 3434, 0, 0, 7, 3434, 3434, 0.0, 0, 0, 2591, 0, 2591, 3434, 0.0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StudentData studentData0 = null;
      try {
        studentData0 = new StudentData("bp?j.9EW&zH-X?ks|i'", (String) null, "]*N+C[DV[4JiNKob{a@", (String) null, "", "bVta", "Topk#8j  ", (String) null, "7F/9/", "bp?j.9EW&zH-X?ks|i'", "bp?j.9EW&zH-X?ks|i'", "@", "bp?j.9EW&zH-X?ks|i'", "uQ1-", "@", "T/b)Iv", "", (-1596), 0, 0, (-701), (-701), (-701), (-701), (-701), (-1257.54902991), (-1596), 987, (-162), 4749, (-701), 688.94);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      RepositorySelector repositorySelector0 = mock(RepositorySelector.class, new ViolatedAssumptionAnswer());
      doReturn((LoggerRepository) null).when(repositorySelector0).getLoggerRepository();
      LogManager.setRepositorySelector(repositorySelector0, repositorySelector0);
      StudentData studentData0 = null;
      try {
        studentData0 = new StudentData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.log4j.LogManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVS3nARd(\"0\"wS)'a", "AVS3nARd(\"0\"wS)'a", "AVS3nARd(\"0\"wS)'a", "AVS3nARd(\"0\"wS)'a", "com.google.common.base.Predicates$OrPredicate", "", "AVS3nARd(\"0\"wS)'a", "", "", "com.google.common.base.CharMatcher$ForPredicate", "", "", "AVS3nARd(\"0\"wS)'a", "", "AVS3nARd(\"0\"wS)'a", "", "", 1810, 4025, 4025, 4025, 1810, 423, (-1253.5360329), 4025, 423, 1810, 4025, 1810, 4025, 2226, 230.344);
      String string0 = studentData0.getAdmissionTerm();
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getDisabilities());
      assertEquals("", studentData0.getCountry());
      assertEquals("", studentData0.getEmail());
      assertEquals("", studentData0.getNationality());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getSecondarySchoolGraduationYear());
      assertEquals(1810, studentData0.getComplementaryHours());
      assertEquals("", studentData0.getRace());
      assertEquals(4025, studentData0.getOptionalHours());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getAffirmativePolicy());
      assertEquals("\"wS)'a", string0);
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals(1810, studentData0.getMandatoryHours());
      assertEquals("", studentData0.getGender());
      assertEquals(8473, studentData0.getCompletedCredits());
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals("com.google.common.base.Predicates$OrPredicate", studentData0.getBirthDate());
      assertEquals("com.google.common.base.CharMatcher$ForPredicate", studentData0.getMaritalStatus());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getName());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getPlaceOfBirth());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVS3nARd(\"0\"wS)'a", "AVS3nARd(\"0\"wS)'a", "AVS3nARd(\"0\"wS)'a", "AVS3nARd(\"0\"wS)'a", "com.google.common.base.Predicates$OrPredicate", "", "AVS3nARd(\"0\"wS)'a", "", "", "com.google.common.base.CharMatcher$ForPredicate", "", "", "AVS3nARd(\"0\"wS)'a", "", "AVS3nARd(\"0\"wS)'a", "", "", 1810, 4025, 4025, 4025, 1810, 423, (-1253.5360329), 4025, 423, 1810, 4025, 1810, 4025, 2226, 230.344);
      String string0 = studentData0.getStatusTerm();
      assertEquals("", studentData0.getCourseCode());
      assertEquals("", studentData0.getNationality());
      assertEquals("", studentData0.getEmail());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getName());
      assertEquals(1810, studentData0.getMandatoryHours());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getAffirmativePolicy());
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals("com.google.common.base.Predicates$OrPredicate", studentData0.getBirthDate());
      assertEquals("com.google.common.base.CharMatcher$ForPredicate", studentData0.getMaritalStatus());
      assertEquals(4025, studentData0.getOptionalHours());
      assertEquals(8473, studentData0.getCompletedCredits());
      assertEquals("", studentData0.getGender());
      assertEquals("0\"wS'a", string0);
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getPlaceOfBirth());
      assertEquals("", studentData0.getCountry());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getDisabilities());
      assertEquals(1810, studentData0.getComplementaryHours());
      assertEquals("", studentData0.getRace());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVS3nARd(\"0\"wS)'a", "AVS3nARd(\"0\"wS)'a", "AVS3nARd(\"0\"wS)'a", "AVS3nARd(\"0\"wS)'a", "com.google.common.base.Predicates$OrPredicate", "", "AVS3nARd(\"0\"wS)'a", "", "", "com.google.common.base.CharMatcher$ForPredicate", "", "", "AVS3nARd(\"0\"wS)'a", "", "AVS3nARd(\"0\"wS)'a", "", "", 1810, 4025, 4025, 4025, 1810, 423, (-1253.5360329), 4025, 423, 1810, 4025, 1810, 4025, 2226, 230.344);
      StudentStatus studentStatus0 = studentData0.getStatus();
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getName());
      assertEquals("", studentData0.getCourseCode());
      assertEquals("", studentData0.getEmail());
      assertEquals("", studentData0.getNationality());
      assertEquals(8473, studentData0.getCompletedCredits());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getDisabilities());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getPlaceOfBirth());
      assertEquals(1810, studentData0.getComplementaryHours());
      assertEquals(StudentStatus.DROPOUT, studentStatus0);
      assertEquals("com.google.common.base.CharMatcher$ForPredicate", studentData0.getMaritalStatus());
      assertEquals("", studentData0.getRace());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getAffirmativePolicy());
      assertEquals(4025, studentData0.getOptionalHours());
      assertEquals("", studentData0.getCountry());
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals(1810, studentData0.getMandatoryHours());
      assertEquals("com.google.common.base.Predicates$OrPredicate", studentData0.getBirthDate());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getSecondarySchoolGraduationYear());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "", "", ", enrolledCredits=", "csnlD]pUcT~", ".'vqtB W$", "csnlD]pUcT~", "Jau+UA5V(V", "org.apache.log4j.helpers.LogLog", "", 2469, (-1970497108), (-1796310091), (-1796310091), (-1796310091), 137, (-753.0393994549829), (-753.0393994549829), 1.0, (-1161267112), 2469, (-1970497108), 2469, 1424, (-883.99));
      String string0 = studentData0.getAdmissionStr();
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getAffirmativePolicy());
      assertEquals(2469, studentData0.getMandatoryHours());
      assertEquals("csnlD]pUcT~", studentData0.getRace());
      assertEquals(", enrolledCredits=", studentData0.getNationality());
      assertEquals(".'vqtB W$", studentData0.getPlaceOfBirth());
      assertEquals("", studentData0.getGender());
      assertEquals("AVe3nARd(\"", string0);
      assertEquals((-1796310091), studentData0.getComplementaryHours());
      assertEquals("", studentData0.getMaritalStatus());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getName());
      assertEquals("S| *B'fkP", studentData0.getEmail());
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals((-1796310091), studentData0.getOptionalHours());
      assertEquals(528160234, studentData0.getCompletedCredits());
      assertEquals("org.apache.log4j.helpers.LogLog", studentData0.getCourseCode());
      assertEquals("csnlD]pUcT~", studentData0.getCountry());
      assertEquals("Jau+UA5V(V", studentData0.getDisabilities());
      assertEquals("S| *B'fkP", studentData0.getSecondarySchool());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getBirthDate());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getSecondarySchoolGraduationYear());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVS3nARd(\"0\"wS)'a", "AVS3nARd(\"0\"wS)'a", "AVS3nARd(\"0\"wS)'a", "AVS3nARd(\"0\"wS)'a", "com.google.common.base.Predicates$OrPredicate", "", "AVS3nARd(\"0\"wS)'a", "", "", "com.google.common.base.CharMatcher$ForPredicate", "", "", "AVS3nARd(\"0\"wS)'a", "", "AVS3nARd(\"0\"wS)'a", "", "", 1810, 4025, 4025, 4025, 1810, 423, (-1253.5360329), 4025, 423, 1810, 4025, 1810, 4025, 2226, 230.344);
      String string0 = studentData0.getStatusStr();
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getDisabilities());
      assertEquals("", studentData0.getCountry());
      assertEquals(1810, studentData0.getMandatoryHours());
      assertEquals(1810, studentData0.getComplementaryHours());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("", studentData0.getEmail());
      assertEquals("", studentData0.getNationality());
      assertEquals("", studentData0.getRace());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getPlaceOfBirth());
      assertEquals(8473, studentData0.getCompletedCredits());
      assertEquals("com.google.common.base.CharMatcher$ForPredicate", studentData0.getMaritalStatus());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getName());
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals("com.google.common.base.Predicates$OrPredicate", studentData0.getBirthDate());
      assertEquals("AVS3nARd", string0);
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getAffirmativePolicy());
      assertEquals(4025, studentData0.getOptionalHours());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getCourseCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getOptionalCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StudentData studentData0 = new StudentData("", "Ativo", ", admissionGrade=", "5xI}we=^TP;Mu", "5xI}we=^TP;Mu", "", "Ativo", "PoxA", ", admissionGrade=", "eOT\"6[&nJCc[g/(", "t3qdds>X%4k\"", "com.google.common.base.CharM=tcher$Any", "t3qdds>X%4k\"", (String) null, "o;O([=d.1aRUvb n", ", mandatoryHours=", "5v3Ag}MH9XMI,RD'M", (-2611), (-2611), (-2611), (-2611), (-2611), (-2611), 1011.3679109241004, (-812.194775), 0.0, (-4418), (-4418), 1316, 14, 14, 0.0);
      String string0 = studentData0.getDisabilities();
      assertEquals((-2611), studentData0.getComplementaryHours());
      assertNotNull(string0);
      assertEquals(", admissionGrade=", studentData0.getGender());
      assertEquals("", studentData0.getName());
      assertEquals("PoxA", studentData0.getEmail());
      assertEquals("t3qdds>X%4k\"", studentData0.getPlaceOfBirth());
      assertEquals((-2611), studentData0.getOptionalHours());
      assertEquals((-7833), studentData0.getCompletedCredits());
      assertEquals("Ativo", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("5v3Ag}MH9XMI,RD'M", studentData0.getCurriculumCode());
      assertEquals("o;O([=d.1aRUvb n", string0);
      assertEquals(", mandatoryHours=", studentData0.getCourseCode());
      assertEquals("5xI}we=^TP;Mu", studentData0.getAffirmativePolicy());
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals("com.google.common.base.CharM=tcher$Any", studentData0.getCountry());
      assertEquals("5xI}we=^TP;Mu", studentData0.getBirthDate());
      assertEquals("t3qdds>X%4k\"", studentData0.getNationality());
      assertEquals((-2611), studentData0.getMandatoryHours());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getNationality();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getSuspendedTerms();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getRace();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getSecondarySchoolGraduationYear();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "", "", ", enrolledCredits=", "csnlD]pUcT~", ".'vqtB W$", "csnlD]pUcT~", "Jau+UA5V(V", "org.apache.log4j.helpers.LogLog", "", 2469, (-1970497108), (-1796310091), (-1796310091), (-1796310091), 137, (-753.0393994549829), (-753.0393994549829), 1.0, (-1161267112), (-3243), (-1970497108), (-3243), 1424, (-883.99));
      studentData0.getEnrolledCredits();
      assertEquals(528160234, studentData0.getCompletedCredits());
      assertEquals("", studentData0.getMaritalStatus());
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals("S| *B'fkP", studentData0.getEmail());
      assertEquals("Jau+UA5V(V", studentData0.getDisabilities());
      assertEquals(".'vqtB W$", studentData0.getPlaceOfBirth());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getName());
      assertEquals((-1796310091), studentData0.getComplementaryHours());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("csnlD]pUcT~", studentData0.getRace());
      assertEquals("", studentData0.getGender());
      assertEquals(2469, studentData0.getMandatoryHours());
      assertEquals("org.apache.log4j.helpers.LogLog", studentData0.getCourseCode());
      assertEquals("S| *B'fkP", studentData0.getSecondarySchool());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getBirthDate());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getAffirmativePolicy());
      assertEquals("csnlD]pUcT~", studentData0.getCountry());
      assertEquals((-1796310091), studentData0.getOptionalHours());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getOptionalHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getSecondarySchool();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StudentData studentData0 = new StudentData("BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", (String) null, (String) null, "org.apache.log4j.ProvisionNode", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "] props: ", "\" was already parsed.", "] props: ", (String) null, "@\" $YiQh@=H", "must have equal funnels %", "-S2591D4)h|H3G=6s", "\" was already parsed.", 31, 31, (-566), (-1794), 2010, (-1794), 0.0, 0.0, 0.0, (-1794), (-566), 31, (-1794), 2010, 0.0);
      studentData0.getMobilityTerms();
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getAffirmativePolicy());
      assertEquals(31, studentData0.getMandatoryHours());
      assertEquals((-3557), studentData0.getCompletedCredits());
      assertEquals(2010, studentData0.getComplementaryHours());
      assertEquals("must have equal funnels %", studentData0.getDisabilities());
      assertEquals("-S2591D4)h|H3G=6s", studentData0.getCourseCode());
      assertEquals("\" was already parsed.", studentData0.getNationality());
      assertEquals((-566), studentData0.getOptionalHours());
      assertEquals("\" was already parsed.", studentData0.getCurriculumCode());
      assertEquals("] props: ", studentData0.getCountry());
      assertEquals("@\" $YiQh@=H", studentData0.getRace());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getGender());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getName());
      assertEquals("org.apache.log4j.ProvisionNode", studentData0.getSecondarySchoolGraduationYear());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getCurriculumCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "Rv+$!RqxP^RT", "", ", mandatoryHours=", "", "q;j#ME4`A", ", gender='", "", ", gender='", "Rv+$!RqxP^RT", ":c", "AVe3nARd(\"0}wS)'a", "", "+jm?kWX", ", gender='", "8b$", 703, 32, 32, (-384), 32, (-1163897935), 4.9E-324, 0.0, 0.0, 6, (-1778), (-1163897935), 461845907, (-1163897935), 4.9E-324);
      String string0 = studentData0.getAffirmativePolicy();
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getName());
      assertEquals("", studentData0.getRace());
      assertEquals(", gender='", studentData0.getCourseCode());
      assertEquals("", string0);
      assertEquals("Rv+$!RqxP^RT", studentData0.getNationality());
      assertEquals(703, studentData0.getMandatoryHours());
      assertEquals("+jm?kWX", studentData0.getDisabilities());
      assertEquals(":c", studentData0.getCountry());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getPlaceOfBirth());
      assertEquals(", gender='", studentData0.getMaritalStatus());
      assertEquals("8b$", studentData0.getCurriculumCode());
      assertEquals(32, studentData0.getComplementaryHours());
      assertEquals(", gender='", studentData0.getEmail());
      assertEquals("", studentData0.getGender());
      assertEquals((-1163898287), studentData0.getCompletedCredits());
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals("q;j#ME4`A", studentData0.getSecondarySchoolGraduationYear());
      assertEquals(", mandatoryHours=", studentData0.getBirthDate());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getComplementaryHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StudentData studentData0 = new StudentData("BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", (String) null, (String) null, "org.apache.log4j.ProvisionNode", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "] props: ", "\" was already parsed.", "] props: ", (String) null, "@\" $YiQh@=H", "must have equal funnels %", "-S2591D4)h|H3G=6s", "\" was already parsed.", 31, 31, (-566), (-1794), 2010, (-1794), 0.0, 0.0, 0.0, (-1794), (-566), 31, (-1794), 2010, 0.0);
      studentData0.getMc();
      assertEquals("must have equal funnels %", studentData0.getDisabilities());
      assertEquals((-3557), studentData0.getCompletedCredits());
      assertEquals(2010, studentData0.getComplementaryHours());
      assertEquals(31, studentData0.getMandatoryHours());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getName());
      assertEquals("org.apache.log4j.ProvisionNode", studentData0.getSecondarySchoolGraduationYear());
      assertEquals((-566), studentData0.getOptionalHours());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getGender());
      assertEquals("\" was already parsed.", studentData0.getCurriculumCode());
      assertEquals("-S2591D4)h|H3G=6s", studentData0.getCourseCode());
      assertEquals("@\" $YiQh@=H", studentData0.getRace());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getEmail());
      assertEquals("] props: ", studentData0.getCountry());
      assertEquals("\" was already parsed.", studentData0.getNationality());
      assertEquals("] props: ", studentData0.getMaritalStatus());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getAffirmativePolicy());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "", "", ",! enrolledCredits=", "csnlD]pUcT~", ".'vqtB W$", "csnlD]pUcT~", "Jau+UA5V(V", "org.apache.log4j.helpers.LogLog", "", 2469, (-1970497108), (-1796310091), (-1796310091), (-1796310091), 137, (-753.0393994549829), (-753.0393994549829), 1.0, (-1161267112), 2469, (-1970497108), 2469, 1424, (-883.99));
      String string0 = studentData0.getBirthDate();
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getName());
      assertEquals("", studentData0.getMaritalStatus());
      assertEquals("S| *B'fkP", studentData0.getEmail());
      assertEquals("", studentData0.getGender());
      assertEquals("Jau+UA5V(V", studentData0.getDisabilities());
      assertEquals("csnlD]pUcT~", studentData0.getRace());
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals(528160234, studentData0.getCompletedCredits());
      assertEquals("org.apache.log4j.helpers.LogLog", studentData0.getCourseCode());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getAffirmativePolicy());
      assertEquals("csnlD]pUcT~", studentData0.getCountry());
      assertEquals((-1796310091), studentData0.getOptionalHours());
      assertEquals("S| *B'fkP", studentData0.getSecondarySchool());
      assertEquals(2469, studentData0.getMandatoryHours());
      assertEquals(",! enrolledCredits=", studentData0.getNationality());
      assertEquals(".'vqtB W$", studentData0.getPlaceOfBirth());
      assertEquals("AVe3nARd(\"0}wS)'a", string0);
      assertEquals((-1796310091), studentData0.getComplementaryHours());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "", "", ", enrolledCredits=", "S| *B'fkP", ".'vqtB W$", "S| *B'fkP", "Jau+UA5V(V", "org.apache.log4j.helpers.LogLog", "", 2469, (-1970497108), (-1796310091), (-1796310091), (-1796310091), 137, (-753.0393994549829), (-753.0393994549829), 1.0, (-1161267112), 2469, (-1970497108), 2469, 1424, (-883.99));
      String string0 = studentData0.getMaritalStatus();
      assertEquals("S| *B'fkP", studentData0.getCountry());
      assertEquals("S| *B'fkP", studentData0.getEmail());
      assertEquals("", studentData0.getGender());
      assertEquals("Jau+UA5V(V", studentData0.getDisabilities());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getAffirmativePolicy());
      assertEquals(528160234, studentData0.getCompletedCredits());
      assertEquals("org.apache.log4j.helpers.LogLog", studentData0.getCourseCode());
      assertEquals("S| *B'fkP", studentData0.getSecondarySchool());
      assertEquals(", enrolledCredits=", studentData0.getNationality());
      assertEquals("", string0);
      assertEquals(2469, studentData0.getMandatoryHours());
      assertEquals("S| *B'fkP", studentData0.getRace());
      assertEquals(".'vqtB W$", studentData0.getPlaceOfBirth());
      assertEquals((-1796310091), studentData0.getComplementaryHours());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getName());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getCompletedTerms();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVS3nARd(\"0\"wS)'a", "AVS3nARd(\"0\"wS)'a", "AVS3nARd(\"0\"wS)'a", "AVS3nARd(\"0\"wS)'a", "com.google.common.base.Predicates$OrPredicate", "", "AVS3nARd(\"0\"wS)'a", "", "", "com.google.common.base.CharMatcher$ForPredicate", "", "", "AVS3nARd(\"0\"wS)'a", "", "AVS3nARd(\"0\"wS)'a", "", "", 1810, 4025, 4025, 4025, 1810, 423, (-1253.5360329), 4025, 423, 1810, 4025, 1810, 4025, 2226, 230.344);
      String string0 = studentData0.getEmail();
      assertEquals("", string0);
      assertEquals("", studentData0.getCourseCode());
      assertEquals("", studentData0.getNationality());
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals(1810, studentData0.getMandatoryHours());
      assertEquals("", studentData0.getCountry());
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals("com.google.common.base.Predicates$OrPredicate", studentData0.getBirthDate());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getAffirmativePolicy());
      assertEquals(4025, studentData0.getOptionalHours());
      assertEquals("", studentData0.getRace());
      assertEquals("", studentData0.getGender());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getDisabilities());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getPlaceOfBirth());
      assertEquals(1810, studentData0.getComplementaryHours());
      assertEquals(8473, studentData0.getCompletedCredits());
      assertEquals("com.google.common.base.CharMatcher$ForPredicate", studentData0.getMaritalStatus());
      assertEquals("AVS3nARd(\"0\"wS)'a", studentData0.getName());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "", "", ", enrolledCredits=", "csnlD]pUcT~", ".'vqtB W$", "csnlD]pUcT~", "Jau+UA5V(V", "org.apache.log4j.helpers.LogLog", "", 2469, (-1970497108), (-1796310091), (-1796310091), (-1796310091), 137, (-753.0393994549829), (-753.0393994549829), 1.0, (-1161267112), (-3243), (-1970497108), (-3243), 1424, (-883.99));
      studentData0.getAdmissionGrade();
      assertEquals("org.apache.log4j.helpers.LogLog", studentData0.getCourseCode());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getBirthDate());
      assertEquals("csnlD]pUcT~", studentData0.getCountry());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getName());
      assertEquals("", studentData0.getGender());
      assertEquals("S| *B'fkP", studentData0.getEmail());
      assertEquals("", studentData0.getMaritalStatus());
      assertEquals("csnlD]pUcT~", studentData0.getRace());
      assertEquals(528160234, studentData0.getCompletedCredits());
      assertEquals("Jau+UA5V(V", studentData0.getDisabilities());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getSecondarySchoolGraduationYear());
      assertEquals((-1796310091), studentData0.getOptionalHours());
      assertEquals(2469, studentData0.getMandatoryHours());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getAffirmativePolicy());
      assertEquals("S| *B'fkP", studentData0.getSecondarySchool());
      assertEquals(", enrolledCredits=", studentData0.getNationality());
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals((-1796310091), studentData0.getComplementaryHours());
      assertEquals(".'vqtB W$", studentData0.getPlaceOfBirth());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "", "", ", enrolledCredits=", "csnlDP]pUcT~", ".'vqtB W$", "csnlDP]pUcT~", "Jau+UA5V(V", "org.apache.log4j.helpers.LogLog", "", 2469, (-1970497108), (-1796310091), (-1796310091), (-1796310091), 137, (-753.0393994549829), (-753.0393994549829), 1.0, (-1161267112), 2469, (-1970497108), 2469, 1424, (-883.99));
      String string0 = studentData0.getPlaceOfBirth();
      assertEquals("S| *B'fkP", studentData0.getSecondarySchool());
      assertEquals(", enrolledCredits=", studentData0.getNationality());
      assertEquals(2469, studentData0.getMandatoryHours());
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals((-1796310091), studentData0.getOptionalHours());
      assertEquals(".'vqtB W$", string0);
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getSecondarySchoolGraduationYear());
      assertEquals(528160234, studentData0.getCompletedCredits());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getAffirmativePolicy());
      assertEquals("org.apache.log4j.helpers.LogLog", studentData0.getCourseCode());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getBirthDate());
      assertEquals("csnlDP]pUcT~", studentData0.getCountry());
      assertEquals("", studentData0.getGender());
      assertEquals("S| *B'fkP", studentData0.getEmail());
      assertEquals("Jau+UA5V(V", studentData0.getDisabilities());
      assertEquals("csnlDP]pUcT~", studentData0.getRace());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getName());
      assertEquals((-1796310091), studentData0.getComplementaryHours());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      double double0 = studentData0.getGpa();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StudentData studentData0 = new StudentData("BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", (String) null, (String) null, "org.apache.log4j.ProvisionNode", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "\" was already parsed.", "BloomFilters must have equal funnels (%s != %s)", (String) null, "@\" $YiQh@=H", "must have equal funnels %", "-S2591D4)h|H3G=6s", "\" was already parsed.", 31, 31, (-566), 31, 2010, 31, 0.0, 0.0, 0.0, 31, (-566), 31, 31, 2010, (-566));
      studentData0.getIea();
      assertEquals(93, studentData0.getCompletedCredits());
      assertEquals("\" was already parsed.", studentData0.getNationality());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getAffirmativePolicy());
      assertEquals("-S2591D4)h|H3G=6s", studentData0.getCourseCode());
      assertEquals(2010, studentData0.getComplementaryHours());
      assertEquals("must have equal funnels %", studentData0.getDisabilities());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getEmail());
      assertEquals((-566), studentData0.getOptionalHours());
      assertEquals("\" was already parsed.", studentData0.getCurriculumCode());
      assertEquals("org.apache.log4j.ProvisionNode", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getMaritalStatus());
      assertEquals("@\" $YiQh@=H", studentData0.getRace());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "", "", ", enrolledCredits=", "csnlD]pUcT~", ".'vqtB W$", "csnlD]pUcT~", "Jau+UA5V(V", "org.apache.log4j.helpers.LogLog", "", 2469, (-1970497108), (-1796310091), (-1796310091), (-1796310091), 137, (-753.0393994549829), (-753.0393994549829), 1.0, (-1161267112), 2469, (-1970497108), 2469, 1424, (-883.99));
      int int0 = studentData0.getMandatoryCredits();
      assertEquals((-1796310091), studentData0.getComplementaryHours());
      assertEquals("S| *B'fkP", studentData0.getEmail());
      assertEquals("", studentData0.getMaritalStatus());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getBirthDate());
      assertEquals("Jau+UA5V(V", studentData0.getDisabilities());
      assertEquals(".'vqtB W$", studentData0.getPlaceOfBirth());
      assertEquals(", enrolledCredits=", studentData0.getNationality());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getName());
      assertEquals(2469, studentData0.getMandatoryHours());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("S| *B'fkP", studentData0.getSecondarySchool());
      assertEquals("", studentData0.getGender());
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals("csnlD]pUcT~", studentData0.getRace());
      assertEquals((-1796310091), studentData0.getOptionalHours());
      assertEquals("org.apache.log4j.helpers.LogLog", studentData0.getCourseCode());
      assertEquals(528160234, studentData0.getCompletedCredits());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getAffirmativePolicy());
      assertEquals((-1970497108), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StudentData studentData0 = new StudentData("BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", (String) null, (String) null, "org.apache.log4j.ProvisionNode", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "] props: ", "\" was already parsed.", "] props: ", (String) null, "@\" $YiQh@=H", "must have equal funnels %", "-S2591D4)h|H3G=6s", "\" was already parsed.", 31, 31, (-566), (-1794), 2010, (-1794), 0.0, 0.0, 0.0, (-1794), (-566), 31, (-1794), 2010, 0.0);
      String string0 = studentData0.getCountry();
      assertEquals("@\" $YiQh@=H", studentData0.getRace());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getName());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getEmail());
      assertEquals(2010, studentData0.getComplementaryHours());
      assertEquals((-566), studentData0.getOptionalHours());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getGender());
      assertEquals("] props: ", string0);
      assertEquals("\" was already parsed.", studentData0.getCurriculumCode());
      assertEquals("-S2591D4)h|H3G=6s", studentData0.getCourseCode());
      assertEquals("\" was already parsed.", studentData0.getNationality());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getAffirmativePolicy());
      assertEquals((-3557), studentData0.getCompletedCredits());
      assertEquals("must have equal funnels %", studentData0.getDisabilities());
      assertEquals("org.apache.log4j.ProvisionNode", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("] props: ", studentData0.getMaritalStatus());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StudentData studentData0 = new StudentData("BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", (String) null, (String) null, "org.apache.log4j.ProvisionNode", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "] props: ", "\" was already parsed.", "] props: ", (String) null, "@\" $YiQh@=H", "must have equal funnels %", "-S2591D4)h|H3G=6s", "\" was already parsed.", 31, 31, (-566), (-1794), 2010, (-1794), 0.0, 0.0, 0.0, (-1794), (-566), 31, (-1794), 2010, 0.0);
      int int0 = studentData0.getComplementaryCredits();
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getName());
      assertEquals("] props: ", studentData0.getCountry());
      assertEquals("@\" $YiQh@=H", studentData0.getRace());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getGender());
      assertEquals("\" was already parsed.", studentData0.getCurriculumCode());
      assertEquals(2010, studentData0.getComplementaryHours());
      assertEquals((-566), studentData0.getOptionalHours());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getAffirmativePolicy());
      assertEquals("\" was already parsed.", studentData0.getNationality());
      assertEquals(31, studentData0.getMandatoryHours());
      assertEquals("-S2591D4)h|H3G=6s", studentData0.getCourseCode());
      assertEquals((-3557), studentData0.getCompletedCredits());
      assertEquals("] props: ", studentData0.getMaritalStatus());
      assertEquals("org.apache.log4j.ProvisionNode", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("must have equal funnels %", studentData0.getDisabilities());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getEmail());
      assertEquals((-1794), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StudentData studentData0 = new StudentData("BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", (String) null, (String) null, "org.apache.log4j.ProvisionNode", "BloomFilters must have equal funnels (%s != %s)", "BloomFilters must have equal funnels (%s != %s)", "] props: ", "\" was already parsed.", "] props: ", (String) null, "@\" $YiQh@=H", "must have equal funnels %", "-S2591D4)h|H3G=6s", "\" was already parsed.", 31, 31, (-566), (-1794), 2010, (-1794), 0.0, 0.0, 0.0, (-1794), (-566), 31, (-1794), 2010, 0.0);
      String string0 = studentData0.getGender();
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getName());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getEmail());
      assertEquals((-566), studentData0.getOptionalHours());
      assertEquals("] props: ", studentData0.getMaritalStatus());
      assertEquals("\" was already parsed.", studentData0.getCurriculumCode());
      assertEquals("must have equal funnels %", studentData0.getDisabilities());
      assertEquals("@\" $YiQh@=H", studentData0.getRace());
      assertEquals("] props: ", studentData0.getCountry());
      assertEquals(31, studentData0.getMandatoryHours());
      assertEquals("\" was already parsed.", studentData0.getNationality());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", studentData0.getAffirmativePolicy());
      assertEquals("-S2591D4)h|H3G=6s", studentData0.getCourseCode());
      assertEquals(2010, studentData0.getComplementaryHours());
      assertEquals("BloomFilters must have equal funnels (%s != %s)", string0);
      assertEquals("org.apache.log4j.ProvisionNode", studentData0.getSecondarySchoolGraduationYear());
      assertEquals((-3557), studentData0.getCompletedCredits());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getMandatoryHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getAttemptedCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getInstitutionalEnrollments();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StudentData studentData0 = new StudentData("CANCELAMENTO P/ SOLICITACAO ALUNO", "Ativo", "CANCELAMENTO P/ SOLICITACAO ALUNO", "CANCELAMENTO P/ SOLICITACAO ALUNO", ", mandatoryHours=", "kb<?:&Pm3>8My*7i", ", mandatoryHours=", "Student{registration='", "Student{registration='", "org.apache.log4j.spi.ThrowableRenderer", "U{C`=~gG6RA2z{+", "CANCELAMENTO P/ SOLICITACAO ALUNO", "kb<?:&Pm3>8My*7i", "7ss L%E_I8", ", gender='", "`Z2B+S>!yI", " $eh|K:1Ur4&(zA", 2968, 2968, 2968, (-1936975327), 2968, 2897, 1032.509955, 2968, 2968, 2968, (-319), 2968, (-319), 1, (-1554.8596865));
      studentData0.isActive();
      assertEquals("Student{registration='", studentData0.getEmail());
      assertEquals("CANCELAMENTO P/ SOLICITACAO ALUNO", studentData0.getName());
      assertEquals("`Z2B+S>!yI", studentData0.getCourseCode());
      assertEquals("7ss L%E_I8", studentData0.getRace());
      assertEquals(2968, studentData0.getMandatoryHours());
      assertEquals("U{C`=~gG6RA2z{+", studentData0.getNationality());
      assertEquals("org.apache.log4j.spi.ThrowableRenderer", studentData0.getMaritalStatus());
      assertEquals(2968, studentData0.getOptionalHours());
      assertEquals(", mandatoryHours=", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("CANCELAMENTO P/ SOLICITACAO ALUNO", studentData0.getCountry());
      assertEquals("Student{registration='", studentData0.getGender());
      assertEquals(", mandatoryHours=", studentData0.getBirthDate());
      assertEquals("kb<?:&Pm3>8My*7i", studentData0.getPlaceOfBirth());
      assertEquals("CANCELAMENTO P/ SOLICITACAO ALUNO", studentData0.getAffirmativePolicy());
      assertEquals(", gender='", studentData0.getDisabilities());
      assertEquals(" $eh|K:1Ur4&(zA", studentData0.getCurriculumCode());
      assertEquals("kb<?:&Pm3>8My*7i", studentData0.getSecondarySchool());
      assertEquals((-1936969462), studentData0.getCompletedCredits());
      assertEquals(2968, studentData0.getComplementaryHours());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      // Undeclared exception!
      try { 
        studentData0.isDropout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StudentData studentData0 = new StudentData("Bloom\"ilters Fust have equal funnels (% != %s)", "Bloom\"ilters Fust have equal funnels (% != %s)", "Bloom\"ilters Fust have equal funnels (% != %s)", "Bloom\"ilters Fust have equal funnels (% != %s)", "Bloom\"ilters Fust have equal funnels (% != %s)", "Bloom\"ilters Fust have equal funnels (% != %s)", "Bloom\"ilters Fust have equal funnels (% != %s)", "Bloom\"ilters Fust have equal funnels (% != %s)", "Bloom\"ilters Fust have equal funnels (% != %s)", "Bloom\"ilters Fust have equal funnels (% != %s)", "Bloom\"ilters Fust have equal funnels (% != %s)", "Bloom\"ilters Fust have equal funnels (% != %s)", "Bloom\"ilters Fust have equal funnels (% != %s)", "Bloom\"ilters Fust have equal funnels (% != %s)", "Bloom\"ilters Fust have equal funnels (% != %s)", "Bloom\"ilters Fust have equal funnels (% != %s)", "Bloom\"ilters Fust have equal funnels (% != %s)", 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31);
      boolean boolean0 = studentData0.isDropout();
      assertEquals(31, studentData0.getComplementaryHours());
      assertEquals(93, studentData0.getCompletedCredits());
      assertTrue(boolean0);
      assertEquals(31, studentData0.getOptionalHours());
      assertEquals(31, studentData0.getMandatoryHours());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      // Undeclared exception!
      try { 
        studentData0.isAlumnus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "", "", "AVe3nARd(\"p}wH)'a", "AVe3nARd(\"p}wH)'a", "", "AVe3nARd(\"p}wH)'a", "", "", "", 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 1.0, 2500, 2500, 2500, 2500, 2500, 2500);
      studentData0.isAlumnus();
      assertEquals("AVe3nARd(\"p}wH)'a", studentData0.getSecondarySchool());
      assertEquals("", studentData0.getCourseCode());
      assertEquals("AVe3nARd(\"p}wH)'a", studentData0.getAffirmativePolicy());
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals(2500, studentData0.getComplementaryHours());
      assertEquals("AVe3nARd(\"p}wH)'a", studentData0.getNationality());
      assertEquals("AVe3nARd(\"p}wH)'a", studentData0.getEmail());
      assertEquals("", studentData0.getMaritalStatus());
      assertEquals("AVe3nARd(\"p}wH)'a", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("AVe3nARd(\"p}wH)'a", studentData0.getBirthDate());
      assertEquals("", studentData0.getDisabilities());
      assertEquals("AVe3nARd(\"p}wH)'a", studentData0.getCountry());
      assertEquals("", studentData0.getGender());
      assertEquals(7500, studentData0.getCompletedCredits());
      assertEquals("", studentData0.getPlaceOfBirth());
      assertEquals("AVe3nARd(\"p}wH)'a", studentData0.getRace());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      // Undeclared exception!
      try { 
        studentData0.isActive();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "", "", ", enrolledCredits=", "csnlD]pUcT~", ".'vqtB W$", "csnlD]pUcT~", "Jau+UA5V(V", "org.apache.log4j.helpers.LogLog", "", 2469, (-1970497108), (-1796310091), (-1796310091), (-1796310091), 137, (-753.0393994549829), (-753.0393994549829), 1.0, (-1161267112), 2469, (-1970497108), 2469, 1424, (-883.99));
      boolean boolean0 = studentData0.isActive();
      assertEquals("S| *B'fkP", studentData0.getSecondarySchool());
      assertEquals(".'vqtB W$", studentData0.getPlaceOfBirth());
      assertEquals(528160234, studentData0.getCompletedCredits());
      assertEquals("", studentData0.getCurriculumCode());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getAffirmativePolicy());
      assertFalse(boolean0);
      assertEquals("csnlD]pUcT~", studentData0.getRace());
      assertEquals("", studentData0.getMaritalStatus());
      assertEquals("", studentData0.getGender());
      assertEquals("org.apache.log4j.helpers.LogLog", studentData0.getCourseCode());
      assertEquals("csnlD]pUcT~", studentData0.getCountry());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getBirthDate());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getName());
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("Jau+UA5V(V", studentData0.getDisabilities());
      assertEquals(2469, studentData0.getMandatoryHours());
      assertEquals((-1796310091), studentData0.getComplementaryHours());
      assertEquals("S| *B'fkP", studentData0.getEmail());
      assertEquals(", enrolledCredits=", studentData0.getNationality());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      // Undeclared exception!
      try { 
        studentData0.getAdmissionTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.StudentData", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      // Undeclared exception!
      try { 
        studentData0.getStatusTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      // Undeclared exception!
      try { 
        studentData0.getStatus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      // Undeclared exception!
      try { 
        studentData0.getAdmissionStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.StudentData", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      // Undeclared exception!
      try { 
        studentData0.getStatusStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      studentData0.setStatus(studentStatus0);
      String string0 = studentData0.getStatusStr();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setInstitutionalEnrollments((-1614825842));
      assertEquals((-1614825842), studentData0.getInstitutionalEnrollments());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setGender("2?0=-=:)");
      assertEquals(0, studentData0.getInstitutionalEnrollments());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setStatusStr(", maritalStatus='");
      // Undeclared exception!
      try { 
        studentData0.isAlumnus();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setComplementaryHours(7);
      int int0 = studentData0.getComplementaryHours();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setStatusTerm("");
      assertEquals(0, studentData0.getOptionalHours());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAffirmativePolicy((String) null);
      assertEquals(0, studentData0.getOptionalHours());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setEnrolledCredits(7);
      assertEquals(7, studentData0.getEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.toString();
      assertEquals("StudentData{name='null', birthDate='null', email='null', gender='null', maritalStatus='null', nationality='null', country='null', placeOfBirth='null', race='null', status='null', termStatus='null', admission='null', admissionTerm='null', disabilities='null', affirmativeAction='null', secondarySchool='null', secondarySchoolGraduationYear='null', courseCode='null', curriculumCode='null', mandatoryHours=0, mandatoryCredits=0, optionalHours=0, optionalCredits=0, complementaryHours=0, complementaryCredits=0, gpa=0.0, mc=0.0, iea=0.0, termsCount=0, suspendedTerms=0, institutionalTerms=0, mobilityTerms=0, enrolledCredits=0, admissionGrade=0.0}", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      Integer integer0 = new Integer((-1614825842));
      studentData0.setMobilityTerms((int) integer0);
      assertEquals((-1614825842), studentData0.getMobilityTerms());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAdmissionStr("");
      // Undeclared exception!
      try { 
        studentData0.getAdmissionStr();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StudentData studentData0 = new StudentData("AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "AVe3nARd(\"0}wS)'a", "S| *B'fkP", "", "", ", enrolledCredits=", "csnlD]pUcT~", ".'vqtB W$", "csnlD]pUcT~", "Jau+UA5V(V", "org.apache.log4j.helpers.LogLog", "", 2469, (-1970497108), (-1796310091), (-1796310091), (-1796310091), 137, (-753.0393994549829), (-753.0393994549829), 1.0, (-1161267112), 2469, (-1970497108), 2469, 1424, (-883.99));
      assertEquals("S| *B'fkP", studentData0.getEmail());
      
      studentData0.setEmail("org.apache.commons.io.filefilter.CanExecuteFileFilter");
      assertEquals("AVe3nARd(\"0}wS)'a", studentData0.getName());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getCompletedCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setDisabilities((String) null);
      assertNull(studentData0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setComplementaryCredits(60);
      assertEquals(60, studentData0.getComplementaryCredits());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setSecondarySchoolGraduationYear("");
      String string0 = studentData0.getSecondarySchoolGraduationYear();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setBirthDate("");
      String string0 = studentData0.getBirthDate();
      assertEquals("", string0);
  }
}
