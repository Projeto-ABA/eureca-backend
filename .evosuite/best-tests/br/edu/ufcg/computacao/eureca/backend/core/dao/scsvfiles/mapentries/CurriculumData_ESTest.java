/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 22:30:42 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey;
import br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum;
import java.util.ArrayList;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CurriculumData_ESTest extends CurriculumData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(",", ",", ",", ",", 5, 871, 5, (-118), 5, (-2426), 1317, 1317, (-38), (-2426), ",", "b-9-#ZqH$_Z&[P6QI", ",", "", ",");
      assertEquals(",", curriculumData0.getIdealElectiveCreditsList());
      assertEquals((-38), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(871, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals((-2426), curriculumData0.getMinNumberOfTerms());
      assertEquals(5, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-118), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("b-9-#ZqH$_Z&[P6QI", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-2426), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(",", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(",", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(5, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(",", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(",", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(",", curriculumData0.getMandatorySubjectCodes());
      assertEquals(",", curriculumData0.getElectiveSubjectCodes());
      assertEquals(5, curriculumData0.getMinActivitiesNeeded());
      assertEquals(1317, curriculumData0.getMaxNumberOfTerms());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals(1317, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNotNull(curriculumData0);
      
      // Undeclared exception!
      try { 
        curriculumData0.getExpectedMinAccumulatedCredits((-118));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -119
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("#'D", "", "#'D", ", complementarySubjectsList=", 1031, 1031, (-1811), 1031, 1031, (-1811), (-1811), 1031, 1031, 1031, "vV73+30(>$(cS0^", "#'D", "", (String) null, "");
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals("", curriculumData0.getIdealOptionalCreditsList());
      assertEquals("vV73+30(>$(cS0^", curriculumData0.getMandatorySubjectCodes());
      assertEquals(1031, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(1031, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculumData0.getElectiveSubjectCodes());
      assertEquals(", complementarySubjectsList=", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(1031, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1031, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("#'D", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(1031, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(1031, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("#'D", curriculumData0.getIdealElectiveCreditsList());
      assertEquals((-1811), curriculumData0.getMaxNumberOfTerms());
      assertEquals((-1811), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-1811), curriculumData0.getMinNumberOfTerms());
      assertEquals(1031, curriculumData0.getMinActivitiesNeeded());
      assertEquals("#'D", curriculumData0.getOptionalSubjectCodes());
      assertNotNull(curriculumData0);
      
      String string0 = curriculumData0.getOptionalSubjectCodes();
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals("", curriculumData0.getIdealOptionalCreditsList());
      assertEquals("vV73+30(>$(cS0^", curriculumData0.getMandatorySubjectCodes());
      assertEquals(1031, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(1031, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculumData0.getElectiveSubjectCodes());
      assertEquals(", complementarySubjectsList=", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(1031, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1031, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("#'D", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(1031, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(1031, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("#'D", curriculumData0.getIdealElectiveCreditsList());
      assertEquals((-1811), curriculumData0.getMaxNumberOfTerms());
      assertEquals((-1811), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-1811), curriculumData0.getMinNumberOfTerms());
      assertEquals(1031, curriculumData0.getMinActivitiesNeeded());
      assertEquals("#'D", curriculumData0.getOptionalSubjectCodes());
      assertEquals("#'D", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("<IG l}f\"b'k", "<IG l}f\"b'k", ",", ",", 0, (-716), 0, (-825), 252, (-716), 0, 0, (-825), (-716), "", "", (String) null, ", exceptionalAdditionalEnrolledCredits=", "");
      assertEquals("<IG l}f\"b'k", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-716), curriculumData0.getMinNumberOfTerms());
      assertEquals(",", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("", curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("<IG l}f\"b'k", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(252, curriculumData0.getMinActivitiesNeeded());
      assertEquals((-716), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(", exceptionalAdditionalEnrolledCredits=", curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals("", curriculumData0.getMandatorySubjectCodes());
      assertEquals((-825), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(",", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-716), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals((-825), curriculumData0.getMinComplementaryCreditsNeeded());
      assertNotNull(curriculumData0);
      
      String string0 = curriculumData0.getOptionalSubjectCodes();
      assertEquals("<IG l}f\"b'k", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-716), curriculumData0.getMinNumberOfTerms());
      assertEquals(",", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("", curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("<IG l}f\"b'k", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(252, curriculumData0.getMinActivitiesNeeded());
      assertEquals((-716), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(", exceptionalAdditionalEnrolledCredits=", curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals("", curriculumData0.getMandatorySubjectCodes());
      assertEquals((-825), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(",", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-716), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals((-825), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNotNull(curriculumData0);
      
      curriculumData0.setMinOptionalCreditsNeeded(3114);
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(3114, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      
      int int0 = curriculumData0.getMinOptionalCreditsNeeded();
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(3114, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(3114, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("", "{SyH=", "v)SLqoFe5885", "4kwxrH2~U^", 3578, 654, 3578, 654, 3578, 654, 3578, 2, 654, 0, "{SyH=", "J=*h2:FO4DfZn$", "XZrjl9@tz\"6{%z[$$Gm", "v)SLqoFe5885", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData");
      assertEquals("v)SLqoFe5885", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(3578, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("4kwxrH2~U^", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("XZrjl9@tz\"6{%z[$$Gm", curriculumData0.getElectiveSubjectCodes());
      assertEquals(654, curriculumData0.getMinNumberOfTerms());
      assertEquals("J=*h2:FO4DfZn$", curriculumData0.getOptionalSubjectCodes());
      assertEquals(2, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(3578, curriculumData0.getMinActivitiesNeeded());
      assertEquals(654, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals("v)SLqoFe5885", curriculumData0.getComplementarySubjectCodes());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(3578, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("{SyH=", curriculumData0.getMandatorySubjectCodes());
      assertEquals("{SyH=", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(654, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(654, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(3578, curriculumData0.getMaxNumberOfTerms());
      assertNotNull(curriculumData0);
      
      curriculumData0.setMinOptionalCreditsNeeded((-1380));
      assertEquals("v)SLqoFe5885", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(3578, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals((-1380), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("4kwxrH2~U^", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("XZrjl9@tz\"6{%z[$$Gm", curriculumData0.getElectiveSubjectCodes());
      assertEquals(654, curriculumData0.getMinNumberOfTerms());
      assertEquals("J=*h2:FO4DfZn$", curriculumData0.getOptionalSubjectCodes());
      assertEquals(2, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(3578, curriculumData0.getMinActivitiesNeeded());
      assertEquals("v)SLqoFe5885", curriculumData0.getComplementarySubjectCodes());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(3578, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("{SyH=", curriculumData0.getMandatorySubjectCodes());
      assertEquals("{SyH=", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(654, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(654, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(3578, curriculumData0.getMaxNumberOfTerms());
      
      int int0 = curriculumData0.getMinOptionalCreditsNeeded();
      assertEquals("v)SLqoFe5885", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(3578, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals((-1380), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("4kwxrH2~U^", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("XZrjl9@tz\"6{%z[$$Gm", curriculumData0.getElectiveSubjectCodes());
      assertEquals(654, curriculumData0.getMinNumberOfTerms());
      assertEquals("J=*h2:FO4DfZn$", curriculumData0.getOptionalSubjectCodes());
      assertEquals(2, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(3578, curriculumData0.getMinActivitiesNeeded());
      assertEquals("v)SLqoFe5885", curriculumData0.getComplementarySubjectCodes());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(3578, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("{SyH=", curriculumData0.getMandatorySubjectCodes());
      assertEquals("{SyH=", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(654, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(654, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(3578, curriculumData0.getMaxNumberOfTerms());
      assertEquals((-1380), int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNotNull(curriculumData0);
      
      int int0 = curriculumData0.getMinNumberOfTerms();
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("cK\"e-wh@`p+vLM5", "", "cK\"e-wh@`p+vLM5", "xjA|P{ZVjmVB>]1t>vm", (-1023), 861, (-1023), (-1023), 861, (-1023), (-1), 125, 861, 245, (String) null, ", minMandatoryCreditsNeeded=", (String) null, "xjA|P{ZVjmVB>]1t>vm", ", minMandatoryCreditsNeeded=");
      assertEquals((-1023), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals((-1023), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(125, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("xjA|P{ZVjmVB>]1t>vm", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("cK\"e-wh@`p+vLM5", curriculumData0.getIdealElectiveCreditsList());
      assertEquals((-1023), curriculumData0.getMinNumberOfTerms());
      assertEquals((-1), curriculumData0.getMaxNumberOfTerms());
      assertEquals("xjA|P{ZVjmVB>]1t>vm", curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(", minMandatoryCreditsNeeded=", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-1023), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(861, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(245, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(861, curriculumData0.getMinActivitiesNeeded());
      assertEquals("cK\"e-wh@`p+vLM5", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(861, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(", minMandatoryCreditsNeeded=", curriculumData0.getOptionalSubjectCodes());
      assertNotNull(curriculumData0);
      
      int int0 = curriculumData0.getMinNumberOfTerms();
      assertEquals((-1023), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals((-1023), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(125, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("xjA|P{ZVjmVB>]1t>vm", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("cK\"e-wh@`p+vLM5", curriculumData0.getIdealElectiveCreditsList());
      assertEquals((-1023), curriculumData0.getMinNumberOfTerms());
      assertEquals((-1), curriculumData0.getMaxNumberOfTerms());
      assertEquals("xjA|P{ZVjmVB>]1t>vm", curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(", minMandatoryCreditsNeeded=", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-1023), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(861, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(245, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(861, curriculumData0.getMinActivitiesNeeded());
      assertEquals("cK\"e-wh@`p+vLM5", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(861, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(", minMandatoryCreditsNeeded=", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-1023), int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(">", ",", ">", ">", (-2712), (-159), 679, (-2712), (-159), 1151, 39, 1151, 679, 0, ">", ">", ">", "", "");
      assertEquals(">", curriculumData0.getOptionalSubjectCodes());
      assertEquals(1151, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(">", curriculumData0.getMandatorySubjectCodes());
      assertEquals(">", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-2712), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(">", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(",", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(1151, curriculumData0.getMinNumberOfTerms());
      assertEquals((-2712), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(679, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-159), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(39, curriculumData0.getMaxNumberOfTerms());
      assertEquals(">", curriculumData0.getElectiveSubjectCodes());
      assertEquals(679, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(">", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-159), curriculumData0.getMinActivitiesNeeded());
      assertNotNull(curriculumData0);
      
      int int0 = curriculumData0.getMinNumberOfEnrolledCredits();
      assertEquals(">", curriculumData0.getOptionalSubjectCodes());
      assertEquals(1151, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(">", curriculumData0.getMandatorySubjectCodes());
      assertEquals(">", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-2712), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(">", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(",", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(1151, curriculumData0.getMinNumberOfTerms());
      assertEquals((-2712), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(679, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-159), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(39, curriculumData0.getMaxNumberOfTerms());
      assertEquals(">", curriculumData0.getElectiveSubjectCodes());
      assertEquals(679, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(">", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-159), curriculumData0.getMinActivitiesNeeded());
      assertEquals(1151, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNotNull(curriculumData0);
      
      curriculumData0.setMinNumberOfEnrolledCredits((-1));
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals((-1), curriculumData0.getMinNumberOfEnrolledCredits());
      
      int int0 = curriculumData0.getMinNumberOfEnrolledCredits();
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals((-1), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNotNull(curriculumData0);
      
      int int0 = curriculumData0.getMinMandatoryCreditsNeeded();
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNotNull(curriculumData0);
      
      curriculumData0.setMinMandatoryCreditsNeeded(1987);
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(1987, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      
      int int0 = curriculumData0.getMinMandatoryCreditsNeeded();
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(1987, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(1987, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNotNull(curriculumData0);
      
      int int0 = curriculumData0.getMinElectiveCreditsNeeded();
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("e7y+$", "e7y+$", "ANFS,Z\"??5acufpB", "-ek*b3", 704, 0, (-1), (-2323), 0, 1426, 0, 0, 0, 0, "", "", "ANFS,Z\"??5acufpB", "%fGT!U,{l3G4h", "-ek*b3");
      assertEquals("", curriculumData0.getOptionalSubjectCodes());
      assertEquals("%fGT!U,{l3G4h", curriculumData0.getComplementarySubjectCodes());
      assertEquals("", curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("ANFS,Z\"??5acufpB", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(704, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("ANFS,Z\"??5acufpB", curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1426, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("e7y+$", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals("e7y+$", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals((-2323), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("-ek*b3", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("-ek*b3", curriculumData0.getIdealComplementaryCreditsList());
      assertNotNull(curriculumData0);
      
      int int0 = curriculumData0.getMinElectiveCreditsNeeded();
      assertEquals("", curriculumData0.getOptionalSubjectCodes());
      assertEquals("%fGT!U,{l3G4h", curriculumData0.getComplementarySubjectCodes());
      assertEquals("", curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("ANFS,Z\"??5acufpB", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(704, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("ANFS,Z\"??5acufpB", curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1426, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("e7y+$", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals("e7y+$", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals((-2323), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("-ek*b3", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("-ek*b3", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNotNull(curriculumData0);
      
      int int0 = curriculumData0.getMinComplementaryCreditsNeeded();
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("U%", (String) null, (String) null, "", 787, 787, (-1543), (-1), 0, 1733, (-1543), 0, 1733, 0, "U%", "", (String) null, (String) null, "");
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals((-1), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals((-1543), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(787, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(1733, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(787, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals("U%", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("U%", curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-1543), curriculumData0.getMaxNumberOfTerms());
      assertEquals(1733, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertNotNull(curriculumData0);
      
      int int0 = curriculumData0.getMinComplementaryCreditsNeeded();
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals((-1), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals((-1543), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(787, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(1733, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(787, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals("U%", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("U%", curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-1543), curriculumData0.getMaxNumberOfTerms());
      assertEquals(1733, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNotNull(curriculumData0);
      
      int int0 = curriculumData0.getMinActivitiesNeeded();
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData((String) null, (String) null, (String) null, (String) null, (-209), (-209), (-209), 1081, 125, (-209), (-316), 1081, 2256, 2256, (String) null, (String) null, (String) null, (String) null, ".{x#$");
      assertEquals(1081, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(2256, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals((-209), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-209), curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-209), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals((-316), curriculumData0.getMaxNumberOfTerms());
      assertEquals(125, curriculumData0.getMinActivitiesNeeded());
      assertEquals((-209), curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(2256, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(".{x#$", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(1081, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNotNull(curriculumData0);
      
      int int0 = curriculumData0.getMinActivitiesNeeded();
      assertEquals(1081, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(2256, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals((-209), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-209), curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-209), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals((-316), curriculumData0.getMaxNumberOfTerms());
      assertEquals(125, curriculumData0.getMinActivitiesNeeded());
      assertEquals((-209), curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(2256, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(".{x#$", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(1081, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNotNull(curriculumData0);
      
      int int0 = curriculumData0.getMaxNumberOfTerms();
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNotNull(curriculumData0);
      
      curriculumData0.setMaxNumberOfTerms(1);
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      
      int int0 = curriculumData0.getMaxNumberOfTerms();
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNotNull(curriculumData0);
      
      int int0 = curriculumData0.getMaxNumberOfEnrolledCredits();
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("[Vx", (String) null, (String) null, (String) null, 0, 0, 0, 1, 1, 1, 0, 0, (-256), (-256), "+.4qii!g0wWDnN\"t", (String) null, "+.4qii!g0wWDnN\"t", "+.4qii!g0wWDnN\"t", (String) null);
      assertEquals(1, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("[Vx", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(1, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals("+.4qii!g0wWDnN\"t", curriculumData0.getComplementarySubjectCodes());
      assertEquals("+.4qii!g0wWDnN\"t", curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals((-256), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("+.4qii!g0wWDnN\"t", curriculumData0.getElectiveSubjectCodes());
      assertEquals((-256), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNotNull(curriculumData0);
      
      int int0 = curriculumData0.getMaxNumberOfEnrolledCredits();
      assertEquals(1, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("[Vx", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(1, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals("+.4qii!g0wWDnN\"t", curriculumData0.getComplementarySubjectCodes());
      assertEquals("+.4qii!g0wWDnN\"t", curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals((-256), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("+.4qii!g0wWDnN\"t", curriculumData0.getElectiveSubjectCodes());
      assertEquals((-256), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals((-256), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNotNull(curriculumData0);
      
      String string0 = curriculumData0.getMandatorySubjectCodes();
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("", (String) null, "", "", 125, 1566, 0, 0, (-941), 2114, (-2812), (-2251), 196, (-941), "", "K$!WbPUg&b4+q/", "", "", "^yU$)I)93w+'TT=wi{7");
      assertEquals("K$!WbPUg&b4+q/", curriculumData0.getOptionalSubjectCodes());
      assertEquals(2114, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-2812), curriculumData0.getMaxNumberOfTerms());
      assertEquals((-941), curriculumData0.getMinActivitiesNeeded());
      assertEquals((-941), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals("", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("", curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals("", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(1566, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(196, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(125, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculumData0.getElectiveSubjectCodes());
      assertEquals("^yU$)I)93w+'TT=wi{7", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-2251), curriculumData0.getMinNumberOfEnrolledCredits());
      assertNotNull(curriculumData0);
      
      String string0 = curriculumData0.getMandatorySubjectCodes();
      assertEquals("K$!WbPUg&b4+q/", curriculumData0.getOptionalSubjectCodes());
      assertEquals(2114, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-2812), curriculumData0.getMaxNumberOfTerms());
      assertEquals((-941), curriculumData0.getMinActivitiesNeeded());
      assertEquals((-941), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals("", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("", curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals("", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(1566, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(196, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(125, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculumData0.getElectiveSubjectCodes());
      assertEquals("^yU$)I)93w+'TT=wi{7", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-2251), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("6!:H", "6!:H", "6!:H", "6!:H", (-1), 269, (-1), 3101, (-1), 3101, 3101, (-1), 0, (-1), "6!:H", "6!:H", "6!:H", "lFV*0nP1i", "");
      assertEquals(269, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals((-1), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("6!:H", curriculumData0.getElectiveSubjectCodes());
      assertEquals("6!:H", curriculumData0.getOptionalSubjectCodes());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("6!:H", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("6!:H", curriculumData0.getIdealOptionalCreditsList());
      assertEquals("6!:H", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-1), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("lFV*0nP1i", curriculumData0.getComplementarySubjectCodes());
      assertEquals(3101, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals((-1), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("6!:H", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("6!:H", curriculumData0.getMandatorySubjectCodes());
      assertEquals(3101, curriculumData0.getMinNumberOfTerms());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(3101, curriculumData0.getMaxNumberOfTerms());
      assertEquals((-1), curriculumData0.getMinActivitiesNeeded());
      assertNotNull(curriculumData0);
      
      String string0 = curriculumData0.getIdealOptionalCreditsList();
      assertEquals(269, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals((-1), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("6!:H", curriculumData0.getElectiveSubjectCodes());
      assertEquals("6!:H", curriculumData0.getOptionalSubjectCodes());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("6!:H", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("6!:H", curriculumData0.getIdealOptionalCreditsList());
      assertEquals("6!:H", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-1), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("lFV*0nP1i", curriculumData0.getComplementarySubjectCodes());
      assertEquals(3101, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals((-1), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("6!:H", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("6!:H", curriculumData0.getMandatorySubjectCodes());
      assertEquals(3101, curriculumData0.getMinNumberOfTerms());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(3101, curriculumData0.getMaxNumberOfTerms());
      assertEquals((-1), curriculumData0.getMinActivitiesNeeded());
      assertEquals("6!:H", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("", "", ",", "C?B3OB", 2, 2, (-527), (-527), 0, 2, 0, (-1328), 2, 2, "JVED", "C?B3OB", "C?B3OB", "C?B3OB", "");
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals("JVED", curriculumData0.getMandatorySubjectCodes());
      assertEquals("C?B3OB", curriculumData0.getComplementarySubjectCodes());
      assertEquals(",", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("C?B3OB", curriculumData0.getElectiveSubjectCodes());
      assertEquals(2, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1328), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("C?B3OB", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-527), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(2, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(2, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(2, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals((-527), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("C?B3OB", curriculumData0.getOptionalSubjectCodes());
      assertEquals(2, curriculumData0.getMinNumberOfTerms());
      assertNotNull(curriculumData0);
      
      String string0 = curriculumData0.getIdealOptionalCreditsList();
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals("JVED", curriculumData0.getMandatorySubjectCodes());
      assertEquals("C?B3OB", curriculumData0.getComplementarySubjectCodes());
      assertEquals(",", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("C?B3OB", curriculumData0.getElectiveSubjectCodes());
      assertEquals(2, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1328), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("C?B3OB", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-527), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(2, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(2, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(2, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals((-527), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("C?B3OB", curriculumData0.getOptionalSubjectCodes());
      assertEquals(2, curriculumData0.getMinNumberOfTerms());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(",", ",", ",", ",", 5, 871, 5, (-118), 5, (-2426), 1317, 1317, (-38), (-2426), ",", "b-9-#ZqH$_Z&[P6QI", ",", "", ",");
      assertEquals(5, curriculumData0.getMinActivitiesNeeded());
      assertEquals(1317, curriculumData0.getMaxNumberOfTerms());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-38), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(",", curriculumData0.getElectiveSubjectCodes());
      assertEquals(5, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-2426), curriculumData0.getMinNumberOfTerms());
      assertEquals(",", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(1317, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(871, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(5, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals((-2426), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(",", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-118), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(",", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("b-9-#ZqH$_Z&[P6QI", curriculumData0.getOptionalSubjectCodes());
      assertEquals(",", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(",", curriculumData0.getMandatorySubjectCodes());
      assertEquals(",", curriculumData0.getIdealOptionalCreditsList());
      assertNotNull(curriculumData0);
      
      ArrayList<Integer> arrayList0 = curriculumData0.getIdealOptionalCredits();
      assertEquals(5, curriculumData0.getMinActivitiesNeeded());
      assertEquals(1317, curriculumData0.getMaxNumberOfTerms());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-38), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(",", curriculumData0.getElectiveSubjectCodes());
      assertEquals(5, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-2426), curriculumData0.getMinNumberOfTerms());
      assertEquals(",", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(1317, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(871, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(5, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals((-2426), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(",", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-118), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(",", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("b-9-#ZqH$_Z&[P6QI", curriculumData0.getOptionalSubjectCodes());
      assertEquals(",", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(",", curriculumData0.getMandatorySubjectCodes());
      assertEquals(",", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((-2426)));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("0", "0", "0", "0", 6007, 1, (-1), 1, 0, 1, 1, 1, 6007, (-539), "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", ">rY%IS&o0B,!", "ghgt\"");
      assertEquals(1, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("ghgt\"", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(1, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(1, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(6007, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(6007, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getElectiveSubjectCodes());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getOptionalSubjectCodes());
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getMandatorySubjectCodes());
      assertEquals((-539), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(">rY%IS&o0B,!", curriculumData0.getComplementarySubjectCodes());
      assertNotNull(curriculumData0);
      
      ArrayList<Integer> arrayList0 = curriculumData0.getIdealOptionalCredits();
      assertEquals(1, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("ghgt\"", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(1, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(1, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(6007, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(6007, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getElectiveSubjectCodes());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getOptionalSubjectCodes());
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getMandatorySubjectCodes());
      assertEquals((-539), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(">rY%IS&o0B,!", curriculumData0.getComplementarySubjectCodes());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((-539)));
      assertTrue(arrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(", curriculumCode='", "[9HXB'lPSR", ", curriculumCode='", "[9HXB'lPSR", 0, 0, 0, 0, 0, (-1), (-1), (-1), (-1), 1, ", curriculumCode='", ", curriculumCode='", "i/P$M{<)>q5ihLK_N;", "", "");
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals("[9HXB'lPSR", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals((-1), curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-1), curriculumData0.getMaxNumberOfTerms());
      assertEquals(", curriculumCode='", curriculumData0.getMandatorySubjectCodes());
      assertEquals((-1), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("i/P$M{<)>q5ihLK_N;", curriculumData0.getElectiveSubjectCodes());
      assertEquals(", curriculumCode='", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(", curriculumCode='", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-1), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("[9HXB'lPSR", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(", curriculumCode='", curriculumData0.getOptionalSubjectCodes());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(1, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNotNull(curriculumData0);
      
      String string0 = curriculumData0.getIdealMandatoryCreditsList();
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals("[9HXB'lPSR", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals((-1), curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-1), curriculumData0.getMaxNumberOfTerms());
      assertEquals(", curriculumCode='", curriculumData0.getMandatorySubjectCodes());
      assertEquals((-1), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("i/P$M{<)>q5ihLK_N;", curriculumData0.getElectiveSubjectCodes());
      assertEquals(", curriculumCode='", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(", curriculumCode='", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-1), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("[9HXB'lPSR", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(", curriculumCode='", curriculumData0.getOptionalSubjectCodes());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(1, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(", curriculumCode='", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("", "]UQy=h \"%T]<Cvh?o\"", "]UQy=h \"%T]<Cvh?o\"", "", 0, 0, 2, (-468), (-468), (-468), 2, 1327, 0, (-1220), "]UQy=h \"%T]<Cvh?o\"", "]UQy=h \"%T]<Cvh?o\"", "", "]UQy=h \"%T]<Cvh?o\"", "");
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getMandatorySubjectCodes());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getOptionalSubjectCodes());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-468), curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1220), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getIdealOptionalCreditsList());
      assertEquals((-468), curriculumData0.getMinNumberOfTerms());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("", curriculumData0.getElectiveSubjectCodes());
      assertEquals(1327, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(2, curriculumData0.getMaxNumberOfTerms());
      assertEquals(2, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-468), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNotNull(curriculumData0);
      
      String string0 = curriculumData0.getIdealMandatoryCreditsList();
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getMandatorySubjectCodes());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getOptionalSubjectCodes());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-468), curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1220), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getIdealOptionalCreditsList());
      assertEquals((-468), curriculumData0.getMinNumberOfTerms());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("", curriculumData0.getElectiveSubjectCodes());
      assertEquals(1327, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(2, curriculumData0.getMaxNumberOfTerms());
      assertEquals(2, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-468), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("0", "0", "0", "0", 6007, 1, (-1), 1, 0, 1, 1, 1, 6007, (-539), "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", (String) null, "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", ">rY%IS&o0B,!", "ghgt\"");
      assertEquals(1, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals("ghgt\"", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-539), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(">rY%IS&o0B,!", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getElectiveSubjectCodes());
      assertEquals(1, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      assertEquals(6007, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(1, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(6007, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getMandatorySubjectCodes());
      assertEquals(1, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNotNull(curriculumData0);
      
      ArrayList<Integer> arrayList0 = curriculumData0.getIdealMandatoryCredits();
      assertEquals(1, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals("ghgt\"", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-539), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(">rY%IS&o0B,!", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getElectiveSubjectCodes());
      assertEquals(1, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      assertEquals(6007, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(1, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(6007, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getMandatorySubjectCodes());
      assertEquals(1, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(1));
      assertTrue(arrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(", complementaryActivitiesList=", ", complementaryActivitiesList=", "Yv)/9N5W>Hz=6#", "Yv)/9N5W>Hz=6#", (-2535), 4271, 125, 4271, 1709, 2312, 0, 2, 4271, (-782), ", complementaryActivitiesList=", "`?o+Xi3e}&", ", complementaryActivitiesList=", "(Hr\"VB6t", "Yv)/9N5W>Hz=6#");
      assertEquals("Yv)/9N5W>Hz=6#", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(", complementaryActivitiesList=", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("(Hr\"VB6t", curriculumData0.getComplementarySubjectCodes());
      assertEquals(4271, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals((-2535), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(4271, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(2312, curriculumData0.getMinNumberOfTerms());
      assertEquals(", complementaryActivitiesList=", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(", complementaryActivitiesList=", curriculumData0.getMandatorySubjectCodes());
      assertEquals("Yv)/9N5W>Hz=6#", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(1709, curriculumData0.getMinActivitiesNeeded());
      assertEquals(", complementaryActivitiesList=", curriculumData0.getElectiveSubjectCodes());
      assertEquals(125, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(2, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("Yv)/9N5W>Hz=6#", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-782), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(4271, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("`?o+Xi3e}&", curriculumData0.getOptionalSubjectCodes());
      assertNotNull(curriculumData0);
      
      String string0 = curriculumData0.getIdealElectiveCreditsList();
      assertEquals("Yv)/9N5W>Hz=6#", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(", complementaryActivitiesList=", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("(Hr\"VB6t", curriculumData0.getComplementarySubjectCodes());
      assertEquals(4271, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals((-2535), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(4271, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(2312, curriculumData0.getMinNumberOfTerms());
      assertEquals(", complementaryActivitiesList=", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(", complementaryActivitiesList=", curriculumData0.getMandatorySubjectCodes());
      assertEquals("Yv)/9N5W>Hz=6#", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(1709, curriculumData0.getMinActivitiesNeeded());
      assertEquals(", complementaryActivitiesList=", curriculumData0.getElectiveSubjectCodes());
      assertEquals(125, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(2, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("Yv)/9N5W>Hz=6#", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-782), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(4271, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("`?o+Xi3e}&", curriculumData0.getOptionalSubjectCodes());
      assertEquals("Yv)/9N5W>Hz=6#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("", (String) null, "", "", 125, 1566, 0, 0, (-941), 2114, (-2812), (-2251), 196, (-941), "", "K$!WbPUg&b4+q/", "", "", "^yU$)I)93w+'TT=wi{7");
      assertEquals("", curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(1566, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(125, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-2251), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("^yU$)I)93w+'TT=wi{7", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-941), curriculumData0.getMinActivitiesNeeded());
      assertEquals(196, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculumData0.getElectiveSubjectCodes());
      assertEquals("K$!WbPUg&b4+q/", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-2812), curriculumData0.getMaxNumberOfTerms());
      assertEquals((-941), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(2114, curriculumData0.getMinNumberOfTerms());
      assertEquals("", curriculumData0.getMandatorySubjectCodes());
      assertEquals("", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNotNull(curriculumData0);
      
      String string0 = curriculumData0.getIdealElectiveCreditsList();
      assertEquals("", curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(1566, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(125, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-2251), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("^yU$)I)93w+'TT=wi{7", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-941), curriculumData0.getMinActivitiesNeeded());
      assertEquals(196, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculumData0.getElectiveSubjectCodes());
      assertEquals("K$!WbPUg&b4+q/", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-2812), curriculumData0.getMaxNumberOfTerms());
      assertEquals((-941), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(2114, curriculumData0.getMinNumberOfTerms());
      assertEquals("", curriculumData0.getMandatorySubjectCodes());
      assertEquals("", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(",", ",", ",", ",", 5, 871, 5, 5, 5, (-2426), 1389, 1389, (-57), (-2426), ",", "b-9-#ZqH$_Z&[P6QI", "", "", "");
      assertEquals(1389, curriculumData0.getMaxNumberOfTerms());
      assertEquals((-57), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-2426), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(",", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals("", curriculumData0.getElectiveSubjectCodes());
      assertEquals(1389, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("b-9-#ZqH$_Z&[P6QI", curriculumData0.getOptionalSubjectCodes());
      assertEquals(5, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals(",", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(",", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(5, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-2426), curriculumData0.getMinNumberOfTerms());
      assertEquals(5, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(",", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(",", curriculumData0.getMandatorySubjectCodes());
      assertEquals(871, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(5, curriculumData0.getMinActivitiesNeeded());
      assertNotNull(curriculumData0);
      
      ArrayList<Integer> arrayList0 = curriculumData0.getIdealElectiveCredits();
      assertEquals(1389, curriculumData0.getMaxNumberOfTerms());
      assertEquals((-57), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-2426), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(",", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals("", curriculumData0.getElectiveSubjectCodes());
      assertEquals(1389, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("b-9-#ZqH$_Z&[P6QI", curriculumData0.getOptionalSubjectCodes());
      assertEquals(5, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals(",", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(",", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(5, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-2426), curriculumData0.getMinNumberOfTerms());
      assertEquals(5, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(",", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(",", curriculumData0.getMandatorySubjectCodes());
      assertEquals(871, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(5, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(5));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(", expectedMinAccumulatedCreditsList=", ", expectedMinAccumulatedCreditsList=", ", expectedMinAccumulatedCreditsList=", ", expectedMinAccumulatedCreditsList=", (-3626), 1965, 0, 0, (-1175), 2279, (-1175), (-1175), 3555, 436, ", expectedMinAccumulatedCreditsList=", ",", ", expectedMinAccumulatedCreditsList=", ",", "YA+e0%&?%V");
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getIdealElectiveCreditsList());
      assertEquals((-1175), curriculumData0.getMinActivitiesNeeded());
      assertEquals(3555, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-3626), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(",", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-1175), curriculumData0.getMaxNumberOfTerms());
      assertEquals(2279, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getElectiveSubjectCodes());
      assertEquals(",", curriculumData0.getOptionalSubjectCodes());
      assertEquals(436, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1965, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-1175), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("YA+e0%&?%V", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getMandatorySubjectCodes());
      assertNotNull(curriculumData0);
      
      String string0 = curriculumData0.getIdealComplementaryCreditsList();
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getIdealElectiveCreditsList());
      assertEquals((-1175), curriculumData0.getMinActivitiesNeeded());
      assertEquals(3555, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-3626), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(",", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-1175), curriculumData0.getMaxNumberOfTerms());
      assertEquals(2279, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getElectiveSubjectCodes());
      assertEquals(",", curriculumData0.getOptionalSubjectCodes());
      assertEquals(436, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1965, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-1175), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("YA+e0%&?%V", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getMandatorySubjectCodes());
      assertEquals(", expectedMinAccumulatedCreditsList=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("", "]UQy=h \"%T]<Cvh?o\"", "]UQy=h \"%T]<Cvh?o\"", "", 0, 0, 2, (-468), (-468), (-468), 2, 1327, 0, (-1220), "]UQy=h \"%T]<Cvh?o\"", "]UQy=h \"%T]<Cvh?o\"", "", "]UQy=h \"%T]<Cvh?o\"", "");
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getComplementarySubjectCodes());
      assertEquals(2, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(2, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-468), curriculumData0.getMinNumberOfTerms());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getMandatorySubjectCodes());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getIdealOptionalCreditsList());
      assertEquals((-468), curriculumData0.getMinActivitiesNeeded());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-1220), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals("", curriculumData0.getElectiveSubjectCodes());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(1327, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals((-468), curriculumData0.getMinComplementaryCreditsNeeded());
      assertNotNull(curriculumData0);
      
      String string0 = curriculumData0.getIdealComplementaryCreditsList();
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getComplementarySubjectCodes());
      assertEquals(2, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(2, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-468), curriculumData0.getMinNumberOfTerms());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getMandatorySubjectCodes());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getIdealOptionalCreditsList());
      assertEquals((-468), curriculumData0.getMinActivitiesNeeded());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-1220), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals("", curriculumData0.getElectiveSubjectCodes());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(1327, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals((-468), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(",", ",", ",", ",", 5, 871, 5, (-118), 5, (-2426), 1317, 1317, (-38), (-2426), ",", "b-9-#ZqH$_Z&[P6QI", ",", "", ",");
      assertEquals(",", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-38), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-118), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(5, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("b-9-#ZqH$_Z&[P6QI", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-2426), curriculumData0.getMinNumberOfTerms());
      assertEquals(",", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(",", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(",", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(1317, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(",", curriculumData0.getMandatorySubjectCodes());
      assertEquals(871, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(5, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(1317, curriculumData0.getMaxNumberOfTerms());
      assertEquals(5, curriculumData0.getMinActivitiesNeeded());
      assertEquals((-2426), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(",", curriculumData0.getElectiveSubjectCodes());
      assertEquals(",", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertNotNull(curriculumData0);
      
      ArrayList<Integer> arrayList0 = curriculumData0.getIdealComplementaryCredits();
      assertEquals(",", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-38), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-118), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(5, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("b-9-#ZqH$_Z&[P6QI", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-2426), curriculumData0.getMinNumberOfTerms());
      assertEquals(",", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(",", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(",", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(1317, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(",", curriculumData0.getMandatorySubjectCodes());
      assertEquals(871, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(5, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(1317, curriculumData0.getMaxNumberOfTerms());
      assertEquals(5, curriculumData0.getMinActivitiesNeeded());
      assertEquals((-2426), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(",", curriculumData0.getElectiveSubjectCodes());
      assertEquals(",", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(1317));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("0", "0", "0", "0", 6007, 1, (-1), 1, 0, (-3163), 1, (-3163), 6007, (-539), "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", (String) null, "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", ">rY%IS&o0B,!", "ghgt\"");
      assertEquals(6007, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(1, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(">rY%IS&o0B,!", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-539), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("ghgt\"", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getMandatorySubjectCodes());
      assertEquals(6007, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      assertEquals((-3163), curriculumData0.getMinNumberOfTerms());
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-3163), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(1, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNotNull(curriculumData0);
      
      ArrayList<Integer> arrayList0 = curriculumData0.getIdealComplementaryCredits();
      assertEquals(6007, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(1, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(">rY%IS&o0B,!", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-539), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("ghgt\"", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getMandatorySubjectCodes());
      assertEquals(6007, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      assertEquals((-3163), curriculumData0.getMinNumberOfTerms());
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-3163), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(1, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertTrue(arrayList0.contains(0));
      assertFalse(arrayList0.contains((-3163)));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("66", "66", "66", "66", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "66", "66", "66", "66", "66");
      assertEquals("66", curriculumData0.getOptionalSubjectCodes());
      assertEquals("66", curriculumData0.getMandatorySubjectCodes());
      assertEquals(1, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(1, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(1, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("66", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(1, curriculumData0.getMinNumberOfTerms());
      assertEquals(1, curriculumData0.getMinActivitiesNeeded());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      assertEquals(1, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("66", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("66", curriculumData0.getElectiveSubjectCodes());
      assertEquals("66", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(1, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("66", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("66", curriculumData0.getComplementarySubjectCodes());
      assertEquals(1, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("66", curriculumData0.getComplementaryActivitiesCodes());
      assertNotNull(curriculumData0);
      
      int int0 = curriculumData0.getExpectedMinAccumulatedCredits(1);
      assertEquals("66", curriculumData0.getOptionalSubjectCodes());
      assertEquals("66", curriculumData0.getMandatorySubjectCodes());
      assertEquals(1, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(1, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(1, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("66", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(1, curriculumData0.getMinNumberOfTerms());
      assertEquals(1, curriculumData0.getMinActivitiesNeeded());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      assertEquals(1, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("66", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("66", curriculumData0.getElectiveSubjectCodes());
      assertEquals("66", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(1, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("66", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("66", curriculumData0.getComplementarySubjectCodes());
      assertEquals(1, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("66", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(132, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("0", "0", "0", "0", 6007, 1, (-1), 1, 0, 1, 1, 1, 6007, (-539), "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", ">rY%IS&o0B,!", "ghgt\"");
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getMandatorySubjectCodes());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getOptionalSubjectCodes());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      assertEquals(6007, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(1, curriculumData0.getMinNumberOfTerms());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(1, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(6007, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(1, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getElectiveSubjectCodes());
      assertEquals("ghgt\"", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-539), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(">rY%IS&o0B,!", curriculumData0.getComplementarySubjectCodes());
      assertNotNull(curriculumData0);
      
      ArrayList<Integer> arrayList0 = curriculumData0.getExpectedMinAccumulatedCredits();
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getMandatorySubjectCodes());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getOptionalSubjectCodes());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      assertEquals(6007, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(1, curriculumData0.getMinNumberOfTerms());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(1, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(6007, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(1, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getElectiveSubjectCodes());
      assertEquals("ghgt\"", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-539), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(">rY%IS&o0B,!", curriculumData0.getComplementarySubjectCodes());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(1));
      assertTrue(arrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNotNull(curriculumData0);
      
      int int0 = curriculumData0.getExceptionalAdditionalEnrolledCredits();
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData((String) null, (String) null, (String) null, (String) null, (-209), (-209), (-209), 1081, 125, (-209), (-316), 1081, 2256, 2256, (String) null, (String) null, (String) null, (String) null, ".{x#$");
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals((-209), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals((-316), curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(1081, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(1081, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(".{x#$", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(2256, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(125, curriculumData0.getMinActivitiesNeeded());
      assertEquals(2256, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals((-209), curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals((-209), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-209), curriculumData0.getMinNumberOfTerms());
      assertNotNull(curriculumData0);
      
      int int0 = curriculumData0.getExceptionalAdditionalEnrolledCredits();
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals((-209), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals((-316), curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(1081, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(1081, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(".{x#$", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(2256, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(125, curriculumData0.getMinActivitiesNeeded());
      assertEquals(2256, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals((-209), curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals((-209), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-209), curriculumData0.getMinNumberOfTerms());
      assertEquals(2256, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNotNull(curriculumData0);
      
      String string0 = curriculumData0.getElectiveSubjectCodes();
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNotNull(curriculumData0);
      
      curriculumData0.setElectiveSubjectCodes("");
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      
      String string0 = curriculumData0.getElectiveSubjectCodes();
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData((String) null, (String) null, (String) null, (String) null, (-209), (-209), (-209), 1081, 125, (-209), (-316), 1081, 2256, 2256, (String) null, (String) null, (String) null, (String) null, ".{x#$");
      assertEquals(2256, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(".{x#$", curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(125, curriculumData0.getMinActivitiesNeeded());
      assertEquals(2256, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals((-209), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(1081, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(1081, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals((-209), curriculumData0.getMinNumberOfTerms());
      assertEquals((-209), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals((-209), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals((-316), curriculumData0.getMaxNumberOfTerms());
      assertNotNull(curriculumData0);
      
      String string0 = curriculumData0.getComplementarySubjectCodes();
      assertEquals(2256, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(".{x#$", curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(125, curriculumData0.getMinActivitiesNeeded());
      assertEquals(2256, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals((-209), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(1081, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(1081, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals((-209), curriculumData0.getMinNumberOfTerms());
      assertEquals((-209), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals((-209), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals((-316), curriculumData0.getMaxNumberOfTerms());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNotNull(curriculumData0);
      
      curriculumData0.setComplementarySubjectCodes("");
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      
      String string0 = curriculumData0.getComplementarySubjectCodes();
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNotNull(curriculumData0);
      
      String string0 = curriculumData0.getComplementaryActivitiesCodes();
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("=I2$+FEDe%eUA~sBR", "", "", "=I2$+FEDe%eUA~sBR", 0, 0, 0, 2212, (-765), 0, (-1396), 2212, (-192), 2212, "Yl$jc", "Yl$jc", "Yl$jc", "", "");
      assertEquals("", curriculumData0.getIdealOptionalCreditsList());
      assertEquals("", curriculumData0.getIdealElectiveCreditsList());
      assertEquals((-1396), curriculumData0.getMaxNumberOfTerms());
      assertEquals("Yl$jc", curriculumData0.getMandatorySubjectCodes());
      assertEquals((-192), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals("=I2$+FEDe%eUA~sBR", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(2212, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("=I2$+FEDe%eUA~sBR", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(2212, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(2212, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("Yl$jc", curriculumData0.getElectiveSubjectCodes());
      assertEquals("Yl$jc", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-765), curriculumData0.getMinActivitiesNeeded());
      assertNotNull(curriculumData0);
      
      String string0 = curriculumData0.getComplementaryActivitiesCodes();
      assertEquals("", curriculumData0.getIdealOptionalCreditsList());
      assertEquals("", curriculumData0.getIdealElectiveCreditsList());
      assertEquals((-1396), curriculumData0.getMaxNumberOfTerms());
      assertEquals("Yl$jc", curriculumData0.getMandatorySubjectCodes());
      assertEquals((-192), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals("=I2$+FEDe%eUA~sBR", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(2212, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("=I2$+FEDe%eUA~sBR", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(2212, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(2212, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("Yl$jc", curriculumData0.getElectiveSubjectCodes());
      assertEquals("Yl$jc", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-765), curriculumData0.getMinActivitiesNeeded());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("0", "0", "0", "0", (-4552), 1, (-4552), 1, 0, 1, 1, 1, (-4552), (-539), "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", ">rY%IS&o0B,!", "ghgt\"");
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getMandatorySubjectCodes());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getElectiveSubjectCodes());
      assertEquals((-4552), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-539), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("ghgt\"", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(">rY%IS&o0B,!", curriculumData0.getComplementarySubjectCodes());
      assertEquals(1, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals((-4552), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(1, curriculumData0.getMinNumberOfTerms());
      assertEquals(1, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals((-4552), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNotNull(curriculumData0);
      
      CurriculumKey curriculumKey0 = new CurriculumKey();
      assertNull(curriculumKey0.getCourseCode());
      assertNull(curriculumKey0.getCurriculumCode());
      assertNotNull(curriculumKey0);
      
      Curriculum curriculum0 = curriculumData0.createCurriculum(curriculumKey0);
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getMandatorySubjectCodes());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getElectiveSubjectCodes());
      assertEquals((-4552), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-539), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("ghgt\"", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(">rY%IS&o0B,!", curriculumData0.getComplementarySubjectCodes());
      assertEquals(1, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals((-4552), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(1, curriculumData0.getMinNumberOfTerms());
      assertEquals(1, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals((-4552), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumKey0.getCourseCode());
      assertNull(curriculumKey0.getCurriculumCode());
      assertEquals((-4552), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-9102.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-4552), curriculum0.getMinMandatoryCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertNull(curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-4552), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculum0.getMaxNumberOfTerms());
      assertEquals((-539), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertNotNull(curriculum0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("0", "0", "0", "0", 6007, 1, (-1), 1, (-280), 1, 1, 1, 6007, (-539), "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", ">rY%IS&o0B,!", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", ">rY%IS&o0B,!", "ghgt\"");
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getMandatorySubjectCodes());
      assertEquals(1, curriculumData0.getMinNumberOfTerms());
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      assertEquals(6007, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(1, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals((-280), curriculumData0.getMinActivitiesNeeded());
      assertEquals(1, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(6007, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(">rY%IS&o0B,!", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-539), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("ghgt\"", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(">rY%IS&o0B,!", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(1, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getElectiveSubjectCodes());
      assertNotNull(curriculumData0);
      
      CurriculumKey curriculumKey0 = new CurriculumKey();
      assertNull(curriculumKey0.getCurriculumCode());
      assertNull(curriculumKey0.getCourseCode());
      assertNotNull(curriculumKey0);
      
      Curriculum curriculum0 = curriculumData0.createCurriculum(curriculumKey0);
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getMandatorySubjectCodes());
      assertEquals(1, curriculumData0.getMinNumberOfTerms());
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      assertEquals(6007, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(1, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals((-280), curriculumData0.getMinActivitiesNeeded());
      assertEquals(1, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(6007, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(">rY%IS&o0B,!", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-539), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("ghgt\"", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(">rY%IS&o0B,!", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(1, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getElectiveSubjectCodes());
      assertNull(curriculumKey0.getCurriculumCode());
      assertNull(curriculumKey0.getCourseCode());
      assertEquals((-280), curriculum0.getMinActivitiesNeeded());
      assertEquals(6007, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(6007, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(1, curriculum0.getMaxNumberOfTerms());
      assertEquals(6008.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals((-1), curriculum0.getMinElectiveCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(1, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-539), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculum0.getCourseCode());
      assertNotNull(curriculum0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("0", "0", "0", "0", 6007, (-9), (-1), (-9), 0, (-9), (-9), (-9), 6007, (-539), "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", ">rY%IS&o0B,!", "ghgt\"");
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(6007, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getMandatorySubjectCodes());
      assertEquals((-9), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(">rY%IS&o0B,!", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-539), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-9), curriculumData0.getMinNumberOfTerms());
      assertEquals("ghgt\"", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-9), curriculumData0.getMaxNumberOfTerms());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getElectiveSubjectCodes());
      assertEquals((-9), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getOptionalSubjectCodes());
      assertEquals(6007, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals((-9), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNotNull(curriculumData0);
      
      CurriculumKey curriculumKey0 = new CurriculumKey();
      assertNull(curriculumKey0.getCurriculumCode());
      assertNull(curriculumKey0.getCourseCode());
      assertNotNull(curriculumKey0);
      
      Curriculum curriculum0 = curriculumData0.createCurriculum(curriculumKey0);
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(6007, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getMandatorySubjectCodes());
      assertEquals((-9), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(">rY%IS&o0B,!", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-539), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-9), curriculumData0.getMinNumberOfTerms());
      assertEquals("ghgt\"", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-9), curriculumData0.getMaxNumberOfTerms());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getElectiveSubjectCodes());
      assertEquals((-9), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getOptionalSubjectCodes());
      assertEquals(6007, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals((-9), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumKey0.getCurriculumCode());
      assertNull(curriculumKey0.getCourseCode());
      assertEquals((-9), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(6007, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-9), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertNull(curriculum0.getCourseCode());
      assertEquals((-539), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-9), curriculum0.getMinNumberOfTerms());
      assertEquals((-9), curriculum0.getMaxNumberOfTerms());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals((-9), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(6007, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(5988.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertNotNull(curriculum0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("0", "0", "0", "0", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "0", "0", "0", "0", "0");
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("0", curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("0", curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals("0", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals("0", curriculumData0.getComplementarySubjectCodes());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("0", curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNotNull(curriculumData0);
      
      CurriculumKey curriculumKey0 = new CurriculumKey();
      assertNull(curriculumKey0.getCourseCode());
      assertNull(curriculumKey0.getCurriculumCode());
      assertNotNull(curriculumKey0);
      
      Curriculum curriculum0 = curriculumData0.createCurriculum(curriculumKey0);
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("0", curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("0", curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals("0", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals("0", curriculumData0.getComplementarySubjectCodes());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("0", curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumKey0.getCourseCode());
      assertNull(curriculumKey0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertNull(curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertNotNull(curriculum0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(",", ",", ",", ",", 5, 871, 5, (-118), 5, (-2426), 1317, 1317, (-38), (-2426), ",", "b-9-#ZqH$_Z&[P6QI", ",", "", ",");
      assertEquals(",", curriculumData0.getElectiveSubjectCodes());
      assertEquals((-2426), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(",", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals((-118), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals(5, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(",", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(",", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-38), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("b-9-#ZqH$_Z&[P6QI", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-2426), curriculumData0.getMinNumberOfTerms());
      assertEquals(1317, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(",", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(",", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(",", curriculumData0.getMandatorySubjectCodes());
      assertEquals(871, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(5, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(5, curriculumData0.getMinActivitiesNeeded());
      assertEquals(1317, curriculumData0.getMaxNumberOfTerms());
      assertNotNull(curriculumData0);
      
      CurriculumKey curriculumKey0 = new CurriculumKey(",", "br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum");
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", curriculumKey0.getCurriculumCode());
      assertEquals(",", curriculumKey0.getCourseCode());
      assertNotNull(curriculumKey0);
      
      Curriculum curriculum0 = curriculumData0.createCurriculum(curriculumKey0);
      assertEquals(",", curriculumData0.getElectiveSubjectCodes());
      assertEquals((-2426), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(",", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals((-118), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals(5, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(",", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(",", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-38), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("b-9-#ZqH$_Z&[P6QI", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-2426), curriculumData0.getMinNumberOfTerms());
      assertEquals(1317, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(",", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(",", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(",", curriculumData0.getMandatorySubjectCodes());
      assertEquals(871, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(5, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(5, curriculumData0.getMinActivitiesNeeded());
      assertEquals(1317, curriculumData0.getMaxNumberOfTerms());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", curriculumKey0.getCurriculumCode());
      assertEquals(",", curriculumKey0.getCourseCode());
      assertEquals((-2426), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(",", curriculum0.getCourseCode());
      assertEquals(5, curriculum0.getMinActivitiesNeeded());
      assertEquals(1317, curriculum0.getMaxNumberOfTerms());
      assertEquals((-2426), curriculum0.getMinNumberOfTerms());
      assertEquals(5, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(763.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-118), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(871, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", curriculum0.getCurriculumCode());
      assertEquals(1317, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-38), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(5, curriculum0.getMinMandatoryCreditsNeeded());
      assertNotNull(curriculum0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData((String) null, "rQoCiE}_)", "K[m4;^WxkhC", "", (-792), (-792), (-792), (-792), (-792), (-792), (-792), (-399), (-792), 0, "", "{:k~Hof;_f]qR", "07A~p", "{:k~Hof;_f]qR", "K[m4;^WxkhC");
      assertEquals((-399), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-792), curriculumData0.getMaxNumberOfTerms());
      assertEquals("07A~p", curriculumData0.getElectiveSubjectCodes());
      assertEquals("{:k~Hof;_f]qR", curriculumData0.getOptionalSubjectCodes());
      assertEquals("K[m4;^WxkhC", curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-792), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-792), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("rQoCiE}_)", curriculumData0.getIdealOptionalCreditsList());
      assertEquals("", curriculumData0.getMandatorySubjectCodes());
      assertEquals((-792), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals((-792), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("{:k~Hof;_f]qR", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-792), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-792), curriculumData0.getMinActivitiesNeeded());
      assertEquals("K[m4;^WxkhC", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-792), curriculumData0.getMinNumberOfTerms());
      assertNotNull(curriculumData0);
      
      // Undeclared exception!
      try { 
        curriculumData0.getIdealOptionalCredits();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(",", ",", ",", ",", 8, 421, 421, 8, 13, 421, 421, 13, 13, 8, "", ",", ", minMandatoryCreditsNeeded=", "", ", minMandatoryCreditsNeeded=");
      assertEquals(",", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(8, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(",", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(8, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(",", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(421, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculumData0.getMandatorySubjectCodes());
      assertEquals(8, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(", minMandatoryCreditsNeeded=", curriculumData0.getElectiveSubjectCodes());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals(",", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(13, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(13, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(421, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(421, curriculumData0.getMinNumberOfTerms());
      assertEquals(13, curriculumData0.getMinActivitiesNeeded());
      assertEquals(", minMandatoryCreditsNeeded=", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(",", curriculumData0.getOptionalSubjectCodes());
      assertEquals(421, curriculumData0.getMaxNumberOfTerms());
      assertNotNull(curriculumData0);
      
      // Undeclared exception!
      try { 
        curriculumData0.getIdealOptionalCredits();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "i&ONj_\\u_Upx.";
      CurriculumData curriculumData0 = new CurriculumData(string0, string0, "A", "A", 3728, (-1), (-1), (-1), (-2012), (-440), 1924, (-1), (-440), 1924, "1FQW>8hwzqo^$\"w`", "", "1FQW>8hwzqo^$\"w`", "1FQW>8hwzqo^$\"w`", (String) null);
      assertEquals(1924, curriculumData0.getMaxNumberOfTerms());
      assertEquals((-440), curriculumData0.getMinNumberOfTerms());
      assertEquals(3728, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals((-2012), curriculumData0.getMinActivitiesNeeded());
      assertEquals("", curriculumData0.getOptionalSubjectCodes());
      assertEquals("i&ONj_\\u_Upx.", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(1924, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("i&ONj_\\u_Upx.", curriculumData0.getIdealOptionalCreditsList());
      assertEquals((-1), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals((-1), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("A", curriculumData0.getIdealElectiveCreditsList());
      assertEquals((-440), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("A", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("1FQW>8hwzqo^$\"w`", curriculumData0.getElectiveSubjectCodes());
      assertEquals("1FQW>8hwzqo^$\"w`", curriculumData0.getComplementarySubjectCodes());
      assertEquals("1FQW>8hwzqo^$\"w`", curriculumData0.getMandatorySubjectCodes());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNotNull(curriculumData0);
      
      // Undeclared exception!
      try { 
        curriculumData0.getIdealMandatoryCredits();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"i&ONj_\\u_Upx.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertNotNull(curriculumData0);
      
      // Undeclared exception!
      try { 
        curriculumData0.getIdealMandatoryCredits();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("0", "0", "0", "0", 6007, 6007, (-1), 6007, 0, 6007, 6007, 6007, 6007, (-539), "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "ghgt\"");
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getMandatorySubjectCodes());
      assertEquals(6007, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getElectiveSubjectCodes());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getComplementarySubjectCodes());
      assertEquals(6007, curriculumData0.getMaxNumberOfTerms());
      assertEquals("ghgt\"", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getOptionalSubjectCodes());
      assertEquals(6007, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals((-539), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(6007, curriculumData0.getMinNumberOfTerms());
      assertEquals(6007, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(6007, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(6007, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNotNull(curriculumData0);
      
      // Undeclared exception!
      try { 
        curriculumData0.getIdealMandatoryCredits();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("=I2$+FEDe%eUA~sBR", "", "", "=I2$+FEDe%eUA~sBR", 0, 0, 0, 2212, (-765), 0, (-1396), 2212, (-192), 2212, "Yl$jc", "Yl$jc", "Yl$jc", "", "");
      assertEquals(2212, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("=I2$+FEDe%eUA~sBR", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals("Yl$jc", curriculumData0.getMandatorySubjectCodes());
      assertEquals((-192), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-1396), curriculumData0.getMaxNumberOfTerms());
      assertEquals(2212, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("", curriculumData0.getIdealOptionalCreditsList());
      assertEquals("=I2$+FEDe%eUA~sBR", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(2212, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("Yl$jc", curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals((-765), curriculumData0.getMinActivitiesNeeded());
      assertEquals("", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("Yl$jc", curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNotNull(curriculumData0);
      
      // Undeclared exception!
      try { 
        curriculumData0.getIdealElectiveCredits();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=I2$+FEDe%eUA~sBR\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      assertNull(curriculumData0.getElectiveSubjectCodes());
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculumData0.getIdealOptionalCreditsList());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculumData0.getIdealMandatoryCreditsList());
      assertNull(curriculumData0.getComplementarySubjectCodes());
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertNull(curriculumData0.getMandatorySubjectCodes());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertNull(curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfTerms());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertNull(curriculumData0.getIdealElectiveCreditsList());
      assertNotNull(curriculumData0);
      
      // Undeclared exception!
      try { 
        curriculumData0.getIdealElectiveCredits();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("0", "0", "0", "0", 6007, 20, (-1), 20, 0, 20, 20, 20, 6007, (-556), "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "ghgt\"");
      // Undeclared exception!
      try { 
        curriculumData0.getIdealElectiveCredits();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      // Undeclared exception!
      try { 
        curriculumData0.getIdealComplementaryCredits();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(",", ",", ",", ",", 2, 1457, 2, 2, 3247, 2, 3247, 853, 3247, 1457, "R!}'p", "j7mL\"0N>[zGJ3", "(h,'DRwS^jd", (String) null, ", electiveSubjectsList=");
      // Undeclared exception!
      try { 
        curriculumData0.getIdealComplementaryCredits();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("", (String) null, "", "", 125, 1566, 0, 0, (-941), 2114, (-2812), (-2251), 196, (-941), "", "K$!WbPUg&b4+q/", "", "", "^yU$)I)93w+'TT=wi{7");
      // Undeclared exception!
      try { 
        curriculumData0.getExpectedMinAccumulatedCredits(1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(",", ",", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", ",", (-2122), (-2122), 1, 1494, 1, 2, 1494, 1, 1, 0, "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", "\"P@hk P#W/e(zw", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", "xiw#4%_d#(p", ",");
      curriculumData0.setIdealMandatoryCreditsList((String) null);
      // Undeclared exception!
      try { 
        curriculumData0.getExpectedMinAccumulatedCredits(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(",", ",", ",", ",", 5, 871, 5, (-118), 5, 5, 1317, 1317, (-38), 5, ",", "b-9-#ZqH$_Z&[P6QI", ",", "", ",");
      // Undeclared exception!
      try { 
        curriculumData0.getExpectedMinAccumulatedCredits((-118));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(".8T5}p5*U]5uG", ", optionalSubjectsList=", ".8T5}p5*U]5uG", ".8T5}p5*U]5uG", 1, 1, 39, 39, 0, 0, 0, 2787, 0, (-1483), "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", ", electiveSubjectsList=", (String) null, ".8T5}p5*U]5uG", (String) null);
      // Undeclared exception!
      try { 
        curriculumData0.getExpectedMinAccumulatedCredits();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \".8T5}p5*U]5uG\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      // Undeclared exception!
      try { 
        curriculumData0.getExpectedMinAccumulatedCredits();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("0", "0", "0", "0", 6007, 6007, 6007, 6007, 6007, 6007, 6007, 6007, 6007, 6007, "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "ghgt\"");
      // Undeclared exception!
      try { 
        curriculumData0.getExpectedMinAccumulatedCredits();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("", "", "", "", (-1), 1615, (-1), 343, 1615, 1156, 0, 1615, 1615, 1, "", ", minNumberOfTerms=", "", "", (String) null);
      CurriculumKey curriculumKey0 = new CurriculumKey();
      // Undeclared exception!
      try { 
        curriculumData0.createCurriculum(curriculumKey0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("0", "0", "0", "0", 6007, 1, (-1), 1, 0, (-3163), 1, (-3163), 6007, (-539), "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", (String) null, "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", ">rY%IS&o0B,!", "ghgt\"");
      CurriculumKey curriculumKey0 = new CurriculumKey("Dk#0(`", "7bGHg");
      // Undeclared exception!
      try { 
        curriculumData0.createCurriculum(curriculumKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("0", "0", "0", "0", 6007, 1, 1, 1, 2, 2, 1, 2, 6007, (-539), "br.edu.ufcg.computacao.eureca.backend.cre.dao.scsvfiles.mapentries.CurriculumData", (String) null, "br.edu.ufcg.computacao.eureca.backend.cre.dao.scsvfiles.mapentries.CurriculumData", ">rY%IS&o0B,!", "br.edu.ufcg.computacao.eureca.backend.cre.dao.scsvfiles.mapentries.CurriculumData");
      CurriculumKey curriculumKey0 = new CurriculumKey("Dk#(`", "7bGHg");
      // Undeclared exception!
      try { 
        curriculumData0.createCurriculum(curriculumKey0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(",", ",", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", ",", (-2122), (-2122), 1, 1494, 1, 2, 1494, 1, 1, 0, "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", "\"P@hk P#W/e(zw", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", "xiw#4%_d#(p", ",");
      int int0 = curriculumData0.getMaxNumberOfEnrolledCredits();
      assertEquals("xiw#4%_d#(p", curriculumData0.getComplementarySubjectCodes());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", curriculumData0.getMandatorySubjectCodes());
      assertEquals(",", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(",", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(",", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-2122), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(1494, curriculumData0.getMaxNumberOfTerms());
      assertEquals((-2122), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("\"P@hk P#W/e(zw", curriculumData0.getOptionalSubjectCodes());
      assertEquals(1, int0);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", curriculumData0.getElectiveSubjectCodes());
      assertEquals(",", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(1, curriculumData0.getMinActivitiesNeeded());
      assertEquals(1, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(1494, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(1, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(2, curriculumData0.getMinNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("", "*", ", minNumberOfTerms=", "", 3432, 2, 1617, 3432, (-1), 1617, 1, 1617, 39, (-1), "*", "", ", minNumberOfTerms=", "", "");
      int int0 = curriculumData0.getMinNumberOfTerms();
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-1), curriculumData0.getMinActivitiesNeeded());
      assertEquals("*", curriculumData0.getMandatorySubjectCodes());
      assertEquals(3432, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(", minNumberOfTerms=", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(39, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(1617, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(1617, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(3432, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("*", curriculumData0.getIdealOptionalCreditsList());
      assertEquals((-1), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(", minNumberOfTerms=", curriculumData0.getElectiveSubjectCodes());
      assertEquals(2, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(1617, int0);
      assertEquals("", curriculumData0.getOptionalSubjectCodes());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      int int0 = curriculumData0.getMinNumberOfEnrolledCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(",", ",", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", ",", (-2122), (-2122), 1, 1494, 1, 2, 1494, 1, 1, 0, "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", "\"P@hk P#W/e(zw", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", "xiw#4%_d#(p", ",");
      String string0 = curriculumData0.getComplementarySubjectCodes();
      assertEquals("\"P@hk P#W/e(zw", curriculumData0.getOptionalSubjectCodes());
      assertEquals(",", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(1, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(2, curriculumData0.getMinNumberOfTerms());
      assertEquals(",", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(",", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(",", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", curriculumData0.getMandatorySubjectCodes());
      assertEquals(1494, curriculumData0.getMaxNumberOfTerms());
      assertEquals(1494, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals((-2122), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1, curriculumData0.getMinActivitiesNeeded());
      assertEquals((-2122), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(1, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", curriculumData0.getElectiveSubjectCodes());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("xiw#4%_d#(p", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(",", ",", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", ",", (-2122), (-2122), 1, 1494, 1, 2, 1494, 1, 1, 0, "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", "\"P@hk P#W/e(zw", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", "xiw#4%_d#(p", ",");
      int int0 = curriculumData0.getMinElectiveCreditsNeeded();
      assertEquals("\"P@hk P#W/e(zw", curriculumData0.getOptionalSubjectCodes());
      assertEquals(",", curriculumData0.getIdealOptionalCreditsList());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", curriculumData0.getMandatorySubjectCodes());
      assertEquals(2, curriculumData0.getMinNumberOfTerms());
      assertEquals(1494, curriculumData0.getMaxNumberOfTerms());
      assertEquals(",", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(",", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(",", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals((-2122), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(1494, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", curriculumData0.getElectiveSubjectCodes());
      assertEquals(1, curriculumData0.getMinActivitiesNeeded());
      assertEquals((-2122), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(1, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1, int0);
      assertEquals("xiw#4%_d#(p", curriculumData0.getComplementarySubjectCodes());
      assertEquals(1, curriculumData0.getMinNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(", expectedMinAccumulatedCreditsList=", ", expectedMinAccumulatedCreditsList=", ", expectedMinAccumulatedCreditsList=", ", expectedMinAccumulatedCreditsList=", (-3626), 1965, 0, 0, (-1175), 2279, (-1175), (-1175), 3555, 436, ", expectedMinAccumulatedCreditsList=", ",", ", expectedMinAccumulatedCreditsList=", ",", "YA+e0%&?%V");
      int int0 = curriculumData0.getMinMandatoryCreditsNeeded();
      assertEquals((-1175), curriculumData0.getMaxNumberOfTerms());
      assertEquals(3555, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getElectiveSubjectCodes());
      assertEquals((-1175), curriculumData0.getMinActivitiesNeeded());
      assertEquals(436, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(",", curriculumData0.getComplementarySubjectCodes());
      assertEquals(1965, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(2279, curriculumData0.getMinNumberOfTerms());
      assertEquals(",", curriculumData0.getOptionalSubjectCodes());
      assertEquals("YA+e0%&?%V", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-3626), int0);
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals((-1175), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getIdealComplementaryCreditsList());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(", expectedMinAccumulatedCreditsList=", ", expectedMinAccumulatedCreditsList=", ", expectedMinAccumulatedCreditsList=", ", expectedMinAccumulatedCreditsList=", (-3626), 1965, 0, 0, (-1175), 2279, (-1175), (-1175), 3555, 436, ", expectedMinAccumulatedCreditsList=", ",", ", expectedMinAccumulatedCreditsList=", ",", "YA+e0%&?%V");
      String string0 = curriculumData0.getElectiveSubjectCodes();
      assertEquals(", expectedMinAccumulatedCreditsList=", string0);
      assertEquals(",", curriculumData0.getComplementarySubjectCodes());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getMandatorySubjectCodes());
      assertEquals("YA+e0%&?%V", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(3555, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-3626), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals((-1175), curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals((-1175), curriculumData0.getMaxNumberOfTerms());
      assertEquals(436, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1965, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(2279, curriculumData0.getMinNumberOfTerms());
      assertEquals(",", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-1175), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getIdealOptionalCreditsList());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(",", ",", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", ",", (-2122), (-2122), 1, 1494, 1, 2, 1494, 1, 1, 0, "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", "\"P@hk P#W/e(zw", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", "xiw#4%_d#(p", ",");
      String string0 = curriculumData0.getComplementaryActivitiesCodes();
      assertEquals((-2122), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-2122), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(1, curriculumData0.getMinActivitiesNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", curriculumData0.getElectiveSubjectCodes());
      assertEquals(1494, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", curriculumData0.getMandatorySubjectCodes());
      assertEquals(",", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(1494, curriculumData0.getMaxNumberOfTerms());
      assertEquals("\"P@hk P#W/e(zw", curriculumData0.getOptionalSubjectCodes());
      assertEquals(1, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumKey", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(",", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(2, curriculumData0.getMinNumberOfTerms());
      assertEquals(1, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(",", string0);
      assertEquals(",", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("xiw#4%_d#(p", curriculumData0.getComplementarySubjectCodes());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(", expectedMinAccumulatedCreditsList=", ", expectedMinAccumulatedCreditsList=", ", expectedMinAccumulatedCreditsList=", ", expectedMinAccumulatedCreditsList=", (-3626), 1965, 0, 0, (-1175), 2279, (-1175), (-1175), 3555, 436, ", expectedMinAccumulatedCreditsList=", ",", ", expectedMinAccumulatedCreditsList=", ",", "YA+e0%&?%V");
      int int0 = curriculumData0.getMaxNumberOfTerms();
      assertEquals((-1175), curriculumData0.getMinActivitiesNeeded());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(",", curriculumData0.getComplementarySubjectCodes());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals(3555, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-3626), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(2279, curriculumData0.getMinNumberOfTerms());
      assertEquals(",", curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals((-1175), int0);
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(1965, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(436, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1175), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("YA+e0%&?%V", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getMandatorySubjectCodes());
      assertEquals(", expectedMinAccumulatedCreditsList=", curriculumData0.getElectiveSubjectCodes());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("", "", ",", "C?B3OB", 2, 2, (-527), (-527), 0, 2, 0, (-1328), 2, 2, "JVED", "C?B3OB", "C?B3OB", "C?B3OB", "");
      // Undeclared exception!
      try { 
        curriculumData0.getIdealOptionalCredits();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("6!:H", "6!:H", "6!:H", "6!:H", (-1), 269, (-1), 3101, (-1), 3101, 3101, (-1), 0, (-1), "6!:H", "6!:H", "6!:H", "lFV*0nP1i", "");
      int int0 = curriculumData0.getMinComplementaryCreditsNeeded();
      assertEquals(269, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(3101, curriculumData0.getMaxNumberOfTerms());
      assertEquals((-1), curriculumData0.getMinActivitiesNeeded());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("6!:H", curriculumData0.getMandatorySubjectCodes());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("6!:H", curriculumData0.getElectiveSubjectCodes());
      assertEquals((-1), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals((-1), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("6!:H", curriculumData0.getIdealOptionalCreditsList());
      assertEquals(3101, int0);
      assertEquals("lFV*0nP1i", curriculumData0.getComplementarySubjectCodes());
      assertEquals(3101, curriculumData0.getMinNumberOfTerms());
      assertEquals((-1), curriculumData0.getMinMandatoryCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("0", "0", "0", "0", 6007, 1, (-1), 1, 0, 1, 1, 1, 6007, (-539), "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", (String) null, "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", ">rY%IS&o0B,!", "ghgt\"");
      assertEquals("0", curriculumData0.getIdealElectiveCreditsList());
      assertEquals("0", curriculumData0.getIdealOptionalCreditsList());
      assertEquals("0", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("0", curriculumData0.getIdealComplementaryCreditsList());
      
      ArrayList<Integer> arrayList0 = curriculumData0.getIdealElectiveCredits();
      assertEquals(0, curriculumData0.getMinActivitiesNeeded());
      assertEquals(1, curriculumData0.getMinNumberOfTerms());
      assertEquals(6007, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("ghgt\"", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals(1, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getElectiveSubjectCodes());
      assertEquals(">rY%IS&o0B,!", curriculumData0.getComplementarySubjectCodes());
      assertEquals((-539), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertNotNull(arrayList0);
      assertEquals(6007, curriculumData0.getMinMandatoryCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(",", ",", ",", ",", 5, 871, 5, (-118), 5, (-2426), 1317, 1317, (-38), (-2426), ",", "b-9-#ZqH$_Z&[P6QI", ",", "", ",");
      assertEquals(",", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals((-2426), curriculumData0.getMinNumberOfTerms());
      assertEquals(",", curriculumData0.getIdealElectiveCreditsList());
      
      curriculumData0.getExpectedMinAccumulatedCredits();
      assertEquals((-2426), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(",", curriculumData0.getElectiveSubjectCodes());
      assertEquals(5, curriculumData0.getMinActivitiesNeeded());
      assertEquals(871, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(5, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(",", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals(1317, curriculumData0.getMaxNumberOfTerms());
      assertEquals(",", curriculumData0.getMandatorySubjectCodes());
      assertEquals((-38), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-118), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(5, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("b-9-#ZqH$_Z&[P6QI", curriculumData0.getOptionalSubjectCodes());
      assertEquals(1317, curriculumData0.getMinNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(",", ",", ",", ",", 5, 871, 5, 5, 5, (-2426), 871, 871, (-57), (-2426), ",", ",", ",", ",", ",");
      curriculumData0.getIdealMandatoryCredits();
      assertEquals(5, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(871, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(5, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(5, curriculumData0.getMinActivitiesNeeded());
      assertEquals(871, curriculumData0.getMaxNumberOfTerms());
      assertEquals(5, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-2426), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(871, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals((-2426), curriculumData0.getMinNumberOfTerms());
      assertEquals((-57), curriculumData0.getMaxNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("", "]UQy=h \"%T]<Cvh?o\"", "]UQy=h \"%T]<Cvh?o\"", "", 0, 0, 2, (-468), (-468), (-468), 2, 1327, 0, (-1220), "]UQy=h \"%T]<Cvh?o\"", "]UQy=h \"%T]<Cvh?o\"", "", "]UQy=h \"%T]<Cvh?o\"", "");
      String string0 = curriculumData0.getMandatorySubjectCodes();
      assertEquals((-468), curriculumData0.getMinActivitiesNeeded());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getOptionalSubjectCodes());
      assertEquals(0, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals("", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(1327, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculumData0.getElectiveSubjectCodes());
      assertEquals(2, curriculumData0.getMaxNumberOfTerms());
      assertEquals((-468), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(2, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", string0);
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals((-1220), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-468), curriculumData0.getMinNumberOfTerms());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getComplementarySubjectCodes());
      assertEquals("]UQy=h \"%T]<Cvh?o\"", curriculumData0.getIdealOptionalCreditsList());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("6!:H", "6!:H", "6!:H", "6!:H", (-1), 269, (-1), 3101, (-1), 3101, 3101, (-1), 0, (-1), "6!:H", "6!:H", "6!:H", "lFV*0nP1i", "");
      int int0 = curriculumData0.getExceptionalAdditionalEnrolledCredits();
      assertEquals((-1), int0);
      assertEquals("6!:H", curriculumData0.getElectiveSubjectCodes());
      assertEquals(269, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(3101, curriculumData0.getMaxNumberOfTerms());
      assertEquals((-1), curriculumData0.getMinActivitiesNeeded());
      assertEquals((-1), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals("6!:H", curriculumData0.getIdealOptionalCreditsList());
      assertEquals((-1), curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculumData0.getComplementaryActivitiesCodes());
      assertEquals("6!:H", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("lFV*0nP1i", curriculumData0.getComplementarySubjectCodes());
      assertEquals(3101, curriculumData0.getMinNumberOfTerms());
      assertEquals(3101, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals("6!:H", curriculumData0.getOptionalSubjectCodes());
      assertEquals((-1), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals("6!:H", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMaxNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", "", "", (-101), (-101), 0, (-1015), (-3567), 0, (-3567), 0, 642, 1330, "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", " ux'TI@6/[", "", "", "");
      int int0 = curriculumData0.getMinActivitiesNeeded();
      assertEquals("", curriculumData0.getComplementarySubjectCodes());
      assertEquals(1330, curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculumData0.getIdealElectiveCreditsList());
      assertEquals(0, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
      assertEquals((-101), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals((-3567), int0);
      assertEquals((-101), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals((-1015), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals((-3567), curriculumData0.getMaxNumberOfTerms());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getIdealMandatoryCreditsList());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getMandatorySubjectCodes());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData", curriculumData0.getIdealOptionalCreditsList());
      assertEquals("", curriculumData0.getIdealComplementaryCreditsList());
      assertEquals(642, curriculumData0.getMaxNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("", "{SyH=", "v)SLqoFe5885", "4kwxrH2~U^", 3578, 654, 3578, 654, 3578, 654, 3578, 2, 654, 0, "{SyH=", "J=*h2:FO4DfZn$", "XZrjl9@tz\"6{%z[$$Gm", "v)SLqoFe5885", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.CurriculumData");
      // Undeclared exception!
      try { 
        curriculumData0.getIdealComplementaryCredits();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      int int0 = curriculumData0.getMinOptionalCreditsNeeded();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      String string0 = curriculumData0.getOptionalSubjectCodes();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(",", ",", ",", ",", (-11), (-11), (-11), (-11), (-11), (-11), (-11), (-11), (-11), (-11), ",", ",", ",", ",", ",");
      // Undeclared exception!
      try { 
        curriculumData0.getExpectedMinAccumulatedCredits(2671);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("0", "0", "0", "0", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "0", "0", "0", "0", "0");
      assertEquals(1, curriculumData0.getMinNumberOfTerms());
      
      int int0 = curriculumData0.getExpectedMinAccumulatedCredits(1);
      assertEquals(1, curriculumData0.getMaxNumberOfTerms());
      assertEquals(1, curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculumData0.getMinNumberOfEnrolledCredits());
      assertEquals(0, int0);
      assertEquals(1, curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals(1, curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals(1, curriculumData0.getMinMandatoryCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      curriculumData0.setMinNumberOfTerms(767);
      assertEquals(767, curriculumData0.getMinNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      String string0 = curriculumData0.getIdealMandatoryCreditsList();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      String string0 = curriculumData0.getIdealElectiveCreditsList();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      String string0 = curriculumData0.getIdealOptionalCreditsList();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      curriculumData0.setMinActivitiesNeeded(2077);
      assertEquals(2077, curriculumData0.getMinActivitiesNeeded());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      curriculumData0.setMandatorySubjectCodes("YHMHu5bx");
      assertEquals(0, curriculumData0.getMinNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      curriculumData0.setComplementaryActivitiesCodes((String) null);
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData(",", ",", ",", ",", (-11), (-11), (-11), (-11), (-11), (-11), (-11), (-11), (-11), (-11), ",", ",", ",", ",", ",");
      curriculumData0.setExceptionalAdditionalEnrolledCredits((-11));
      assertEquals((-11), curriculumData0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-11), curriculumData0.getMinNumberOfTerms());
      assertEquals((-11), curriculumData0.getMinElectiveCreditsNeeded());
      assertEquals((-11), curriculumData0.getMaxNumberOfTerms());
      assertEquals((-11), curriculumData0.getMinComplementaryCreditsNeeded());
      assertEquals((-11), curriculumData0.getMaxNumberOfEnrolledCredits());
      assertEquals((-11), curriculumData0.getMinActivitiesNeeded());
      assertEquals((-11), curriculumData0.getMinMandatoryCreditsNeeded());
      assertEquals((-11), curriculumData0.getMinOptionalCreditsNeeded());
      assertEquals((-11), curriculumData0.getMinNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      curriculumData0.setOptionalSubjectCodes("+");
      assertEquals(0, curriculumData0.getExceptionalAdditionalEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      String string0 = curriculumData0.getIdealComplementaryCreditsList();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      curriculumData0.setMinElectiveCreditsNeeded(767);
      assertEquals(767, curriculumData0.getMinElectiveCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      curriculumData0.setIdealComplementaryCreditsList("+");
      assertNull(curriculumData0.getComplementaryActivitiesCodes());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      curriculumData0.setIdealOptionalCreditsList((String) null);
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      curriculumData0.setMaxNumberOfEnrolledCredits(1994);
      assertEquals(1994, curriculumData0.getMaxNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      curriculumData0.setMinComplementaryCreditsNeeded(2077);
      assertEquals(2077, curriculumData0.getMinComplementaryCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      Collection<String> collection0 = curriculumData0.getAllSubjectsList();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData();
      curriculumData0.setIdealElectiveCreditsList((String) null);
      assertNull(curriculumData0.getIdealComplementaryCreditsList());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CurriculumData curriculumData0 = new CurriculumData("0", "0", "0", "0", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "0", "0", "0", "0", "0");
      CurriculumKey curriculumKey0 = new CurriculumKey();
      Curriculum curriculum0 = curriculumData0.createCurriculum(curriculumKey0);
      assertEquals(1, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1, curriculum0.getMinActivitiesNeeded());
      assertEquals(4.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMinNumberOfEnrolledCredits());
  }
}
