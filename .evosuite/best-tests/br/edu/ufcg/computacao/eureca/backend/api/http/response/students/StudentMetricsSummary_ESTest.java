/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:22:02 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.students;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentMetrics;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentMetricsSummary;
import br.edu.ufcg.computacao.eureca.backend.core.models.CostClass;
import br.edu.ufcg.computacao.eureca.backend.core.models.RiskClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StudentMetricsSummary_ESTest extends StudentMetricsSummary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StudentMetrics studentMetrics0 = mock(StudentMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(studentMetrics0).getCost();
      doReturn(0.0).when(studentMetrics0).getRisk();
      StudentMetricsSummary studentMetricsSummary0 = new StudentMetricsSummary((-1414.8368), studentMetrics0, (-1414.8368), (-1414.8368));
      studentMetricsSummary0.setTermsCount(1857.28479264);
      double double0 = studentMetricsSummary0.getTermsCount();
      assertEquals(1857.28479264, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StudentMetrics studentMetrics0 = mock(StudentMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(studentMetrics0).getCost();
      doReturn(0.0).when(studentMetrics0).getRisk();
      StudentMetricsSummary studentMetricsSummary0 = new StudentMetricsSummary((-1.0), studentMetrics0, 3212.297582651, 0.0);
      double double0 = studentMetricsSummary0.getTermsCount();
      assertEquals(RiskClass.INACCURATE, studentMetricsSummary0.getRiskClass());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StudentMetrics studentMetrics0 = mock(StudentMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(studentMetrics0).getCost();
      doReturn(0.0).when(studentMetrics0).getRisk();
      StudentMetricsSummary studentMetricsSummary0 = new StudentMetricsSummary(0.0, studentMetrics0, 0.0, 0.0);
      studentMetricsSummary0.setRiskClass((RiskClass) null);
      studentMetricsSummary0.getRiskClass();
      assertEquals(0.0, studentMetricsSummary0.getTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StudentMetrics studentMetrics0 = mock(StudentMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(studentMetrics0).getCost();
      doReturn(0.0).when(studentMetrics0).getRisk();
      StudentMetricsSummary studentMetricsSummary0 = new StudentMetricsSummary((-364.289401265182), studentMetrics0, 3595.72594, (-3729.1396271752));
      studentMetricsSummary0.setMetrics((StudentMetrics) null);
      studentMetricsSummary0.getMetrics();
      assertEquals((-364.289401265182), studentMetricsSummary0.getTermsCount(), 0.01);
      assertEquals(RiskClass.INACCURATE, studentMetricsSummary0.getRiskClass());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StudentMetrics studentMetrics0 = mock(StudentMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(studentMetrics0).getCost();
      doReturn(0.0).when(studentMetrics0).getRisk();
      StudentMetricsSummary studentMetricsSummary0 = new StudentMetricsSummary(0.0, studentMetrics0, 0.0, 0.0);
      studentMetricsSummary0.setCostClass((CostClass) null);
      studentMetricsSummary0.getCostClass();
      assertEquals(0.0, studentMetricsSummary0.getTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StudentMetricsSummary studentMetricsSummary0 = null;
      try {
        studentMetricsSummary0 = new StudentMetricsSummary((-534.341), (StudentMetrics) null, (-534.341), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentMetricsSummary", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StudentMetrics studentMetrics0 = mock(StudentMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(studentMetrics0).getCost();
      doReturn(0.0).when(studentMetrics0).getRisk();
      StudentMetricsSummary studentMetricsSummary0 = new StudentMetricsSummary(0.0, studentMetrics0, 0.0, 0.0);
      studentMetricsSummary0.getCostClass();
      assertEquals(0.0, studentMetricsSummary0.getTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      StudentMetrics studentMetrics0 = mock(StudentMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(studentMetrics0).getCost();
      doReturn(0.0).when(studentMetrics0).getRisk();
      StudentMetricsSummary studentMetricsSummary0 = new StudentMetricsSummary(0.0, studentMetrics0, 0.0, 0.0);
      double double0 = studentMetricsSummary0.getTermsCount();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      StudentMetrics studentMetrics0 = mock(StudentMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(studentMetrics0).getCost();
      doReturn(0.0).when(studentMetrics0).getRisk();
      StudentMetricsSummary studentMetricsSummary0 = new StudentMetricsSummary(0.0, studentMetrics0, 0.0, 0.0);
      RiskClass riskClass0 = studentMetricsSummary0.getRiskClass();
      studentMetricsSummary0.setRiskClass(riskClass0);
      assertEquals(0.0, studentMetricsSummary0.getTermsCount(), 0.01);
  }
}
