/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 22:15:21 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.ScheduleKey;
import br.edu.ufcg.computacao.eureca.backend.core.models.SubjectScheduleKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ScheduleKey_ESTest extends ScheduleKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey();
      String string0 = scheduleKey0.getTerm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey("", "", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.ScheduleKey", "", "");
      String string0 = scheduleKey0.getTerm();
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.ScheduleKey", scheduleKey0.getSubjectCode());
      assertEquals("", scheduleKey0.getCourseCode());
      assertEquals("", scheduleKey0.getClassCode());
      assertEquals("", string0);
      assertEquals("", scheduleKey0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey("", "", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.ScheduleKey", "", "");
      String string0 = scheduleKey0.getSubjectCode();
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.ScheduleKey", string0);
      assertEquals("", scheduleKey0.getCourseCode());
      assertEquals("", scheduleKey0.getTerm());
      assertEquals("", scheduleKey0.getClassCode());
      assertEquals("", scheduleKey0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey("", "", "", "jF@rvj$", "^wt|0M");
      String string0 = scheduleKey0.getSubjectCode();
      assertEquals("", string0);
      assertEquals("jF@rvj$", scheduleKey0.getClassCode());
      assertEquals("", scheduleKey0.getCourseCode());
      assertEquals("^wt|0M", scheduleKey0.getTerm());
      assertEquals("", scheduleKey0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey();
      String string0 = scheduleKey0.getCurriculumCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey();
      scheduleKey0.setCurriculumCode("");
      String string0 = scheduleKey0.getCurriculumCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey();
      scheduleKey0.setCourseCode("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.ScheduleKey");
      String string0 = scheduleKey0.getCourseCode();
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.ScheduleKey", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey();
      String string0 = scheduleKey0.getClassCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey("oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^");
      scheduleKey0.setClassCode("");
      String string0 = scheduleKey0.getClassCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey();
      ScheduleKey scheduleKey1 = new ScheduleKey((String) null, "", (String) null, (String) null, "DTC`X+a=4lKt@a");
      int int0 = scheduleKey0.compareTo(scheduleKey1);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey();
      ScheduleKey scheduleKey1 = new ScheduleKey("", "vNb", "", "", "O^//!3|@XSc6k]");
      int int0 = scheduleKey0.compareTo(scheduleKey1);
      assertEquals("", scheduleKey1.getSubjectCode());
      assertEquals("O^//!3|@XSc6k]", scheduleKey1.getTerm());
      assertEquals("", scheduleKey1.getClassCode());
      assertEquals((-8), int0);
      assertEquals("", scheduleKey1.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey();
      // Undeclared exception!
      try { 
        scheduleKey0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.ScheduleKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey("", "", "Qu@aj", "", "");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        scheduleKey0.compareTo(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.ScheduleKey
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.ScheduleKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey();
      String string0 = scheduleKey0.getSubjectCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey();
      ScheduleKey scheduleKey1 = new ScheduleKey();
      assertTrue(scheduleKey1.equals((Object)scheduleKey0));
      
      scheduleKey1.setClassCode("qb'K_y!hvY+J");
      boolean boolean0 = scheduleKey0.equals(scheduleKey1);
      assertFalse(scheduleKey1.equals((Object)scheduleKey0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey();
      scheduleKey0.setSubjectCode("zdb3}nrUn ]");
      ScheduleKey scheduleKey1 = new ScheduleKey();
      boolean boolean0 = scheduleKey0.equals(scheduleKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey((String) null, "kvZ>;0$Ft]", "kvZ>;0$Ft]", "kvZ>;0$Ft]", (String) null);
      ScheduleKey scheduleKey1 = new ScheduleKey();
      boolean boolean0 = scheduleKey0.equals(scheduleKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey("", "", "", "", (String) null);
      ScheduleKey scheduleKey1 = new ScheduleKey("C", "Nl0Qf!", (String) null, "", "B,&S*l :2CtJ^z fR");
      boolean boolean0 = scheduleKey0.equals(scheduleKey1);
      assertEquals("Nl0Qf!", scheduleKey1.getCurriculumCode());
      assertFalse(boolean0);
      assertEquals("", scheduleKey1.getClassCode());
      assertEquals("C", scheduleKey1.getCourseCode());
      assertEquals("B,&S*l :2CtJ^z fR", scheduleKey1.getTerm());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey();
      boolean boolean0 = scheduleKey0.equals("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.ScheduleKey");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey();
      ScheduleKey scheduleKey1 = new ScheduleKey();
      boolean boolean0 = scheduleKey0.equals(scheduleKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey("oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^");
      boolean boolean0 = scheduleKey0.equals(scheduleKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey("oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^");
      boolean boolean0 = scheduleKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey();
      scheduleKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey("oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^");
      scheduleKey0.setCourseCode((String) null);
      String string0 = scheduleKey0.getCourseCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey("oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^");
      String string0 = scheduleKey0.getTerm();
      assertEquals("oE>h6VBkA*^", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey("oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^");
      scheduleKey0.setTerm("oE>h6VBkA*^");
      assertEquals("oE>h6VBkA*^", scheduleKey0.getClassCode());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey();
      int int0 = scheduleKey0.compareTo(scheduleKey0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey("oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^", "oE>h6VBkA*^");
      String string0 = scheduleKey0.getCurriculumCode();
      assertEquals("oE>h6VBkA*^", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey("", "", "Y(E", "Y(E", "");
      String string0 = scheduleKey0.getCourseCode();
      assertEquals("Y(E", scheduleKey0.getClassCode());
      assertEquals("", scheduleKey0.getTerm());
      assertEquals("", scheduleKey0.getCurriculumCode());
      assertEquals("Y(E", scheduleKey0.getSubjectCode());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey("", "", "Y(E", "Y(E", "");
      SubjectScheduleKey subjectScheduleKey0 = scheduleKey0.createSubjectScheduleKey();
      assertEquals("Y(E", subjectScheduleKey0.getSubjectCode());
      assertEquals("Y(E", scheduleKey0.getClassCode());
      assertEquals("", subjectScheduleKey0.getCourseCode());
      assertEquals("", subjectScheduleKey0.getCurriculumCode());
      assertEquals("", subjectScheduleKey0.getTerm());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ScheduleKey scheduleKey0 = new ScheduleKey("", "", "Y(E", "Y(E", "");
      String string0 = scheduleKey0.getClassCode();
      assertEquals("", scheduleKey0.getCourseCode());
      assertEquals("Y(E", string0);
      assertEquals("", scheduleKey0.getCurriculumCode());
      assertEquals("Y(E", scheduleKey0.getSubjectCode());
      assertEquals("", scheduleKey0.getTerm());
  }
}
