/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 21:46:36 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.models.Subject;
import br.edu.ufcg.computacao.eureca.backend.core.models.SubjectType;
import br.edu.ufcg.computacao.eureca.backend.core.util.EurecaUtil;
import java.time.format.TextStyle;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EurecaUtil_ESTest extends EurecaUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Collection<Object> collection0 = EurecaUtil.intersection((Collection<Object>) arrayList0, (Collection<Object>) arrayList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>((SortedSet<? extends Locale>) treeSet0);
      Locale locale0 = Locale.PRC;
      priorityQueue0.add(locale0);
      // Undeclared exception!
      try { 
        EurecaUtil.intersection((Collection<Locale>) priorityQueue0, (Collection<Locale>) treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        EurecaUtil.getSubjectType((Subject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.util.EurecaUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        EurecaUtil.difference((Collection<TextStyle>) null, (Collection<TextStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>((SortedSet<? extends Locale>) treeSet0);
      Locale locale0 = Locale.CHINESE;
      priorityQueue0.add(locale0);
      // Undeclared exception!
      try { 
        EurecaUtil.difference((Collection<Locale>) priorityQueue0, (Collection<Locale>) treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("8w", "8w", "8w", "8w", "O", (-1142), (-1142), "8w", treeSet0, (-1142), treeSet0, treeSet0);
      SubjectType subjectType0 = EurecaUtil.getSubjectType(subject0);
      assertEquals(SubjectType.OPTIONAL, subjectType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("br.edu.ufcg.computacao.eureca.backend.core.util.EurecaUtil", "br.edu.ufcg.computacao.eureca.backend.core.util.EurecaUtil", "br.edu.ufcg.computacao.eureca.backend.core.util.EurecaUtil", "br.edu.ufcg.computacao.eureca.backend.core.util.EurecaUtil", "M", 697, 697, "br.edu.ufcg.computacao.eureca.backend.core.util.EurecaUtil", stack0, 697, stack0, stack0);
      SubjectType subjectType0 = EurecaUtil.getSubjectType(subject0);
      assertEquals(SubjectType.MANDATORY, subjectType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("F ne1s.loQg,unn;]el(", "F ne1s.loQg,unn;]el(", "F ne1s.loQg,unn;]el(", "F ne1s.loQg,unn;]el(", "E", 1564, 1564, "F ne1s.loQg,unn;]el(", linkedHashSet0, 1564, linkedHashSet0, linkedHashSet0);
      SubjectType subjectType0 = EurecaUtil.getSubjectType(subject0);
      assertEquals(SubjectType.ELECTIVE, subjectType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("F ne1s.loQg,unn;]el(", "F ne1s.loQg,unn;]el(", "F ne1s.loQg,unn;]el(", "F ne1s.loQg,unn;]el(", "F ne1s.loQg,unn;]el(", 1564, 1564, "F ne1s.loQg,unn;]el(", linkedHashSet0, 1564, linkedHashSet0, linkedHashSet0);
      EurecaUtil.getSubjectType(subject0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("q", "q", "q", "q", "C", 55, 55, "q", treeSet0, 55, treeSet0, treeSet0);
      SubjectType subjectType0 = EurecaUtil.getSubjectType(subject0);
      assertEquals(SubjectType.COMPLEMENTARY, subjectType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeSet<LinkedList<String>> treeSet0 = new TreeSet<LinkedList<String>>();
      Collection<LinkedList<String>> collection0 = EurecaUtil.difference((Collection<LinkedList<String>>) treeSet0, (Collection<LinkedList<String>>) treeSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        EurecaUtil.intersection((Collection<Object>) null, (Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.util.EurecaUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EurecaUtil eurecaUtil0 = new EurecaUtil();
  }
}
