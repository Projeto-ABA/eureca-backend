/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 21:15:09 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.ScheduleResponse;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.StudentPreEnrollment;
import br.edu.ufcg.computacao.eureca.backend.core.models.ClassSchedule;
import br.edu.ufcg.computacao.eureca.backend.core.models.Schedule;
import br.edu.ufcg.computacao.eureca.backend.core.models.Subject;
import br.edu.ufcg.computacao.eureca.backend.core.models.SubjectSchedule;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StudentPreEnrollment_ESTest extends StudentPreEnrollment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject subject0 = new Subject((String) null, "O", "O", "O", "O", (int) integer0, (int) integer0, (String) null, linkedList0, (int) integer0, linkedList0, linkedList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      PriorityQueue<SubjectSchedule> priorityQueue0 = new PriorityQueue<SubjectSchedule>();
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("O", 0, integer0, 0, 0, 0, (int) integer0);
      studentPreEnrollment0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) priorityQueue0);
      assertEquals(0, studentPreEnrollment0.getTerm());
      assertEquals(0, studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(0, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(0, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(0, studentPreEnrollment0.getMaxComplementaryCredits());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(189689061);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("C", 189689061, integer0, 189689061, 80, 3, 80);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Subject subject0 = new Subject("C", "C", "C", "C", "C", (-713), (-3), "Q.U@9D!/Kv^)Vj:fb", arrayList0, 80, arrayList0, arrayList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      Vector<ClassSchedule> vector0 = new Vector<ClassSchedule>();
      Schedule schedule0 = new Schedule((-768), "Q.U@9D!/Kv^)Vj:fb", vector0);
      hashMap0.put("Q.U@9D!/Kv^)Vj:fb", schedule0);
      ArrayList<SubjectSchedule> arrayList1 = new ArrayList<SubjectSchedule>();
      studentPreEnrollment0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayList1);
      assertEquals((-713), studentPreEnrollment0.getCurrentEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(293);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment((String) null, 0, integer0, 0, 0, 0, 0);
      studentPreEnrollment0.setComplementaryCredits(293);
      int int0 = studentPreEnrollment0.getTotalCredits();
      assertEquals(293, studentPreEnrollment0.getComplementaryCredits());
      assertEquals(293, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(2249);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("VD:xc=BZ-W?ZxkqRU(/", 0, integer0, 0, 2249, 0, (-997));
      studentPreEnrollment0.setElectiveCredits((-597));
      int int0 = studentPreEnrollment0.getTotalCredits();
      assertEquals((-597), studentPreEnrollment0.getElectiveCredits());
      assertEquals((-597), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-759));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("46F()IE", (-759), integer0, Integer.MAX_VALUE, Integer.MAX_VALUE, (-759), (-373));
      boolean boolean0 = studentPreEnrollment0.isElectiveNotFull();
      assertEquals((-373), studentPreEnrollment0.getMaxElectiveCredits());
      assertFalse(boolean0);
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals((-759), studentPreEnrollment0.getTerm());
      assertEquals((-759), studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(Integer.MAX_VALUE, studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(Integer.MAX_VALUE, studentPreEnrollment0.getMaxMandatoryCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-977));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("", (-977), integer0, 8232, (-977), 0, 0);
      boolean boolean0 = studentPreEnrollment0.isComplementaryNotFull();
      assertEquals((-977), studentPreEnrollment0.getTerm());
      assertEquals(8232, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(0, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(0, studentPreEnrollment0.getMaxElectiveCredits());
      assertFalse(boolean0);
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals((-977), studentPreEnrollment0.getMaxOptionalCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(2);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("com.google.common.collect.Maps$BiMapConverter", 2502, integer0, 1004, 0, 0, 2);
      boolean boolean0 = studentPreEnrollment0.isOptionalNotFull();
      assertEquals(0, studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(2502, studentPreEnrollment0.getTerm());
      assertEquals(1004, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(0, studentPreEnrollment0.getMaxComplementaryCredits());
      assertFalse(boolean0);
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(2, studentPreEnrollment0.getMaxElectiveCredits());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-3822));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("9#I(tV!0vEQX^CUy3", (-3822), integer0, (-32), (-32), (-224), 8199);
      boolean boolean0 = studentPreEnrollment0.isMandatoryNotFull();
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals((-3822), studentPreEnrollment0.getTerm());
      assertEquals(8199, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals((-224), studentPreEnrollment0.getMaxComplementaryCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals((-32), studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals((-32), studentPreEnrollment0.getMaxOptionalCredits());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-4061));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("", (-4061), integer0, (-1), (-2157), (-2157), (-2157));
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      
      studentPreEnrollment0.setPossibleGraduate(true);
      boolean boolean0 = studentPreEnrollment0.isPossibleGraduate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(2249);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("VD:xc=BZ-W?ZxkqRU(/", 0, integer0, 0, 2249, 0, (-997));
      studentPreEnrollment0.setOptionalCredits(984);
      int int0 = studentPreEnrollment0.getTotalCredits();
      assertEquals(984, studentPreEnrollment0.getOptionalCredits());
      assertEquals(984, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1494);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("R", 0, integer0, 0, 1494, 69, 69);
      int int0 = studentPreEnrollment0.getTerm();
      assertEquals(69, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(0, int0);
      assertEquals(1494, studentPreEnrollment0.getMaxOptionalCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(69, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(0, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-3670));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("M{!2m.hOrpTr-Ak", (-3670), integer0, 3977, (-3670), 0, 3977);
      int int0 = studentPreEnrollment0.getTerm();
      assertEquals((-3670), int0);
      assertEquals(0, studentPreEnrollment0.getMaxComplementaryCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(3977, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals(3977, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals((-3670), studentPreEnrollment0.getMaxOptionalCredits());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(67);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("", 67, integer0, 0, 0, 0, 77);
      studentPreEnrollment0.setSubjects((Map<String, ScheduleResponse>) null);
      studentPreEnrollment0.getSubjects();
      assertEquals(0, studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(67, studentPreEnrollment0.getTerm());
      assertEquals(77, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(0, studentPreEnrollment0.getMaxComplementaryCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(0, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = Integer.getInteger("M", (-1596));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("C", (-1596), integer0, (-1596), (-1596), 1683, (-1596));
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Subject subject0 = new Subject("f\"Y&8Oy*/>,D", "f\"Y&8Oy*/>,D", "org.apache.commons.io.filefilter.DelegateFileFilter", "C", "C", 1683, (-1596), "f\"Y&8Oy*/>,D", set0, 67, set0, set0);
      subject0.setCredits(Integer.MIN_VALUE);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      LinkedHashSet<ClassSchedule> linkedHashSet0 = new LinkedHashSet<ClassSchedule>(79, 2172.4F);
      Schedule schedule0 = new Schedule(79, "@!8vH*6", linkedHashSet0);
      hashMap0.put("M", schedule0);
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      studentPreEnrollment0.enrollSubject(subjectSchedule0);
      studentPreEnrollment0.getSubjects();
      assertEquals(Integer.MIN_VALUE, studentPreEnrollment0.getTotalCredits());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(4);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment((String) null, 1351, integer0, 1351, 0, 0, 4);
      studentPreEnrollment0.getStudentRegistration();
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(0, studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals(4, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(1351, studentPreEnrollment0.getTerm());
      assertEquals(0, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(1351, studentPreEnrollment0.getMaxMandatoryCredits());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(1464);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("", 1464, integer0, 0, 1, 1, 0);
      studentPreEnrollment0.getStudentRegistration();
      assertEquals(1464, studentPreEnrollment0.getTerm());
      assertEquals(1, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(0, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(1, studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(0, studentPreEnrollment0.getMaxMandatoryCredits());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(8192);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("VGS#^{~J\tr<}A", 0, integer0, (-934), (-934), 8192, 0);
      studentPreEnrollment0.setOptionalCredits(2600);
      int int0 = studentPreEnrollment0.getOptionalCredits();
      assertEquals(2600, studentPreEnrollment0.getTotalCredits());
      assertEquals(2600, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = Integer.valueOf(1796);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("]n Pa(qxa", 928, integer0, 928, 928, 928, 0);
      studentPreEnrollment0.setOptionalCredits((-1912));
      int int0 = studentPreEnrollment0.getOptionalCredits();
      assertEquals((-1912), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = Integer.valueOf(1796);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("]n Pa(qxa", 928, integer0, 928, 928, 928, 0);
      int int0 = studentPreEnrollment0.getMaxOptionalCredits();
      assertEquals(928, studentPreEnrollment0.getMaxComplementaryCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(928, int0);
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals(928, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(928, studentPreEnrollment0.getTerm());
      assertEquals(0, studentPreEnrollment0.getMaxElectiveCredits());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-46));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment(")gRJN", 2222, integer0, (-1931), (-46), 2222, (-46));
      int int0 = studentPreEnrollment0.getMaxOptionalCredits();
      assertEquals((-46), studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals((-1931), studentPreEnrollment0.getMaxMandatoryCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(2222, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(2222, studentPreEnrollment0.getTerm());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals((-46), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer((-1519));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("0", (-392), integer0, (-1464), 0, 0, 0);
      assertEquals((-1464), studentPreEnrollment0.getMaxMandatoryCredits());
      
      studentPreEnrollment0.setMaxMandatoryCredits(0);
      int int0 = studentPreEnrollment0.getMaxMandatoryCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-1558));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("E", (-1558), integer0, (-1558), (-1558), 5760, (-1558));
      int int0 = studentPreEnrollment0.getMaxMandatoryCredits();
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals((-1558), studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals((-1558), int0);
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(5760, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals((-1558), studentPreEnrollment0.getTerm());
      assertEquals((-1558), studentPreEnrollment0.getMaxOptionalCredits());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-476));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("", (-476), integer0, 0, (-1934), (-1934), 0);
      int int0 = studentPreEnrollment0.getMaxElectiveCredits();
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(0, int0);
      assertEquals((-1934), studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(0, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals((-1934), studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals((-476), studentPreEnrollment0.getTerm());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer((-3670));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("M{!2m.hOrpTr-Ak", (-3670), integer0, 3977, (-3670), 0, 3977);
      int int0 = studentPreEnrollment0.getMaxElectiveCredits();
      assertEquals(3977, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals(0, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(3977, int0);
      assertEquals((-3670), studentPreEnrollment0.getMaxOptionalCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals((-3670), studentPreEnrollment0.getTerm());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer((-476));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("", (-476), integer0, 0, (-1934), (-1934), 0);
      studentPreEnrollment0.setMaxCredits(0);
      int int0 = studentPreEnrollment0.getMaxCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer((-476));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("", (-476), integer0, (-476), (-476), (-476), (-476));
      int int0 = studentPreEnrollment0.getMaxCredits();
      assertEquals((-476), int0);
      assertEquals((-476), studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals((-476), studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals((-476), studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals((-476), studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals((-476), studentPreEnrollment0.getTerm());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer((-3670));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("M{!2m.hOrpTr-Ak", (-3670), integer0, 3977, (-3670), 0, 3977);
      int int0 = studentPreEnrollment0.getMaxComplementaryCredits();
      assertEquals((-3670), studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals((-3670), studentPreEnrollment0.getTerm());
      assertEquals(0, int0);
      assertEquals(3977, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(3977, studentPreEnrollment0.getMaxElectiveCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("_aiAdB9;.WS}", 0, integer0, 0, 0, 1430, 1430);
      int int0 = studentPreEnrollment0.getMaxComplementaryCredits();
      assertEquals(0, studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(1430, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(0, studentPreEnrollment0.getTerm());
      assertEquals(1430, int0);
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals(0, studentPreEnrollment0.getMaxMandatoryCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-476));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("", (-476), integer0, 0, (-1934), (-1934), 0);
      studentPreEnrollment0.setMandatoryCredits(299);
      int int0 = studentPreEnrollment0.getMandatoryCredits();
      assertEquals(299, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer((-624));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment((String) null, (-624), integer0, 0, 0, 0, 0);
      studentPreEnrollment0.setMandatoryCredits((-584));
      int int0 = studentPreEnrollment0.getMandatoryCredits();
      assertEquals((-584), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(2249);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("VD:xc=BZ-W?ZxkqRU(/", 0, integer0, 0, 2249, 0, (-997));
      studentPreEnrollment0.setElectiveCredits((-597));
      int int0 = studentPreEnrollment0.getElectiveCredits();
      assertEquals((-597), studentPreEnrollment0.getTotalCredits());
      assertEquals((-597), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer((-977));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("", (-977), integer0, 8232, (-977), 0, 0);
      studentPreEnrollment0.setCurrentEnrolledCredits(69);
      int int0 = studentPreEnrollment0.getCurrentEnrolledCredits();
      assertEquals(69, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer((-1558));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("E", (-1558), integer0, (-1558), (-1558), 5760, (-1558));
      studentPreEnrollment0.setCurrentEnrolledCredits((-1558));
      int int0 = studentPreEnrollment0.getCurrentEnrolledCredits();
      assertEquals((-1558), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("_aiAdB9;.WS}", 0, integer0, 0, 0, 1430, 1430);
      studentPreEnrollment0.setComplementaryCredits(1430);
      int int0 = studentPreEnrollment0.getComplementaryCredits();
      assertEquals(1430, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(1073741824);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("", (-1661), integer0, (-1886), (-1886), (-1886), (-1661));
      studentPreEnrollment0.setComplementaryCredits((-1886));
      int int0 = studentPreEnrollment0.getComplementaryCredits();
      assertEquals((-1886), studentPreEnrollment0.getTotalCredits());
      assertEquals((-1886), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer(293);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment((String) null, 0, integer0, 0, 0, 0, 0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule((Subject) null, hashMap0);
      ArrayDeque<SubjectSchedule> arrayDeque0 = new ArrayDeque<SubjectSchedule>();
      // Undeclared exception!
      try { 
        studentPreEnrollment0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.StudentPreEnrollment", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer(1);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("e8Dnn~1&&RH", 0, integer0, 133, 133, (-1518), (-1735));
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule((Subject) null, hashMap0);
      // Undeclared exception!
      try { 
        studentPreEnrollment0.enrollSubject(subjectSchedule0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.StudentPreEnrollment", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StudentPreEnrollment studentPreEnrollment0 = null;
      try {
        studentPreEnrollment0 = new StudentPreEnrollment("", 0, (Integer) null, 0, 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.StudentPreEnrollment", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer integer0 = new Integer(189689061);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("C", 189689061, integer0, 189689061, 189689061, 189689061, 189689061);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Subject subject0 = new Subject("C", "C", "C", "C", "C", 189689061, 189689061, "C", arrayList0, 189689061, arrayList0, arrayList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      ArrayList<SubjectSchedule> arrayList1 = new ArrayList<SubjectSchedule>();
      studentPreEnrollment0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayList1);
      assertEquals(189689061, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(189689061, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(189689061, studentPreEnrollment0.getMaxComplementaryCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals(189689061, studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(189689061, studentPreEnrollment0.getTerm());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = Integer.getInteger("C", (-1595));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("C", (-1595), integer0, (-1595), (-1595), 1668, (-1595));
      HashSet<String> hashSet0 = new HashSet<String>();
      Subject subject0 = new Subject("C", "C", "C", "C", "C", 1668, (-1595), "C", hashSet0, (-1595), hashSet0, hashSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      Vector<SubjectSchedule> vector0 = new Vector<SubjectSchedule>();
      studentPreEnrollment0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) vector0);
      assertEquals((-1595), studentPreEnrollment0.getTerm());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(1668, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals((-1595), studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals((-1595), studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals((-1595), studentPreEnrollment0.getMaxOptionalCredits());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("_aiAdB9;.WS}", 0, integer0, 0, 0, 1430, 1430);
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("_aiAdB9;.WS}", "_aiAdB9;.WS}", "O$M|r", "_aiAdB9;.WS}", "", 0, (-2973), "O$M|r", stack0, 501, stack0, stack0);
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, (Map<String, Schedule>) null);
      ArrayList<SubjectSchedule> arrayList0 = new ArrayList<SubjectSchedule>();
      studentPreEnrollment0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayList0);
      assertEquals(0, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(1430, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals(1430, studentPreEnrollment0.getMaxElectiveCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(0, studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(0, studentPreEnrollment0.getTerm());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = new Integer(2246);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("~GM1698'|,&{`>=Z", 2246, integer0, 2246, (-263), 2246, 2246);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("~GM1698'|,&{`>=Z", "~GM1698'|,&{`>=Z", "E", "E", "E", (-263), 2246, "E", treeSet0, 2246, treeSet0, treeSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      ArrayDeque<SubjectSchedule> arrayDeque0 = new ArrayDeque<SubjectSchedule>();
      PriorityQueue<ClassSchedule> priorityQueue0 = new PriorityQueue<ClassSchedule>();
      Schedule schedule0 = new Schedule(2246, "E", priorityQueue0);
      hashMap0.put("~GM1698'|,&{`>=Z", schedule0);
      studentPreEnrollment0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayDeque0);
      studentPreEnrollment0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayDeque0);
      assertEquals((-526), studentPreEnrollment0.getElectiveCredits());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment((String) null, 0, integer0, 0, 3, 3, 0);
      studentPreEnrollment0.setMaxCredits(3);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject subject0 = new Subject((String) null, "O", "O", "O", "O", 3, 3, (String) null, linkedList0, 3, linkedList0, linkedList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      ArrayDeque<SubjectSchedule> arrayDeque0 = new ArrayDeque<SubjectSchedule>();
      studentPreEnrollment0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayDeque0);
      assertEquals(3, studentPreEnrollment0.getMaxCredits());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer integer0 = new Integer(87855567);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("My", 87855567, integer0, 87855567, 87855567, 1, 87855567);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Subject subject0 = new Subject("My", "My", "My", "My", "M", 1, 87855567, "My", arrayDeque0, 87855567, arrayDeque0, arrayDeque0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      PriorityQueue<ClassSchedule> priorityQueue0 = new PriorityQueue<ClassSchedule>();
      Schedule schedule0 = new Schedule(87855567, "My", priorityQueue0);
      hashMap0.put("M", schedule0);
      LinkedHashSet<SubjectSchedule> linkedHashSet0 = new LinkedHashSet<SubjectSchedule>();
      studentPreEnrollment0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) linkedHashSet0);
      assertEquals(1, studentPreEnrollment0.getCurrentEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = new Integer(2240);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("~GM1698'|,&{`>=Z", 2240, integer0, 2240, (-263), 2240, 2240);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("~GM1698'|,&{`>=Z", "~GM1698'|,&{`>=Z", "E", "E", "E", (-263), 2240, "E", treeSet0, (-263), treeSet0, treeSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      ArrayDeque<SubjectSchedule> arrayDeque0 = new ArrayDeque<SubjectSchedule>();
      hashMap0.put("~GM1698'|,&{`>=Z", (Schedule) null);
      HashMap<String, Schedule> hashMap1 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule1 = new SubjectSchedule(subject0, hashMap1);
      arrayDeque0.addFirst(subjectSchedule1);
      studentPreEnrollment0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayDeque0);
      assertEquals(2240, studentPreEnrollment0.getMaxMandatoryCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals((-263), studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(2240, studentPreEnrollment0.getTerm());
      assertEquals(2240, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(2240, studentPreEnrollment0.getMaxComplementaryCredits());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer(2246);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("~GM1698'|,&{`>=Z", 2246, integer0, 2246, (-263), 2246, 2246);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("~GM1698'|,&{`>=Z", "~GM1698'|,&{`>=Z", "E", "E", "E", (-263), 2246, "E", treeSet0, 2246, treeSet0, treeSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      ArrayDeque<SubjectSchedule> arrayDeque0 = new ArrayDeque<SubjectSchedule>();
      arrayDeque0.add(subjectSchedule0);
      PriorityQueue<ClassSchedule> priorityQueue0 = new PriorityQueue<ClassSchedule>();
      Schedule schedule0 = new Schedule(2246, "E", priorityQueue0);
      hashMap0.put("~GM1698'|,&{`>=Z", schedule0);
      studentPreEnrollment0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayDeque0);
      assertEquals((-526), studentPreEnrollment0.getElectiveCredits());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer integer0 = new Integer(69);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("Ce", 69, integer0, 69, 79, 79, 79);
      HashSet<String> hashSet0 = new HashSet<String>();
      Subject subject0 = new Subject("Ce", "Ce", "Ce", "Ce", "E", 79, 79, "Ce", hashSet0, 79, hashSet0, hashSet0);
      LinkedList<SubjectSchedule> linkedList0 = new LinkedList<SubjectSchedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, (Map<String, Schedule>) null);
      studentPreEnrollment0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) linkedList0);
      assertEquals(69, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(69, studentPreEnrollment0.getTerm());
      assertEquals(79, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals(79, studentPreEnrollment0.getMaxOptionalCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(79, studentPreEnrollment0.getMaxComplementaryCredits());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer((-26));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("Iuw.tvO%N5@<BAb+[`", (-26), integer0, (-26), (-26), (-26), (-26));
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("Iuw.tvO%N5@<BAb+[`", "Iuw.tvO%N5@<BAb+[`", "Iuw.tvO%N5@<BAb+[`", "M", "M", (-26), (-26), "Iuw.tvO%N5@<BAb+[`", linkedHashSet0, (-26), linkedHashSet0, linkedHashSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      ArrayDeque<SubjectSchedule> arrayDeque0 = new ArrayDeque<SubjectSchedule>();
      studentPreEnrollment0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayDeque0);
      assertEquals((-26), studentPreEnrollment0.getMaxOptionalCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals((-26), studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals((-26), studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals((-26), studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals((-26), studentPreEnrollment0.getTerm());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = Integer.getInteger("uw.tO%5@<BAb+[`", 68);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("uw.tO%5@<BAb+[`", 68, integer0, 68, 68, 68, 68);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("uw.tO%5@<BAb+[`", "uw.tO%5@<BAb+[`", "uw.tO%5@<BAb+[`", "M", "M", 68, 68, "uw.tO%5@<BAb+[`", linkedHashSet0, 68, linkedHashSet0, linkedHashSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      ArrayDeque<SubjectSchedule> arrayDeque0 = new ArrayDeque<SubjectSchedule>();
      studentPreEnrollment0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayDeque0);
      assertEquals(68, studentPreEnrollment0.getMaxElectiveCredits());
      assertTrue(studentPreEnrollment0.isMandatoryNotFull());
      assertEquals(68, studentPreEnrollment0.getMaxComplementaryCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(68, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(68, studentPreEnrollment0.getTerm());
      assertEquals(68, studentPreEnrollment0.getMaxOptionalCredits());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = new Integer(39);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("s", 39, integer0, 39, 39, 39, 39);
      boolean boolean0 = studentPreEnrollment0.isElectiveNotFull();
      assertTrue(boolean0);
      assertEquals(39, studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(39, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(39, studentPreEnrollment0.getTerm());
      assertEquals(39, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(39, studentPreEnrollment0.getMaxElectiveCredits());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = new Integer((-977));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("", (-977), integer0, 8232, (-977), 0, 0);
      boolean boolean0 = studentPreEnrollment0.isElectiveNotFull();
      assertEquals(8232, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals(0, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(0, studentPreEnrollment0.getMaxComplementaryCredits());
      assertFalse(boolean0);
      assertEquals((-977), studentPreEnrollment0.getTerm());
      assertEquals((-977), studentPreEnrollment0.getMaxOptionalCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer((-981));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("", (-981), integer0, 8222, (-981), 8222, 8222);
      boolean boolean0 = studentPreEnrollment0.isComplementaryNotFull();
      assertEquals((-981), studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(8222, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(8222, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(8222, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals((-981), studentPreEnrollment0.getTerm());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Integer integer0 = new Integer((-977));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("^0wgs9c~%T5C9ckQS>*", (-977), integer0, (-977), (-977), (-977), (-977));
      boolean boolean0 = studentPreEnrollment0.isComplementaryNotFull();
      assertEquals((-977), studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals((-977), studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals((-977), studentPreEnrollment0.getTerm());
      assertFalse(boolean0);
      assertEquals((-977), studentPreEnrollment0.getMaxOptionalCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals((-977), studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer integer0 = new Integer(39);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("s", 39, integer0, 39, 39, 39, 39);
      boolean boolean0 = studentPreEnrollment0.isOptionalNotFull();
      assertEquals(39, studentPreEnrollment0.getMaxOptionalCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(39, studentPreEnrollment0.getTerm());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals(39, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(39, studentPreEnrollment0.getMaxMandatoryCredits());
      assertTrue(boolean0);
      assertEquals(39, studentPreEnrollment0.getMaxComplementaryCredits());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer((-476));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("", (-476), integer0, (-476), (-476), (-476), (-476));
      boolean boolean0 = studentPreEnrollment0.isOptionalNotFull();
      assertEquals((-476), studentPreEnrollment0.getTerm());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals((-476), studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals((-476), studentPreEnrollment0.getMaxComplementaryCredits());
      assertFalse(boolean0);
      assertEquals((-476), studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals((-476), studentPreEnrollment0.getMaxOptionalCredits());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer((-981));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("", (-981), integer0, 8222, (-981), 8222, 8222);
      boolean boolean0 = studentPreEnrollment0.isMandatoryNotFull();
      assertEquals(8222, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(8222, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals((-981), studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(8222, studentPreEnrollment0.getMaxMandatoryCredits());
      assertTrue(boolean0);
      assertEquals((-981), studentPreEnrollment0.getTerm());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Integer integer0 = new Integer(293);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment((String) null, 0, integer0, 0, 0, 0, 0);
      boolean boolean0 = studentPreEnrollment0.isMandatoryNotFull();
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertFalse(boolean0);
      assertEquals(0, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(0, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(0, studentPreEnrollment0.getTerm());
      assertEquals(0, studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals(0, studentPreEnrollment0.getMaxMandatoryCredits());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer(353);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("org.apache.commons.io.filefilter.MagicNumberFileFilter", 353, integer0, 3, 353, 3, 3);
      int int0 = studentPreEnrollment0.getTerm();
      assertEquals(353, int0);
      assertEquals(3, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(3, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(3, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(353, studentPreEnrollment0.getMaxOptionalCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = new Integer((-624));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment((String) null, (-624), integer0, 0, 0, 0, 0);
      int int0 = studentPreEnrollment0.getMaxOptionalCredits();
      assertEquals((-624), studentPreEnrollment0.getTerm());
      assertEquals(0, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(0, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(0, int0);
      assertEquals(0, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Integer integer0 = new Integer(293);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment((String) null, 0, integer0, 0, 0, 0, 0);
      int int0 = studentPreEnrollment0.getElectiveCredits();
      assertEquals(0, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(0, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(0, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(0, studentPreEnrollment0.getTerm());
      assertEquals(0, int0);
      assertEquals(0, studentPreEnrollment0.getMaxOptionalCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer((-1283));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment((String) null, 0, integer0, (-1283), 3, 780, 0);
      studentPreEnrollment0.setMaxComplementaryCredits(3016);
      assertEquals(3016, studentPreEnrollment0.getMaxComplementaryCredits());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer((-1283));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment((String) null, 0, integer0, (-1283), 3, 780, 0);
      assertEquals(0, studentPreEnrollment0.getTerm());
      
      studentPreEnrollment0.setTerm(780);
      assertTrue(studentPreEnrollment0.isOptionalNotFull());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Integer integer0 = new Integer((-1283));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment((String) null, 0, integer0, (-1283), 3, 780, 0);
      int int0 = studentPreEnrollment0.getComplementaryCredits();
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(0, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(780, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals((-1283), studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(0, int0);
      assertEquals(0, studentPreEnrollment0.getTerm());
      assertEquals(3, studentPreEnrollment0.getMaxOptionalCredits());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Integer integer0 = new Integer(161);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment(".JW,KkBP5Q5xR3P", 161, integer0, 161, 161, (-4331), (-4331));
      studentPreEnrollment0.getStudentRegistration();
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals(161, studentPreEnrollment0.getTerm());
      assertEquals((-4331), studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals((-4331), studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(161, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(161, studentPreEnrollment0.getMaxOptionalCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer integer0 = new Integer(353);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("org.apache.commons.io.filefilter.MagicNumberFileFilter", 353, integer0, 3, 353, 3, 3);
      studentPreEnrollment0.setElectiveCredits(3);
      int int0 = studentPreEnrollment0.getElectiveCredits();
      assertEquals(3, studentPreEnrollment0.getTotalCredits());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Integer integer0 = new Integer((-1283));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment((String) null, 0, integer0, (-1283), 3, 780, 0);
      studentPreEnrollment0.setMaxCredits(3);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject subject0 = new Subject((String) null, "O", "O", "&~g", "O", 3, 3, (String) null, linkedList0, 3088, linkedList0, linkedList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>(1192);
      LinkedList<ClassSchedule> linkedList1 = new LinkedList<ClassSchedule>();
      Schedule schedule0 = new Schedule(780, "aijMaDigfKqi!<!*h", linkedList1);
      hashMap0.put((String) null, schedule0);
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      PriorityQueue<SubjectSchedule> priorityQueue0 = new PriorityQueue<SubjectSchedule>();
      studentPreEnrollment0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) priorityQueue0);
      assertEquals(3, studentPreEnrollment0.getMaxCredits());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Integer integer0 = new Integer((-476));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("", (-476), integer0, (-476), (-476), (-476), (-476));
      int int0 = studentPreEnrollment0.getMaxComplementaryCredits();
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals((-476), studentPreEnrollment0.getTerm());
      assertEquals((-476), studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals((-476), studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals((-476), studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals((-476), int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Integer integer0 = new Integer(161);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment(".JW,KkBP5Q5xR3P", 161, integer0, 161, 161, (-4331), (-4331));
      int int0 = studentPreEnrollment0.getMaxMandatoryCredits();
      assertEquals((-4331), studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(161, int0);
      assertEquals(161, studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(161, studentPreEnrollment0.getTerm());
      assertEquals((-4331), studentPreEnrollment0.getMaxElectiveCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = new Integer((-476));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("", (-476), integer0, (-476), (-476), (-476), (-476));
      int int0 = studentPreEnrollment0.getMandatoryCredits();
      assertEquals((-476), studentPreEnrollment0.getMaxOptionalCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals((-476), studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals((-476), studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals((-476), studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals((-476), studentPreEnrollment0.getTerm());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Integer integer0 = new Integer((-1283));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment((String) null, 0, integer0, (-1283), 3, 780, 0);
      int int0 = studentPreEnrollment0.getOptionalCredits();
      assertEquals(0, studentPreEnrollment0.getTerm());
      assertEquals(3, studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals(780, studentPreEnrollment0.getMaxComplementaryCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals((-1283), studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(0, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Integer integer0 = new Integer(39);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("s", 39, integer0, 39, 39, 39, 39);
      studentPreEnrollment0.setMaxOptionalCredits(39);
      assertEquals(39, studentPreEnrollment0.getTerm());
      assertEquals(39, studentPreEnrollment0.getMaxOptionalCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(39, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(39, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals(39, studentPreEnrollment0.getMaxComplementaryCredits());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Integer integer0 = new Integer(293);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment((String) null, 0, integer0, 0, 0, 0, 0);
      studentPreEnrollment0.setMaxElectiveCredits(0);
      assertEquals(0, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(0, studentPreEnrollment0.getMaxElectiveCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(0, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(0, studentPreEnrollment0.getTerm());
      assertEquals(0, studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Integer integer0 = new Integer(293);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment((String) null, 0, integer0, 0, 0, 0, 0);
      int int0 = studentPreEnrollment0.getMaxCredits();
      assertEquals(0, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(293, int0);
      assertEquals(0, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals(0, studentPreEnrollment0.getTerm());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(0, studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(0, studentPreEnrollment0.getMaxElectiveCredits());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Integer integer0 = new Integer((-476));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("", (-476), integer0, (-476), (-476), (-476), (-476));
      int int0 = studentPreEnrollment0.getMaxElectiveCredits();
      assertEquals((-476), studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals((-476), studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals((-476), studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals((-476), studentPreEnrollment0.getTerm());
      assertEquals((-476), int0);
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Integer integer0 = new Integer(161);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment(".JW,KkBP5Q5xR3P", 161, integer0, 161, 161, (-4331), (-4331));
      boolean boolean0 = studentPreEnrollment0.isPossibleGraduate();
      assertEquals(161, studentPreEnrollment0.getTerm());
      assertEquals(161, studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals((-4331), studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(161, studentPreEnrollment0.getMaxMandatoryCredits());
      assertFalse(boolean0);
      assertEquals((-4331), studentPreEnrollment0.getMaxComplementaryCredits());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Integer integer0 = new Integer(39);
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("s", 39, integer0, 39, 39, 39, 39);
      studentPreEnrollment0.setStudentRegistration("s");
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals(39, studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(39, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals(39, studentPreEnrollment0.getTerm());
      assertEquals(39, studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals(39, studentPreEnrollment0.getMaxOptionalCredits());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Integer integer0 = Integer.getInteger("M", (-1596));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("C", (-1596), integer0, (-1596), (-1596), 1683, (-1596));
      studentPreEnrollment0.getSubjects();
      assertEquals(1683, studentPreEnrollment0.getMaxComplementaryCredits());
      assertEquals((-1596), studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals((-1596), studentPreEnrollment0.getMaxMandatoryCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals((-1596), studentPreEnrollment0.getTerm());
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals((-1596), studentPreEnrollment0.getMaxElectiveCredits());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Integer integer0 = new Integer((-977));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("^0wgs9c~%T5C9ckQS>*", (-977), integer0, (-977), (-977), (-977), (-977));
      int int0 = studentPreEnrollment0.getCurrentEnrolledCredits();
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals((-977), studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals((-977), studentPreEnrollment0.getTerm());
      assertEquals(0, int0);
      assertEquals((-977), studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals((-977), studentPreEnrollment0.getMaxMandatoryCredits());
      assertEquals((-977), studentPreEnrollment0.getMaxComplementaryCredits());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Integer integer0 = new Integer((-977));
      StudentPreEnrollment studentPreEnrollment0 = new StudentPreEnrollment("^0wgs9c~%T5C9ckQS>*", (-977), integer0, (-977), (-977), (-977), (-977));
      int int0 = studentPreEnrollment0.getTotalCredits();
      assertEquals(0, studentPreEnrollment0.getCurrentEnrolledCredits());
      assertEquals((-977), studentPreEnrollment0.getTerm());
      assertEquals((-977), studentPreEnrollment0.getMaxOptionalCredits());
      assertEquals((-977), studentPreEnrollment0.getMaxMandatoryCredits());
      assertFalse(studentPreEnrollment0.isPossibleGraduate());
      assertEquals((-977), studentPreEnrollment0.getMaxElectiveCredits());
      assertEquals(0, int0);
      assertEquals((-977), studentPreEnrollment0.getMaxComplementaryCredits());
  }
}
