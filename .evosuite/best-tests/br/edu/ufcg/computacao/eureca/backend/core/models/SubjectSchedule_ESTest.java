/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 22:39:41 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.models.ClassSchedule;
import br.edu.ufcg.computacao.eureca.backend.core.models.Schedule;
import br.edu.ufcg.computacao.eureca.backend.core.models.Subject;
import br.edu.ufcg.computacao.eureca.backend.core.models.SubjectSchedule;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubjectSchedule_ESTest extends SubjectSchedule_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule((Subject) null, hashMap0);
      Subject subject0 = subjectSchedule0.getSubject();
      assertNull(subject0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Subject subject0 = new Subject("gF$ Bk+x>", "data length is zero!", "data length is zero!", "gF$ Bk+x>", "SubjectSchedule{subject=", 0, 0, (String) null, arrayDeque0, (-2958), arrayDeque0, arrayDeque0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>(0);
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      Subject subject1 = subjectSchedule0.getSubject();
      assertEquals(0, subject1.getHours());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Subject subject0 = new Subject("Sh|Z", "ar!", "Q", "ar!", "Q", (-1377), (-1377), "Q", set0, 0, set0, set0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      Subject subject1 = subjectSchedule0.getSubject();
      assertEquals("Q", subject1.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Subject subject0 = new Subject("wxmyq'G0{", "GXN{XZA $N", "wxmyq'G0{", "GXN{XZA $N", "RL0/D)", (-1034), (-1034), "v}+bJxz;", set0, (-1034), set0, set0);
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, (Map<String, Schedule>) null);
      Map<String, Schedule> map0 = subjectSchedule0.getSchedules();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject subject0 = new Subject("h?\"kDGn", "A", "A", "h?\"kDGn", "A", 0, 0, "A", linkedList0, 0, linkedList0, linkedList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      hashMap0.put("A", (Schedule) null);
      Map<String, Schedule> map0 = subjectSchedule0.getSchedules();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Subject subject0 = new Subject("W.aiH_`7D", ", schedules=", "W.aiH_`7D", "", "", 0, 1144, "", set0, 0, set0, set0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      LinkedList<ClassSchedule> linkedList0 = new LinkedList<ClassSchedule>();
      Schedule schedule0 = new Schedule(0, "", linkedList0);
      hashMap0.put("", schedule0);
      Schedule schedule1 = subjectSchedule0.getSchedule("");
      assertEquals(0, schedule1.getAvailability());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule((Subject) null, hashMap0);
      LinkedHashSet<ClassSchedule> linkedHashSet0 = new LinkedHashSet<ClassSchedule>();
      Schedule schedule0 = new Schedule(64, "SubjectSchedule{subject=null, schedules={z=|5BIkf4FJRbBM6LH=null}}", linkedHashSet0);
      hashMap0.put("SubjectSchedule{subject=null, schedules={z=|5BIkf4FJRbBM6LH=null}}", schedule0);
      Schedule schedule1 = subjectSchedule0.getSchedule("SubjectSchedule{subject=null, schedules={z=|5BIkf4FJRbBM6LH=null}}");
      assertEquals("SubjectSchedule{subject=null, schedules={z=|5BIkf4FJRbBM6LH=null}}", schedule1.getClassCode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      Schedule schedule0 = new Schedule((-593), "", (Collection<ClassSchedule>) null);
      hashMap0.put("", schedule0);
      SubjectSchedule subjectSchedule0 = new SubjectSchedule((Subject) null, hashMap0);
      Schedule schedule1 = subjectSchedule0.getSchedule("");
      assertSame(schedule1, schedule0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Subject subject0 = new Subject("wxmyq'G0{", "GXN{XZA $N", "wxmyq'G0{", "GXN{XZA $N", "RL0/D)", (-1034), (-1034), "v}+bJxz;", set0, (-1034), set0, set0);
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, (Map<String, Schedule>) null);
      // Undeclared exception!
      try { 
        subjectSchedule0.getSchedule("SubjectSchedule{subject=Subject{courseCode='wxmyq'G0{', curriculumCode='GXN{XZA $N', subjectCode='wxmyq'G0{', academicUnit='GXN{XZA $N', type='RL0/D)', credits=-1034, hours=-1034, name='v}+bJxz;', equivalentCodesList=[], idealTerm=-1034, preRequirementsList=[], coRequirementsList=[]}, schedules={;U.=null}}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.SubjectSchedule", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject("", ", schedules=", "", "", "com.google.common.collect.Range$RangeLexOrdering", (-504), (-504), "_8%,f#FnD", priorityQueue0, (-504), priorityQueue0, priorityQueue0);
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, (Map<String, Schedule>) null);
      // Undeclared exception!
      try { 
        subjectSchedule0.getClassCodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.SubjectSchedule", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubjectSchedule subjectSchedule0 = new SubjectSchedule((Subject) null, (Map<String, Schedule>) null);
      // Undeclared exception!
      try { 
        subjectSchedule0.getAllSchedules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.SubjectSchedule", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("The offset cannot be negative", "hHS<;'@qfQHiW8enh", "The offset cannot be negative", "hHS<;'@qfQHiW8enh", ">", (-493), 0, "The offset cannot be negative", treeSet0, (-493), treeSet0, treeSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      subjectSchedule0.setSchedules((Map<String, Schedule>) null);
      SubjectSchedule subjectSchedule1 = new SubjectSchedule(subject0, hashMap0);
      // Undeclared exception!
      try { 
        subjectSchedule0.equals(subjectSchedule1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.SubjectSchedule", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Subject subject0 = new Subject("wxmyq'G0{", "GXN{XZA $N", "wxmyq'G0{", "GXN{XZA $N", "RL0/D)", (-1034), (-1034), "v}+bJxz;", set0, (-1034), set0, set0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      SubjectSchedule subjectSchedule1 = new SubjectSchedule(subject0, (Map<String, Schedule>) null);
      boolean boolean0 = subjectSchedule0.equals(subjectSchedule1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject subject0 = new Subject("h?\"kDGn", "A", "A", "h?\"kDGn", "A", 0, 0, "A", linkedList0, 0, linkedList0, linkedList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      Subject subject1 = new Subject("JsD3vYO7)gaIB6RH]2", "A", "h?\"kDGn", "JsD3vYO7)gaIB6RH]2", "h?\"kDGn", 0, 0, "h?\"kDGn", linkedList0, 0, linkedList0, linkedList0);
      SubjectSchedule subjectSchedule1 = new SubjectSchedule(subject1, hashMap0);
      boolean boolean0 = subjectSchedule0.equals(subjectSchedule1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject subject0 = new Subject("h?\"kDGn", "A", "A", "h?\"kDGn", "A", 0, 0, "A", linkedList0, 0, linkedList0, linkedList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      SubjectSchedule subjectSchedule1 = new SubjectSchedule(subject0, hashMap0);
      boolean boolean0 = subjectSchedule0.equals(subjectSchedule1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("bv&Gh", "bv&Gh", "bv&Gh", "bv&Gh", "bv&Gh", 1556, 1556, "bv&Gh", linkedHashSet0, 1556, linkedHashSet0, linkedHashSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      boolean boolean0 = subjectSchedule0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("The offset cannot be negative", "hHS<;'@qfQHiW8enh", "The offset cannot be negative", "hHS<;'@qfQHiW8enh", ">", (-493), 0, "The offset cannot be negative", treeSet0, (-493), treeSet0, treeSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      boolean boolean0 = subjectSchedule0.equals(subjectSchedule0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject subject0 = new Subject("h?\"kDGn", "A", "A", "h?\"kDGn", "A", 0, 0, "A", linkedList0, 0, linkedList0, linkedList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      boolean boolean0 = subjectSchedule0.equals(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject subject0 = new Subject("h?\"kDGn", "A", "A", "h?\"kDGn", "A", 0, 0, "A", linkedList0, 0, linkedList0, linkedList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      Collection<String> collection0 = subjectSchedule0.getClassCodes();
      assertFalse(collection0.contains("A"));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject subject0 = new Subject("h?\"kDGn", "A", "A", "h?\"kDGn", "A", 0, 0, "A", linkedList0, 0, linkedList0, linkedList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      subjectSchedule0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject subject0 = new Subject("h?\"kDGn", "A", "A", "h?\"kDGn", "A", 0, 0, "A", linkedList0, 0, linkedList0, linkedList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      String string0 = subjectSchedule0.toString();
      assertEquals("SubjectSchedule{subject=Subject{courseCode='h?\"kDGn', curriculumCode='A', subjectCode='A', academicUnit='h?\"kDGn', type='A', credits=0, hours=0, name='A', equivalentCodesList=[], idealTerm=0, preRequirementsList=[], coRequirementsList=[]}, schedules={}}", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("bv&Gh", "bv&Gh", "bv&Gh", "bv&Gh", "bv&Gh", 1556, 1556, "bv&Gh", linkedHashSet0, 1556, linkedHashSet0, linkedHashSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      Map<String, Schedule> map0 = subjectSchedule0.getSchedules();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("bv&Gh", "bv&Gh", "bv&Gh", "bv&Gh", "bv&Gh", 1556, 1556, "bv&Gh", linkedHashSet0, 1556, linkedHashSet0, linkedHashSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      Subject subject1 = subjectSchedule0.getSubject();
      assertSame(subject0, subject1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject subject0 = new Subject("h?\"kDGn", "A", "A", "h?\"kDGn", "A", 0, 0, "A", linkedList0, 0, linkedList0, linkedList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      Schedule schedule0 = subjectSchedule0.getSchedule(" returned null keys or values from loadAll");
      assertNull(schedule0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject subject0 = new Subject("h?\"kDGn", "A", "A", "h?\"kDGn", "A", 0, 0, "A", linkedList0, 0, linkedList0, linkedList0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      Collection<Schedule> collection0 = subjectSchedule0.getAllSchedules();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("bv&Gh", "bv&Gh", "bv&Gh", "bv&Gh", "bv&Gh", 1556, 1556, "bv&Gh", linkedHashSet0, 1556, linkedHashSet0, linkedHashSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      subjectSchedule0.setSubject(subject0);
      assertEquals("bv&Gh", subject0.getName());
  }
}
