/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:49:21 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni;

import org.junit.Test;
import static org.junit.Assert.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary;
import br.edu.ufcg.computacao.eureca.backend.core.models.CostClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AlumniSummary_ESTest extends AlumniSummary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("\"Z6s)S1", (String) null, (-767), 0.0, (-767), (-725.097812911462), (-725.097812911462), (-2974.510000981), (-767), 7, (String) null, (String) null);
      alumniSummary0.getTo();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("59$", "1-f?:/p-l7Ba!UV", 0, 0, 0, 418.9004229510602, 1536.2553037977389, 418.9004229510602, 2685, 0, "59$", "TVH[D~\"oD");
      String string0 = alumniSummary0.getTo();
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(2685, alumniSummary0.getMaxAlumniCount());
      assertEquals("TVH[D~\"oD", alumniSummary0.getMinAlumniCountTerm());
      assertEquals("1-f?:/p-l7Ba!UV", string0);
      assertEquals("59$", alumniSummary0.getFrom());
      assertEquals("59$", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(1536.2553037977389, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(418.9004229510602, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(0, alumniSummary0.getAlumniCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", (String) null, 410, 62.93, 62.93, 62.93, 410, 62.93, 410, 410, "d# >H#G$O}`5{J$U_e#", "0?/@WBS,)/ync&;yk J");
      assertEquals("0?/@WBS,)/ync&;yk J", alumniSummary0.getMinAlumniCountTerm());
      
      alumniSummary0.setMinAlumniCountTerm((String) null);
      alumniSummary0.getMinAlumniCountTerm();
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(410, alumniSummary0.getMinAlumniCount());
      assertEquals(410.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(410, alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("d# >H#G$O}`5{J$U_e#", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(410, alumniSummary0.getAlumniCount());
      assertEquals(62.93, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(62.93, alumniSummary0.getAverageTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 3, (-0.39293633287721996), 3, (-0.39293633287721996), (-0.39293633287721996), 3, 3, 3, "", "");
      alumniSummary0.getMinAlumniCountTerm();
      assertEquals((-0.39293633287721996), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(3, alumniSummary0.getMinAlumniCount());
      assertEquals(3, alumniSummary0.getAlumniCount());
      assertEquals(3, alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.UNACCEPTABLE, alumniSummary0.getCostClass());
      assertEquals((-0.39293633287721996), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(3.0, alumniSummary0.getAverageAlumniCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", "br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", 0, 0, 0, 1.0, 0, 1.0, 0, 0, "INACCURATE", ":02_[k");
      int int0 = alumniSummary0.getMinAlumniCount();
      assertEquals(":02_[k", alumniSummary0.getMinAlumniCountTerm());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getFrom());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals(0, int0);
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getTo());
      assertEquals("INACCURATE", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(1.0, alumniSummary0.getAverageAlumniCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 402, 402, 402, 402, 402, 402, (-933), 402, "", "");
      assertEquals(402, alumniSummary0.getMinAlumniCount());
      
      alumniSummary0.setMinAlumniCount((-933));
      int int0 = alumniSummary0.getMinAlumniCount();
      assertEquals((-933), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("bD$~", "", 0, 0, 0, 0, 0.0, 3188.1791620381587, (-1842), 3588, "", "ADEQUATE");
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      
      alumniSummary0.setMaxAlumniCountTerm((String) null);
      alumniSummary0.getMaxAlumniCountTerm();
      assertEquals("bD$~", alumniSummary0.getFrom());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(3188.1791620381587, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("ADEQUATE", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-1842), alumniSummary0.getMaxAlumniCount());
      assertEquals("", alumniSummary0.getTo());
      assertEquals(3588, alumniSummary0.getMinAlumniCount());
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", "br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", 0, 0, 0, 1.0, 0, 1.0, 0, 0, "INACCURATE", ":02_[k");
      assertEquals("INACCURATE", alumniSummary0.getMaxAlumniCountTerm());
      
      alumniSummary0.setMaxAlumniCountTerm("");
      alumniSummary0.getMaxAlumniCountTerm();
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", "br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", 0, 0, 0, 1.0, 0, 1.0, 0, 0, "INACCURATE", ":02_[k");
      int int0 = alumniSummary0.getMaxAlumniCount();
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(":02_[k", alumniSummary0.getMinAlumniCountTerm());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getFrom());
      assertEquals(1.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getTo());
      assertEquals("INACCURATE", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0, alumniSummary0.getAlumniCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary((String) null, (String) null, 2628, 2628, 2628, 2628, (-1.0), 2628, 2628, 2628, (String) null, (String) null);
      int int0 = alumniSummary0.getMaxAlumniCount();
      assertEquals(2628, alumniSummary0.getMinAlumniCount());
      assertEquals(2628, alumniSummary0.getAlumniCount());
      assertEquals(2628.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(2628, int0);
      assertEquals(2628.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary((String) null, (String) null, 2628, 2628, 2628, 2628, (-1.0), 2628, 2628, 2628, (String) null, (String) null);
      alumniSummary0.getFrom();
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(2628, alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(2628, alumniSummary0.getMinAlumniCount());
      assertEquals(2628.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(2628, alumniSummary0.getAlumniCount());
      assertEquals(2628.0, alumniSummary0.getAverageTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", "br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", 0, 0, 0, 1.0, 0, 1.0, 0, 0, "INACCURATE", ":02_[k");
      String string0 = alumniSummary0.getFrom();
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(":02_[k", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", string0);
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals("INACCURATE", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getTo());
      assertEquals(1.0, alumniSummary0.getAverageAlumniCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", "br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", 0, 0, 0, 1.0, 0, 1.0, 0, 0, "INACCURATE", ":02_[k");
      double double0 = alumniSummary0.getAverageTermsCount();
      assertEquals(":02_[k", alumniSummary0.getMinAlumniCountTerm());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getFrom());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals("INACCURATE", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getTo());
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(1.0, alumniSummary0.getAverageAlumniCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", (-3113), (-3113), 0.0, (-3113), 0.0, 0.0, 3564, 3564, "", "INACCURATE");
      double double0 = alumniSummary0.getAverageTermsCount();
      assertEquals((-3113.0), double0, 0.01);
      assertEquals((-3113), alumniSummary0.getAlumniCount());
      assertEquals("", alumniSummary0.getTo());
      assertEquals(3564, alumniSummary0.getMaxAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(3564, alumniSummary0.getMinAlumniCount());
      assertEquals("INACCURATE", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("INACCURATE", "INACCURATE", 0, 0.0, 821.9156270761556, 1748.761869757837, 0, 1748.761869757837, 0, 2, (String) null, "");
      double double0 = alumniSummary0.getAverageGpa();
      assertEquals(0.0, double0, 0.01);
      assertEquals("INACCURATE", alumniSummary0.getFrom());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("INACCURATE", alumniSummary0.getTo());
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(2, alumniSummary0.getMinAlumniCount());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(1748.761869757837, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(821.9156270761556, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("l/", "l/", (-1051), (-1051), (-1051), (-1051), (-243.9840328), (-1.0), (-1051), (-1051), "", "");
      double double0 = alumniSummary0.getAverageGpa();
      assertEquals((-1051), alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals((-1051.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("l/", alumniSummary0.getTo());
      assertEquals((-1051), alumniSummary0.getMinAlumniCount());
      assertEquals((-1051), alumniSummary0.getAlumniCount());
      assertEquals((-1.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("l/", alumniSummary0.getFrom());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals((-1051.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-243.9840328), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("Sq8/~>icU#E3Yhj<r", "Sq8/~>icU#E3Yhj<r", 2026, 878.8, 2026, 0.0, (-1311.998), 0.0, 2026, 0, "/<=!InTci5&Ff/\"vP", "2y!hw>](u@?U1H0");
      double double0 = alumniSummary0.getAverageCost();
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals("/<=!InTci5&Ff/\"vP", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("Sq8/~>icU#E3Yhj<r", alumniSummary0.getFrom());
      assertEquals(CostClass.UNACCEPTABLE, alumniSummary0.getCostClass());
      assertEquals(2026, alumniSummary0.getMaxAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("2y!hw>](u@?U1H0", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(2026.0, double0, 0.01);
      assertEquals("Sq8/~>icU#E3Yhj<r", alumniSummary0.getTo());
      assertEquals((-1311.998), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(2026, alumniSummary0.getAlumniCount());
      assertEquals(878.8, alumniSummary0.getAverageTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("7S", "7S", 1386, 2156.778, (-1701.108543951), 2156.778, 0.0, 2156.778, 2824, 1386, "INACCURATE", "%O|%qF<9");
      double double0 = alumniSummary0.getAverageCost();
      assertEquals((-1701.108543951), double0, 0.01);
      assertEquals("7S", alumniSummary0.getFrom());
      assertEquals("7S", alumniSummary0.getTo());
      assertEquals("%O|%qF<9", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(2156.778, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(1386, alumniSummary0.getMinAlumniCount());
      assertEquals(2824, alumniSummary0.getMaxAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(1386, alumniSummary0.getAlumniCount());
      assertEquals("INACCURATE", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals(2156.778, alumniSummary0.getAverageAlumniCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", "br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", 0, 0, 0, 1.0, 0, 1.0, 0, 0, "INACCURATE", ":02_[k");
      double double0 = alumniSummary0.getAverageAlumniCount();
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals("INACCURATE", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(":02_[k", alumniSummary0.getMinAlumniCountTerm());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getFrom());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getTo());
      assertEquals(0, alumniSummary0.getAlumniCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", (-3113), (-3113), 0.0, (-3113), 0.0, 0.0, 3564, 3564, "", "INACCURATE");
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      
      alumniSummary0.setAverageAlumniCount((-3113));
      double double0 = alumniSummary0.getAverageAlumniCount();
      assertEquals((-3113.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", "br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", 0, 0, 0, 1.0, 0, 1.0, 0, 0, "INACCURATE", ":02_[k");
      int int0 = alumniSummary0.getAlumniCount();
      assertEquals(0, int0);
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(1.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(":02_[k", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getFrom());
      assertEquals("INACCURATE", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getTo());
      assertEquals(0, alumniSummary0.getMinAlumniCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("i{RVG$F_WK?Q+>CQedz", "i{RVG$F_WK?Q+>CQedz", (-1), (-1), 0.0, 0.0, (-1), 1673.0, (-1056), (-1056), "i{RVG$F_WK?Q+>CQedz", "i{RVG$F_WK?Q+>CQedz");
      int int0 = alumniSummary0.getAlumniCount();
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals((-1.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-1), int0);
      assertEquals(1673.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-1056), alumniSummary0.getMaxAlumniCount());
      assertEquals((-1056), alumniSummary0.getMinAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 402, 402, 402, 402, 402, 402, (-933), 402, "", "");
      double double0 = alumniSummary0.getAverageTermsCount();
      assertEquals(402, alumniSummary0.getMinAlumniCount());
      assertEquals(402, alumniSummary0.getAlumniCount());
      assertEquals(402.0, double0, 0.01);
      assertEquals(402.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-933), alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(402.0, alumniSummary0.getAverageGpa(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", (String) null, 410, 62.93, 62.93, 62.93, 410, 62.93, 410, 410, "d# >H#G$O}`5{J$U_e#", "0?/@WBS,)/ync&;yk J");
      alumniSummary0.setMaxAlumniCount(410);
      assertEquals(410, alumniSummary0.getMinAlumniCount());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(410, alumniSummary0.getAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("0?/@WBS,)/ync&;yk J", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(410, alumniSummary0.getMaxAlumniCount());
      assertEquals(62.93, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(62.93, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("d# >H#G$O}`5{J$U_e#", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(410.0, alumniSummary0.getAverageGpa(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 402, 402, 402, 402, 402, 402, (-933), 402, "", "");
      alumniSummary0.setAverageTermsCount(0);
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 402, 402, 402, 402, 402, 402, (-933), 402, "", "");
      alumniSummary0.setAverageCost(402);
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(402.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals((-933), alumniSummary0.getMaxAlumniCount());
      assertEquals(402.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(402, alumniSummary0.getMinAlumniCount());
      assertEquals(402.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(402.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(402, alumniSummary0.getAlumniCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", (String) null, 410, 62.93, 62.93, 62.93, 410, 62.93, 410, 410, "d# >H#G$O}`5{J$U_e#", "0?/@WBS,)/ync&;yk J");
      String string0 = alumniSummary0.getMinAlumniCountTerm();
      assertNotNull(string0);
      assertEquals(410, alumniSummary0.getAlumniCount());
      assertEquals(410, alumniSummary0.getMinAlumniCount());
      assertEquals(62.93, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(410, alumniSummary0.getMaxAlumniCount());
      assertEquals(410.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("d# >H#G$O}`5{J$U_e#", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("0?/@WBS,)/ync&;yk J", string0);
      assertEquals(62.93, alumniSummary0.getAverageTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 402, 402, 402, 402, 402, 402, (-933), 402, "", "");
      int int0 = alumniSummary0.getMaxAlumniCount();
      assertEquals(402.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(402.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(402, alumniSummary0.getMinAlumniCount());
      assertEquals((-933), int0);
      assertEquals(402, alumniSummary0.getAlumniCount());
      assertEquals(402.0, alumniSummary0.getAverageTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 402, 402, 402, 402, 402, 402, (-933), 402, "", "");
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      
      alumniSummary0.setCostClass((CostClass) null);
      alumniSummary0.getCostClass();
      assertEquals(402, alumniSummary0.getAlumniCount());
      assertEquals(402.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(402, alumniSummary0.getMinAlumniCount());
      assertEquals(402.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals((-933), alumniSummary0.getMaxAlumniCount());
      assertEquals(402.0, alumniSummary0.getAverageAlumniCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 402, 402, 402, 402, 402, 402, (-933), 402, "", "");
      alumniSummary0.getTo();
      assertEquals((-933), alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(402.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(402.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(402, alumniSummary0.getMinAlumniCount());
      assertEquals(402.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(402, alumniSummary0.getAlumniCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 402, 402, 402, 402, 402, 402, (-933), 402, "", "");
      double double0 = alumniSummary0.getAverageGpa();
      assertEquals(402, alumniSummary0.getAlumniCount());
      assertEquals(402.0, double0, 0.01);
      assertEquals(402.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(402, alumniSummary0.getMinAlumniCount());
      assertEquals((-933), alumniSummary0.getMaxAlumniCount());
      assertEquals(402.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 402, 402, 402, 402, 402, 402, (-933), 402, "", "");
      int int0 = alumniSummary0.getAlumniCount();
      assertEquals(402.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(402.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-933), alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(402, alumniSummary0.getMinAlumniCount());
      assertEquals(402.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(402, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 402, 402, 402, 402, 402, 402, (-933), 402, "", "");
      alumniSummary0.setFrom("");
      assertEquals((-933), alumniSummary0.getMaxAlumniCount());
      assertEquals(402, alumniSummary0.getAlumniCount());
      assertEquals(402.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(402.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(402.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(402, alumniSummary0.getMinAlumniCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 402, 402, 402, 402, 402, 402, (-933), 402, "", "");
      assertEquals(402, alumniSummary0.getAlumniCount());
      
      alumniSummary0.setAlumniCount((-933));
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 402, 402, 402, 402, 402, 402, (-933), 402, "", "");
      alumniSummary0.getFrom();
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(402.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(402.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(402, alumniSummary0.getMinAlumniCount());
      assertEquals((-933), alumniSummary0.getMaxAlumniCount());
      assertEquals(402.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(402, alumniSummary0.getAlumniCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", (-3113), (-3113), 0.0, (-3113), 0.0, 0.0, 3564, 3564, "", "INACCURATE");
      double double0 = alumniSummary0.getAverageCost();
      assertEquals((-3113), alumniSummary0.getAlumniCount());
      assertEquals(0.0, double0, 0.01);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(3564, alumniSummary0.getMinAlumniCount());
      assertEquals("INACCURATE", alumniSummary0.getMinAlumniCountTerm());
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(3564, alumniSummary0.getMaxAlumniCount());
      assertEquals("", alumniSummary0.getTo());
      assertEquals((-3113.0), alumniSummary0.getAverageTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", (-3113), (-3113), 0.0, (-3113), 0.0, 0.0, 3564, 3564, "", "INACCURATE");
      double double0 = alumniSummary0.getAverageAlumniCount();
      assertEquals((-3113), alumniSummary0.getAlumniCount());
      assertEquals("", alumniSummary0.getTo());
      assertEquals((-3113.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals("INACCURATE", alumniSummary0.getMinAlumniCountTerm());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(3564, alumniSummary0.getMaxAlumniCount());
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0.0, double0, 0.01);
      assertEquals(3564, alumniSummary0.getMinAlumniCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", (String) null, 410, 62.93, 62.93, 62.93, 410, 62.93, 410, 410, "d# >H#G$O}`5{J$U_e#", "0?/@WBS,)/ync&;yk J");
      alumniSummary0.setTo("O}O");
      assertEquals(62.93, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(410, alumniSummary0.getMaxAlumniCount());
      assertEquals(410, alumniSummary0.getMinAlumniCount());
      assertEquals(62.93, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("d# >H#G$O}`5{J$U_e#", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(410.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals("0?/@WBS,)/ync&;yk J", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(410, alumniSummary0.getAlumniCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", (String) null, 410, 62.93, 62.93, 62.93, 410, 62.93, 410, 410, "d# >H#G$O}`5{J$U_e#", "0?/@WBS,)/ync&;yk J");
      CostClass costClass0 = alumniSummary0.getCostClass();
      assertEquals(62.93, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(62.93, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(410, alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.ADEQUATE, costClass0);
      assertEquals("0?/@WBS,)/ync&;yk J", alumniSummary0.getMinAlumniCountTerm());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(410, alumniSummary0.getAlumniCount());
      assertEquals(410, alumniSummary0.getMinAlumniCount());
      assertEquals("d# >H#G$O}`5{J$U_e#", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(410.0, alumniSummary0.getAverageGpa(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", (String) null, 410, 62.93, 62.93, 62.93, 410, 62.93, 410, 410, "d# >H#G$O}`5{J$U_e#", "0?/@WBS,)/ync&;yk J");
      String string0 = alumniSummary0.getMaxAlumniCountTerm();
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(410, alumniSummary0.getAlumniCount());
      assertEquals(410, alumniSummary0.getMinAlumniCount());
      assertNotNull(string0);
      assertEquals(410, alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("d# >H#G$O}`5{J$U_e#", string0);
      assertEquals("0?/@WBS,)/ync&;yk J", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(62.93, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(62.93, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(410.0, alumniSummary0.getAverageGpa(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 402, 402, 402, 402, 402, 402, (-933), 402, "", "");
      int int0 = alumniSummary0.getMinAlumniCount();
      assertEquals((-933), alumniSummary0.getMaxAlumniCount());
      assertEquals(402, alumniSummary0.getAlumniCount());
      assertEquals(402.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(402, int0);
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(402.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(402.0, alumniSummary0.getAverageAlumniCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", (-3113), (-3113), 0.0, (-3113), 0.0, 0.0, 3564, 3564, "", "INACCURATE");
      alumniSummary0.setAverageGpa(3564);
      assertEquals(3564.0, alumniSummary0.getAverageGpa(), 0.01);
  }
}
