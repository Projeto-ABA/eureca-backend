/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 22:53:46 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.dropout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.dropout.DropoutReasonSummary;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.dropout.DropoutsSummary;
import br.edu.ufcg.computacao.eureca.backend.core.models.CostClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DropoutsSummary_ESTest extends DropoutsSummary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CostClass costClass0 = CostClass.ADEQUATE;
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("UdKh", "", 0, 0, 0, costClass0, (DropoutReasonSummary) null);
      assertEquals("", dropoutsSummary0.getTo());
      
      dropoutsSummary0.setTo((String) null);
      dropoutsSummary0.getTo();
      assertEquals("UdKh", dropoutsSummary0.getFrom());
      assertEquals(0.0, dropoutsSummary0.getAverageCost(), 0.01);
      assertEquals(0.0, dropoutsSummary0.getAverageTermsCount(), 0.01);
      assertEquals(0, dropoutsSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CostClass costClass0 = CostClass.REGULAR;
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("INACCURATE", "INACCURATE", 0, 0.0, 0.0, costClass0, (DropoutReasonSummary) null);
      dropoutsSummary0.getTo();
      assertEquals(0.0, dropoutsSummary0.getAverageTermsCount(), 0.01);
      assertEquals(0.0, dropoutsSummary0.getAverageCost(), 0.01);
      assertEquals(0, dropoutsSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CostClass costClass0 = CostClass.UNACCEPTABLE;
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary((String) null, "HIGH", (-3602), 0.0, 0.0, costClass0, dropoutReasonSummary0);
      String string0 = dropoutsSummary0.getFrom();
      assertEquals((-3602), dropoutsSummary0.getDropoutCount());
      assertNull(string0);
      assertEquals(0.0, dropoutsSummary0.getAverageTermsCount(), 0.01);
      assertEquals(0.0, dropoutsSummary0.getAverageCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CostClass costClass0 = CostClass.ADEQUATE;
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("UdKh", "", 0, 0, 0, costClass0, (DropoutReasonSummary) null);
      String string0 = dropoutsSummary0.getFrom();
      assertEquals(0.0, dropoutsSummary0.getAverageTermsCount(), 0.01);
      assertEquals("UdKh", string0);
      assertEquals("", dropoutsSummary0.getTo());
      assertEquals(0.0, dropoutsSummary0.getAverageCost(), 0.01);
      assertEquals(0, dropoutsSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CostClass costClass0 = CostClass.UNACCEPTABLE;
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("br.edu.ufcg.computacao.eureca.backend.api.http.response.dropout.DropoutsSummary", "br.edu.ufcg.computacao.eureca.backend.api.http.response.dropout.DropoutsSummary", 4203, 4203, 4203, costClass0, (DropoutReasonSummary) null);
      dropoutsSummary0.getDropouts();
      assertEquals(4203, dropoutsSummary0.getDropoutCount());
      assertEquals(4203.0, dropoutsSummary0.getAverageCost(), 0.01);
      assertEquals(4203.0, dropoutsSummary0.getAverageTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CostClass costClass0 = CostClass.ADEQUATE;
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("", "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", 0, 0.0, 0.0, costClass0, (DropoutReasonSummary) null);
      int int0 = dropoutsSummary0.getDropoutCount();
      assertEquals(0.0, dropoutsSummary0.getAverageCost(), 0.01);
      assertEquals(0.0, dropoutsSummary0.getAverageTermsCount(), 0.01);
      assertEquals("", dropoutsSummary0.getFrom());
      assertEquals(0, int0);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", dropoutsSummary0.getTo());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CostClass costClass0 = CostClass.REGULAR;
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary((String) null, (String) null, (-483), (-483), (-483), costClass0, (DropoutReasonSummary) null);
      int int0 = dropoutsSummary0.getDropoutCount();
      assertEquals((-483.0), dropoutsSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-483.0), dropoutsSummary0.getAverageCost(), 0.01);
      assertEquals((-483), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary((String) null, "kTy\"N3h*ud)LOX:b", (-83), (-83), (-83), (CostClass) null, dropoutReasonSummary0);
      dropoutsSummary0.getCostClass();
      assertEquals((-83.0), dropoutsSummary0.getAverageCost(), 0.01);
      assertEquals((-83.0), dropoutsSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-83), dropoutsSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CostClass costClass0 = CostClass.ADEQUATE;
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("UdKh", "", 0, 0, 0, costClass0, (DropoutReasonSummary) null);
      double double0 = dropoutsSummary0.getAverageTermsCount();
      assertEquals("", dropoutsSummary0.getTo());
      assertEquals(0.0, dropoutsSummary0.getAverageCost(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals("UdKh", dropoutsSummary0.getFrom());
      assertEquals(0, dropoutsSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CostClass costClass0 = CostClass.NOT_APPLICABLE;
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("", "", 2915, 2915, 2915, costClass0, (DropoutReasonSummary) null);
      double double0 = dropoutsSummary0.getAverageTermsCount();
      assertEquals(2915.0, dropoutsSummary0.getAverageCost(), 0.01);
      assertEquals(2915, dropoutsSummary0.getDropoutCount());
      assertEquals(2915.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CostClass costClass0 = CostClass.REGULAR;
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("INACCURATE", "INACCURATE", 0, 0.0, 0.0, costClass0, (DropoutReasonSummary) null);
      double double0 = dropoutsSummary0.getAverageCost();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, dropoutsSummary0.getDropoutCount());
      assertEquals(0.0, dropoutsSummary0.getAverageTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CostClass costClass0 = CostClass.UNACCEPTABLE;
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("br.edu.ufcg.computacao.eureca.backend.api.http.response.dropout.DropoutsSummary", "br.edu.ufcg.computacao.eureca.backend.api.http.response.dropout.DropoutsSummary", 4203, 4203, 4203, costClass0, (DropoutReasonSummary) null);
      double double0 = dropoutsSummary0.getAverageCost();
      assertEquals(4203, dropoutsSummary0.getDropoutCount());
      assertEquals(4203.0, dropoutsSummary0.getAverageTermsCount(), 0.01);
      assertEquals(4203.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CostClass costClass0 = CostClass.NOT_APPLICABLE;
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("w@+*/k)", "w@+*/k)", (-40), (-40), (-40), costClass0, dropoutReasonSummary0);
      dropoutsSummary0.setDropoutCount((-40));
      assertEquals((-40.0), dropoutsSummary0.getAverageCost(), 0.01);
      assertEquals((-40.0), dropoutsSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-40), dropoutsSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CostClass costClass0 = CostClass.NOT_APPLICABLE;
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("w@+*/k)", "w@+*/k)", (-40), (-40), (-40), costClass0, dropoutReasonSummary0);
      double double0 = dropoutsSummary0.getAverageCost();
      assertEquals((-40), dropoutsSummary0.getDropoutCount());
      assertEquals((-40.0), double0, 0.01);
      assertEquals((-40.0), dropoutsSummary0.getAverageTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CostClass costClass0 = CostClass.NOT_APPLICABLE;
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("w@+*/k)", "w@+*/k)", (-40), (-40), (-40), costClass0, dropoutReasonSummary0);
      double double0 = dropoutsSummary0.getAverageTermsCount();
      assertEquals((-40.0), double0, 0.01);
      assertEquals((-40.0), dropoutsSummary0.getAverageCost(), 0.01);
      assertEquals((-40), dropoutsSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CostClass costClass0 = CostClass.NOT_APPLICABLE;
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("", "", 429, 429, 429, costClass0, dropoutReasonSummary0);
      int int0 = dropoutsSummary0.getDropoutCount();
      assertEquals(429, int0);
      assertEquals(429.0, dropoutsSummary0.getAverageCost(), 0.01);
      assertEquals(429.0, dropoutsSummary0.getAverageTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CostClass costClass0 = CostClass.NOT_APPLICABLE;
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("w@+*/k)", "w@+*/k)", (-40), (-40), (-40), costClass0, dropoutReasonSummary0);
      dropoutsSummary0.setCostClass(costClass0);
      assertEquals((-40.0), dropoutsSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-40), dropoutsSummary0.getDropoutCount());
      assertEquals((-40.0), dropoutsSummary0.getAverageCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CostClass costClass0 = CostClass.NOT_APPLICABLE;
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("", "", 429, 429, 429, costClass0, dropoutReasonSummary0);
      dropoutsSummary0.getCostClass();
      assertEquals(429, dropoutsSummary0.getDropoutCount());
      assertEquals(429.0, dropoutsSummary0.getAverageCost(), 0.01);
      assertEquals(429.0, dropoutsSummary0.getAverageTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CostClass costClass0 = CostClass.NOT_APPLICABLE;
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("", "", 429, 429, 429, costClass0, dropoutReasonSummary0);
      dropoutsSummary0.getTo();
      assertEquals(429.0, dropoutsSummary0.getAverageCost(), 0.01);
      assertEquals(429.0, dropoutsSummary0.getAverageTermsCount(), 0.01);
      assertEquals(429, dropoutsSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CostClass costClass0 = CostClass.NOT_APPLICABLE;
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("", "", 429, 429, 429, costClass0, dropoutReasonSummary0);
      dropoutsSummary0.setAverageTermsCount(429);
      assertEquals(429.0, dropoutsSummary0.getAverageCost(), 0.01);
      assertEquals(429.0, dropoutsSummary0.getAverageTermsCount(), 0.01);
      assertEquals(429, dropoutsSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CostClass costClass0 = CostClass.REGULAR;
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("br.ed.ufcg.computacao.eueeca^backnd.api.http.response.dropout.DropntsSummary", "br.ed.ufcg.computacao.eueeca^backnd.api.http.response.dropout.DropntsSummary", 1702, 1702, 1702, costClass0, dropoutReasonSummary0);
      dropoutsSummary0.setAverageCost(1702);
      assertEquals(1702.0, dropoutsSummary0.getAverageTermsCount(), 0.01);
      assertEquals(1702.0, dropoutsSummary0.getAverageCost(), 0.01);
      assertEquals(1702, dropoutsSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CostClass costClass0 = CostClass.NOT_APPLICABLE;
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("", "", 429, 429, 429, costClass0, dropoutReasonSummary0);
      dropoutsSummary0.getFrom();
      assertEquals(429.0, dropoutsSummary0.getAverageTermsCount(), 0.01);
      assertEquals(429, dropoutsSummary0.getDropoutCount());
      assertEquals(429.0, dropoutsSummary0.getAverageCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CostClass costClass0 = CostClass.NOT_APPLICABLE;
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      doReturn("w@+*/k)").when(dropoutReasonSummary0).toString();
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("w@+*/k)", "w@+*/k)", (-40), (-40), (-40), costClass0, dropoutReasonSummary0);
      DropoutReasonSummary dropoutReasonSummary1 = dropoutsSummary0.getDropouts();
      dropoutsSummary0.setDropouts(dropoutReasonSummary1);
      assertEquals((-40.0), dropoutsSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-40), dropoutsSummary0.getDropoutCount());
      assertEquals((-40.0), dropoutsSummary0.getAverageCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CostClass costClass0 = CostClass.REGULAR;
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = new DropoutsSummary("br.ed.ufcg.computacao.eueeca^backnd.api.http.response.dropout.DropntsSummary", "br.ed.ufcg.computacao.eueeca^backnd.api.http.response.dropout.DropntsSummary", 1702, 1702, 1702, costClass0, dropoutReasonSummary0);
      dropoutsSummary0.setFrom("br.ed.ufcg.computacao.eueeca^backnd.api.http.response.dropout.DropntsSummary");
      assertEquals(1702.0, dropoutsSummary0.getAverageTermsCount(), 0.01);
      assertEquals(1702.0, dropoutsSummary0.getAverageCost(), 0.01);
      assertEquals(1702, dropoutsSummary0.getDropoutCount());
  }
}
