/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:10:35 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.constants;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.edu.ufcg.computacao.eureca.backend.constants.Field;
import br.edu.ufcg.computacao.eureca.backend.constants.SubjectsGlossaryFields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubjectsGlossaryFields_ESTest extends SubjectsGlossaryFields_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      SubjectsGlossaryFields subjectsGlossaryFields0 = new SubjectsGlossaryFields(field0, field0, field0, field0);
      subjectsGlossaryFields0.setMandatory((Field) null);
      Field field1 = subjectsGlossaryFields0.getOptional();
      assertNull(field1.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      SubjectsGlossaryFields subjectsGlossaryFields0 = new SubjectsGlossaryFields(field0, field0, field0, field0);
      subjectsGlossaryFields0.setComplementary((Field) null);
      Field field1 = subjectsGlossaryFields0.getOptional();
      assertNull(field1.getDescription());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      SubjectsGlossaryFields subjectsGlossaryFields0 = new SubjectsGlossaryFields(field0, field0, field0, field0);
      subjectsGlossaryFields0.elective = null;
      Field field1 = subjectsGlossaryFields0.getOptional();
      assertNull(field1.getDescription());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubjectsGlossaryFields subjectsGlossaryFields0 = new SubjectsGlossaryFields((Field) null, (Field) null, (Field) null, (Field) null);
      Field field0 = subjectsGlossaryFields0.getOptional();
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      SubjectsGlossaryFields subjectsGlossaryFields0 = new SubjectsGlossaryFields(field0, field0, field0, field0);
      subjectsGlossaryFields0.setMandatory((Field) null);
      Field field1 = subjectsGlossaryFields0.getMandatory();
      assertNull(field1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      SubjectsGlossaryFields subjectsGlossaryFields0 = new SubjectsGlossaryFields(field0, field0, field0, field0);
      subjectsGlossaryFields0.elective = null;
      Field field1 = subjectsGlossaryFields0.getElective();
      assertNull(field1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      SubjectsGlossaryFields subjectsGlossaryFields0 = new SubjectsGlossaryFields(field0, field0, field0, field0);
      subjectsGlossaryFields0.setComplementary((Field) null);
      Field field1 = subjectsGlossaryFields0.getComplementary();
      assertNull(field1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      SubjectsGlossaryFields subjectsGlossaryFields0 = new SubjectsGlossaryFields(field0, field0, field0, field0);
      Field field1 = subjectsGlossaryFields0.getMandatory();
      assertSame(field1, field0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      SubjectsGlossaryFields subjectsGlossaryFields0 = new SubjectsGlossaryFields(field0, field0, field0, field0);
      Field field1 = subjectsGlossaryFields0.getComplementary();
      assertSame(field1, field0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      SubjectsGlossaryFields subjectsGlossaryFields0 = new SubjectsGlossaryFields(field0, field0, field0, field0);
      subjectsGlossaryFields0.setElective((Field) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      SubjectsGlossaryFields subjectsGlossaryFields0 = new SubjectsGlossaryFields(field0, field0, field0, field0);
      Field field1 = subjectsGlossaryFields0.getElective();
      subjectsGlossaryFields0.setMandatory(field1);
      assertSame(field1, field0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      SubjectsGlossaryFields subjectsGlossaryFields0 = new SubjectsGlossaryFields(field0, field1, field1, field1);
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      subjectsGlossaryFields0.setOptional(field2);
  }
}
