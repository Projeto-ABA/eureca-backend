/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 21:41:56 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentMetrics;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentMetricsSummary;
import br.edu.ufcg.computacao.eureca.backend.core.models.CostClass;
import br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum;
import br.edu.ufcg.computacao.eureca.backend.core.models.RiskClass;
import br.edu.ufcg.computacao.eureca.backend.core.models.Student;
import br.edu.ufcg.computacao.eureca.backend.core.models.StudentStatus;
import br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StudentMetricsCalculator_ESTest extends StudentMetricsCalculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<Student> linkedHashSet0 = new LinkedHashSet<Student>();
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("WARN", "1<lfrgY]RX@/:;f", "", "WARN", "", "WARN", "", "WARN", "R5a)HRb.T7P'0_RyR", "", "R5a)HRb.T7P'0_RyR", "WARN", studentStatus0, "zzE!hy#k`=~:", "1<lfrgY]RX@/:;f", "", "", ".negate()", "com.google.common.collect.Maps$ViewCachingAbstractMap", (String) null, "WARN", "!e", (Curriculum) null, (-791), (-1879048192), 704, (-791), (-1879048192), (-1), 675, 2281.791, (-791), 241.2391, (-4124), (-1), 704, 2146768837, 1657099012, 1657099012);
      linkedHashSet0.add(student0);
      // Undeclared exception!
      try { 
        StudentMetricsCalculator.computeMetricsSummary(linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayDeque<Student> arrayDeque0 = new ArrayDeque<Student>();
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Curriculum curriculum0 = new Curriculum("br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-1136), (-1136), 2350, (-1136), 2350, 20, (-1136), 2350, (-6210), 20, treeSet0, treeSet0, treeSet0, treeSet0, treeSet0);
      Student student0 = new Student("l{S$v;muN].e\"!M1E-", "l{S$v;muN].e\"!M1E-", (String) null, (String) null, "l{S$v;muN].e\"!M1E-", (String) null, "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "d8*VFB/dk?4_Ac+", "d8*VFB/dk?4_Ac+", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "l{S$v;muN].e\"!M1E-", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", studentStatus0, (String) null, "7[+5|HtT$QA", "__file", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "", "Ubd\tCuE6hTs~0j\"f", (String) null, "Ubd\tCuE6hTs~0j\"f", "Ubd\tCuE6hTs~0j\"f", curriculum0, 49, 49, 1461, 201, 20, 201, 822, 49, 822, 1081.737, 2350, (-1136), 822, 2350, (-1575), (-307.74));
      arrayDeque0.add(student0);
      arrayDeque0.add(student0);
      StudentMetricsSummary studentMetricsSummary0 = StudentMetricsCalculator.computeMetricsSummary(arrayDeque0);
      assertEquals(2350.0, studentMetricsSummary0.getTermsCount(), 0.01);
      assertNotNull(studentMetricsSummary0);
      assertEquals(CostClass.NOT_APPLICABLE, studentMetricsSummary0.getCostClass());
      assertEquals(RiskClass.UNFEASIBLE, studentMetricsSummary0.getRiskClass());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CostClass costClass0 = StudentMetricsCalculator.computeCostClass(1.0, 0.0);
      assertEquals(CostClass.UNACCEPTABLE, costClass0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Student> arrayList0 = new ArrayList<Student>();
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Curriculum curriculum0 = new Curriculum("br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", arrayList1, arrayList1, arrayList1, arrayList1, arrayList1, 2350, 241, 0, (-463), 0, 241, 241, 2350, (-463), 241, (Collection<String>) null, set0, set0, (Collection<String>) null, (Collection<String>) null);
      Student student0 = new Student("br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "", "org.apache.commons.io.filefilter.EmptyFileFilter", "", "edo3g6w*", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "", "", studentStatus0, "edo3g6w*", "", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "ADEQUATE", "", "", "", "", curriculum0, 2769, 1, 0, 0, 2350, 707, 117, 0, 4533.0, 3.0, 0, 2164, 1, (-2541), 50000, 117);
      arrayList0.add(student0);
      StudentMetricsSummary studentMetricsSummary0 = StudentMetricsCalculator.computeMetricsSummary(arrayList0);
      assertEquals(RiskClass.INACCURATE, studentMetricsSummary0.getRiskClass());
      assertEquals(0.0, studentMetricsSummary0.getTermsCount(), 0.01);
      assertEquals(CostClass.INACCURATE, studentMetricsSummary0.getCostClass());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "", "", "", "", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", (String) null, "vIbg)L+`,5i5~n(lb_", "", (String) null, "", studentStatus0, "=J", "org.apache.log4j.Hierarchy", "", "", "=J", "", "", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "Could not find root logger information. Is this OK?", (Curriculum) null, 1652, 1652, 1652, 1652, 1652, 1652, (-2302), 2534.597960783, (-909.76309799), (-1054.45492196264), 1073741824, (-2302), 1652, 2095, (-792), 0.0);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(student0);
      assertNull(studentMetrics0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Curriculum curriculum0 = new Curriculum("rx>cw4YC,G,.", "rx>cw4YC,G,.", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 39, (-2642), (-1), 1460, 1460, 39, 39, 1460, 306654259, 0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("rx>cw4YC,G,.", "rx>cw4YC,G,.", "", "", "rx>cw4YC,G,.", "rx>cw4YC,G,.", "F", "rx>cw4YC,G,.", "rx>cw4YC,G,.", "", "(pn=L3[\"NGY9}]WH", "?/L5PK70%w", studentStatus0, "", (String) null, "", "?/L5PK70%w", "?/L5PK70%w", "?/L5PK70%w", "", "rx>cw4YC,G,.", "Uy(", curriculum0, 127, 0, 1, (-1), 39, 1, 1085, 1085, (-1), 0.0, 0, 306654259, 1085, 1460, 0, 0.0);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(student0);
      assertEquals(1085.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(0.0, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-1.0), studentMetrics0.getRisk(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
      assertEquals(0.5, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(0.0, studentMetrics0.getPace(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Curriculum curriculum0 = new Curriculum("br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-1136), (-1136), 2350, (-1136), 2350, 20, (-1136), 2350, (-6210), 20, treeSet0, treeSet0, treeSet0, treeSet0, treeSet0);
      Student student0 = new Student("l{S$v;muN].e\"!M1E-", "l{S$v;muN].e\"!M1E-", (String) null, (String) null, "l{S$v;muN].e\"!M1E-", (String) null, "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "d8*VFB/dk?4_Ac+", "d8*VFB/dk?4_Ac+", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "l{S$v;muN].e\"!M1E-", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", studentStatus0, (String) null, "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "", "Ubd\tCuE6hTs~0j\"f", (String) null, "Ubd\tCuE6hTs~0j\"f", "Ubd\tCuE6hTs~0j\"f", curriculum0, (-6210), (-6210), (-1136), 2350, 20, 2350, 822, (-6210), 822, 1081.737, 2350, (-1136), 822, 2350, (-1575), (-307.74));
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(student0);
      assertEquals((-0.3780671006509765), studentMetrics0.getPace(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(822.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-1.8369829683698298), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(1.4188261912803713E-5, studentMetrics0.getFeasibility(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
      assertEquals(0.2058087130696044, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals((-1.0), studentMetrics0.getRisk(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Curriculum curriculum0 = new Curriculum((String) null, ";@j^S|Kd_COA~", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 0, 0, 0, 1, (-56), 0, 829, 1, 1, arrayList1, arrayList1, priorityQueue0, priorityQueue0, priorityQueue0);
      Student student0 = new Student("br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", (String) null, (String) null, (String) null, ";@j^S|Kd_COA~", ";@j^S|Kd_COA~", ";@j^S|Kd_COA~", (String) null, (String) null, (String) null, "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", studentStatus0, ";@j^S|Kd_COA~", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", ";@j^S|Kd_COA~", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "", (String) null, "", "Xs^Z8Z|Ss\"", (String) null, curriculum0, 1, 1, 829, 1, 4402, (-1), 255, 2133.46235106, (-1), 829, 1, 0, 1, 8233, (-4871), 4.0);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(student0);
      assertEquals(0.3333333333333333, studentMetrics0.getPace(), 0.01);
      assertEquals(-0.0, studentMetrics0.getRisk(), 0.01);
      assertEquals(85.0, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(0.00392156862745098, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(255.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(-0.0, studentMetrics0.getCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Curriculum curriculum0 = new Curriculum("br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-1136), (-1136), 2350, (-1136), 2350, (-18), (-1136), 2350, (-6195), (-18), treeSet0, treeSet0, treeSet0, treeSet0, treeSet0);
      Student student0 = new Student("l{S$v;muN].e\"!M1E-", "l{S$v;muN].e\"!M1E-", (String) null, (String) null, "l{S$v;muN].e\"!M1E-", (String) null, "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "d8*fFB/dk?4_Ac+", "d8*fFB/dk?4_Ac+", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "l{S$v;muN].e\"!M1E-", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", studentStatus0, (String) null, "7[+5|HtT$QA", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "", "Ubd\tCuE6hTs~0j\"f", (String) null, "Ubd\tCuE6hTs~0j\"f", "Ubd\tCuE6hTs~0j\"f", curriculum0, 49, 49, 1461, 2350, (-18), 2350, 822, 49, 822, 1081.737, 2350, (-1136), 822, 2350, (-1575), (-307.74));
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(student0);
      assertEquals(2.988235294117647, studentMetrics0.getRisk(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(49.4332374067055, studentMetrics0.getCost(), 0.01);
      assertEquals(1.1890335503254883, studentMetrics0.getPace(), 0.01);
      assertEquals(5.7773722627737225, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(0.2058087130696044, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals((-889.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(2);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Curriculum curriculum0 = new Curriculum("d-pj@V", "YRL^Il4", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 2, (-1), (-1), (-1), 2, 0, (-1), 0, 0, (-1), arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0);
      Student student0 = new Student("#nFF", "#nFF", "#nFF", "?u3@=!djKx", "AX3*N[xyN=WXrxuoa", "YRL^Il4", "Finished configuring.", "#nFF", "AX3*N[xyN=WXrxuoa", "AX3*N[xyN=WXrxuoa", "Finished configuring.", ">)0Yn.gyD4}L)b3U~S", studentStatus0, "YRL^Il4", "{HHA(3NZ:", ">)0Yn.gyD4}L)b3U~S", "Insensitive", "#nFF", "YRL^Il4", "", ">)0Yn.gyD4}L)b3U~S", "AX3*N[xyN=WXrxuoa", curriculum0, 1, (-65), 786, 0, 1, 786, 0, 0.0, 1.0, 0.0, 1771, 0, 786, 1771, (-1), 0);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(student0);
      assertEquals(16.0, studentMetrics0.getRisk(), 0.01);
      assertEquals(0.21567454382291354, studentMetrics0.getPace(), 0.01);
      assertEquals((-4.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-1.0), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(0.0, studentMetrics0.getAverageLoad(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("`#|ehCDA7/+K|}eb#", "`#|ehCDA7/+K|}eb#", "`#|ehCDA7/+K|}eb#", "hw<%BL", "1Iu]1", "1Iu]1", (String) null, (String) null, "hw<%BL", "ZRN7Qwq<5w].", "", "1Iu]1", studentStatus0, ", gpa=", "", "", "ZRN7Qwq<5w].", (String) null, "1Iu]1", ", minNumberOfTerms=", "", (String) null, (Curriculum) null, 0, 9, 9, 9, 1, 1155, 0, 1, 4.0, 2079.37475, 0, 9, 0, 0, 0, 3829.830863190127);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(student0);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
      assertNotNull(studentMetrics0);
      assertEquals((-1.0), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals((-1.0), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-1.0), studentMetrics0.getPace(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Curriculum curriculum0 = new Curriculum("'V *d%", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 2, 0, 1968, 2, (-539), 1678, 2, 562, 1678, (-2200), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      Student student0 = new Student("br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "'V *d%", "com.google.common.base.Predicates$NotPredicate", "'V *d%", "com.google.common.base.Predicates$NotPredicate", "com.google.common.base.Predicates$NotPredicate", "", "'V *d%", "bnp", "", (String) null, (String) null, studentStatus0, (String) null, "'V *d%", "org.apache.log4j.spi.ErrorHandler", "com.google.common.base.Predicates$NotPredicate", "'V *d%", "org.apache.log4j.spi.ErrorHandler", "", "", (String) null, curriculum0, 0, 1968, 2174, 1678, 31, 1678, (-2200), 1968, 4.0, 1678, 0, 65535, 1371, (-539), (-1), (-2109.156));
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(student0);
      assertEquals((-2200.0), studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(0.806989674344718, studentMetrics0.getRisk(), 0.01);
      assertEquals((-0.8023340627279358), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals((-1.0), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(1.9416484318016047, studentMetrics0.getPace(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(1016.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(1, 1, (-1602), (Curriculum) null);
      assertNull(studentMetrics0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Curriculum curriculum0 = new Curriculum("", "!A]VKO)GN", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-415), 39, 1159, 1, 1908874353, 1, 127, 1, 0, 0, linkedHashSet0, linkedList0, linkedHashSet0, linkedHashSet0, linkedList0);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(1, 1908874353, 0, curriculum0);
      assertEquals(0.0, studentMetrics0.getPace(), 0.01);
      assertEquals(1.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-1.0), studentMetrics0.getFeasibility(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
      assertEquals(5.23868948434659E-10, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals((-1.0), studentMetrics0.getRisk(), 0.01);
      assertEquals(0.0, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Curriculum curriculum0 = new Curriculum("C", "wV", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 468, 1283, 1283, 1, 0, 1, 0, 1283, 468, 306654252, arrayList1, arrayList1, arrayList1, arrayList1, arrayList1);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(1283, 1283, 1283, curriculum0);
      assertEquals(1.0, studentMetrics0.getPace(), 0.01);
      assertEquals(4046.6666666666665, studentMetrics0.getRisk(), 0.01);
      assertEquals(1.0, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(1283.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(5.724483584925694E-6, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(3035.0, studentMetrics0.getCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      Curriculum curriculum0 = new Curriculum("", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 1, 0, 93, 3823, 0, 0, (-2642), hashSet0, hashSet0, hashSet0, hashSet0, hashSet0);
      curriculum0.setMinComplementaryCreditsNeeded(0);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(1, 1, 3823, curriculum0);
      assertEquals(0.0, studentMetrics0.getRisk(), 0.01);
      assertEquals(1.0, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(3823.0, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(0.0, studentMetrics0.getCost(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(3823.0, studentMetrics0.getPace(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((SortedSet<? extends String>) treeSet0);
      Curriculum curriculum0 = new Curriculum("4EJmAHh6Z4e2Av", "4EJmAHh6Z4e2Av", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, priorityQueue0, priorityQueue0, treeSet0, treeSet0, treeSet0);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(0, 145, 46, curriculum0);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(145.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-1.0), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, studentMetrics0.getRisk(), 0.01);
      assertEquals((-1.0), studentMetrics0.getFeasibility(), 0.01);
      assertEquals(0.31724137931034485, studentMetrics0.getPace(), 0.01);
      assertEquals(0.0, studentMetrics0.getAverageLoad(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        StudentMetricsCalculator.computeMetrics((Student) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CostClass costClass0 = StudentMetricsCalculator.computeCostClass(2.0, 0.2613523164693816);
      assertEquals(CostClass.VERY_HIGH, costClass0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CostClass costClass0 = StudentMetricsCalculator.computeCostClass(2534.597960783, 2534.597960783);
      assertEquals(CostClass.ADEQUATE, costClass0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CostClass costClass0 = StudentMetricsCalculator.computeCostClass(0.03, 0.0);
      assertEquals(CostClass.INACCURATE, costClass0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CostClass costClass0 = StudentMetricsCalculator.computeCostClass((-1923.4), 2534.597960783);
      assertEquals(CostClass.NOT_APPLICABLE, costClass0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RiskClass riskClass0 = StudentMetricsCalculator.computeRiskClass(3.0, 4.9E-324);
      assertEquals(RiskClass.HIGH, riskClass0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RiskClass riskClass0 = StudentMetricsCalculator.computeRiskClass(0.0, (-307.74));
      assertEquals(RiskClass.SAFE, riskClass0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RiskClass riskClass0 = StudentMetricsCalculator.computeRiskClass(1139.8108468971282, 4197.94);
      assertEquals(RiskClass.INACCURATE, riskClass0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RiskClass riskClass0 = StudentMetricsCalculator.computeRiskClass((-307.74), 0.03);
      assertEquals(RiskClass.NOT_APPLICABLE, riskClass0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(5000, 0, 5000, (Curriculum) null);
      assertEquals(1.0, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-1.0), studentMetrics0.getRisk(), 0.01);
      assertEquals(5000.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-1.0), studentMetrics0.getFeasibility(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
      assertNotNull(studentMetrics0);
      assertEquals((-1.0), studentMetrics0.getPace(), 0.01);
      assertEquals((-1.0), studentMetrics0.getAverageLoad(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Stack<Student> stack0 = new Stack<Student>();
      StudentMetricsSummary studentMetricsSummary0 = StudentMetricsCalculator.computeMetricsSummary(stack0);
      assertNull(studentMetricsSummary0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CostClass costClass0 = StudentMetricsCalculator.computeCostClass(4197.94, 0.0);
      assertEquals(CostClass.UNACCEPTABLE, costClass0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CostClass costClass0 = StudentMetricsCalculator.computeCostClass(2043.83856, 990.764626);
      assertEquals(CostClass.HIGH, costClass0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CostClass costClass0 = StudentMetricsCalculator.computeCostClass(3.7734, 2.0);
      assertEquals(CostClass.REGULAR, costClass0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RiskClass riskClass0 = StudentMetricsCalculator.computeRiskClass(1, 1);
      assertEquals(RiskClass.UNFEASIBLE, riskClass0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RiskClass riskClass0 = StudentMetricsCalculator.computeRiskClass(756.2308798649526, (-565.1725001055231));
      assertEquals(RiskClass.AVERAGE, riskClass0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RiskClass riskClass0 = StudentMetricsCalculator.computeRiskClass(3.7734, (-2366.17368));
      assertEquals(RiskClass.LOW, riskClass0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Stack<Student> stack0 = new Stack<Student>();
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Curriculum curriculum0 = new Curriculum("@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 1, 1, 1, 1, 1, 1, 2140489946, 2140489946, 2140489946, 1, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0);
      Student student0 = new Student("@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", studentStatus0, "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", "@e?X@ZK9}2E%Sb+", curriculum0, 1, 1, 2140489946, 2140489946, 1, 1, 1, 2140489946, 2140489946, 2140489946, 2140489946, 1, 2140489946, 2140489946, 1, 2140489946);
      curriculum0.setMinMandatoryCreditsNeeded(2140489946);
      stack0.add(student0);
      StudentMetricsSummary studentMetricsSummary0 = StudentMetricsCalculator.computeMetricsSummary(stack0);
      assertEquals(RiskClass.HIGH, studentMetricsSummary0.getRiskClass());
      assertEquals(2.140489946E9, studentMetricsSummary0.getTermsCount(), 0.01);
      assertEquals(CostClass.VERY_HIGH, studentMetricsSummary0.getCostClass());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayDeque<Student> arrayDeque0 = new ArrayDeque<Student>();
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Curriculum curriculum0 = new Curriculum("tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-1041), (-1041), (-1041), (-1041), (-1041), (-1041), (-1041), (-1041), (-1041), (-1041), treeSet0, treeSet0, treeSet0, treeSet0, treeSet0);
      Student student0 = new Student("tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", studentStatus0, "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", "tl{Sfv;muN].e\"!@M1E-", curriculum0, (-1041), (-1041), (-1041), (-1041), (-1041), (-1041), (-1041), (-1041), (-1041), (-1041), (-1041), (-1041), (-1041), (-1041), (-1041), 2394.606177725046);
      arrayDeque0.add(student0);
      StudentMetricsSummary studentMetricsSummary0 = StudentMetricsCalculator.computeMetricsSummary(arrayDeque0);
      assertEquals((-1041.0), studentMetricsSummary0.getTermsCount(), 0.01);
      assertEquals(CostClass.INACCURATE, studentMetricsSummary0.getCostClass());
      assertNotNull(studentMetricsSummary0);
      assertEquals(RiskClass.INACCURATE, studentMetricsSummary0.getRiskClass());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Curriculum curriculum0 = new Curriculum("CharMIt*her.sciip)", "CharMIt*her.sciip)", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 143, (-2727), 143, 143, 143, 143, 143, 143, 143, (-2727), linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics((-2727), 143, (-2727), curriculum0);
      assertEquals((-19.06993006993007), studentMetrics0.getPace(), 0.01);
      assertEquals((-2727.0), studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-1.0), studentMetrics0.getRisk(), 0.01);
      assertEquals((-1.0), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-1.0), studentMetrics0.getFeasibility(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-19.06993006993007), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StudentMetricsCalculator studentMetricsCalculator0 = new StudentMetricsCalculator();
  }
}
