/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:18:07 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.constants;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.edu.ufcg.computacao.eureca.backend.constants.EnrollmentsGlossaryFields;
import br.edu.ufcg.computacao.eureca.backend.constants.Field;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnrollmentsGlossaryFields_ESTest extends EnrollmentsGlossaryFields_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0);
      enrollmentsGlossaryFields0.averageClassesPerPeriod = null;
      Field field1 = enrollmentsGlossaryFields0.getAverageClassesPerPeriod();
      assertNull(field1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field1).toString();
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field3 = mock(Field.class, new ViolatedAssumptionAnswer());
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field1, field2, field2, field3);
      enrollmentsGlossaryFields0.setMax(enrollmentsGlossaryFields0.averageClassesPerDiscipline);
      Field field4 = enrollmentsGlossaryFields0.getMax();
      assertSame(field4, field1);
      assertNotNull(field4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field3 = mock(Field.class, new ViolatedAssumptionAnswer());
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field1, field2, field2, field3);
      Field field4 = enrollmentsGlossaryFields0.getMax();
      assertNotNull(field4);
      assertSame(field4, field0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0);
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      enrollmentsGlossaryFields0.averageClassesPerDiscipline = field1;
      Field field2 = enrollmentsGlossaryFields0.getAverageEnrollmentsPerClass();
      assertNotNull(field2);
      
      enrollmentsGlossaryFields0.setSubjects(field2);
      assertNotSame(field2, field1);
      assertSame(field2, field0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field3 = mock(Field.class, new ViolatedAssumptionAnswer());
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field1, field2, field2, field3);
      enrollmentsGlossaryFields0.setSubjects(enrollmentsGlossaryFields0.averageClassesPerDiscipline);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0);
      enrollmentsGlossaryFields0.averageClassesPerDiscipline = null;
      Field field1 = enrollmentsGlossaryFields0.getSubjects();
      assertNull(field1.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0);
      enrollmentsGlossaryFields0.setMax((Field) null);
      Field field1 = enrollmentsGlossaryFields0.getSubjects();
      assertNull(field1.getDescription());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0);
      enrollmentsGlossaryFields0.setAverageClassesPerPeriod((Field) null);
      Field field1 = enrollmentsGlossaryFields0.getSubjects();
      assertSame(field1, field0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0);
      enrollmentsGlossaryFields0.setAverageEnrollmentsPerClass((Field) null);
      Field field1 = enrollmentsGlossaryFields0.getSubjects();
      assertSame(field1, field0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0);
      enrollmentsGlossaryFields0.setMin((Field) null);
      Field field1 = enrollmentsGlossaryFields0.getSubjects();
      assertNull(field1.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0);
      enrollmentsGlossaryFields0.setAverageEnrollmentsPerPeriod((Field) null);
      Field field1 = enrollmentsGlossaryFields0.getSubjects();
      assertSame(field1, field0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0);
      enrollmentsGlossaryFields0.setMin((Field) null);
      Field field1 = enrollmentsGlossaryFields0.getMin();
      assertNull(field1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields((Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null);
      Field field0 = enrollmentsGlossaryFields0.getMax();
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0);
      enrollmentsGlossaryFields0.setAverageEnrollmentsPerClass((Field) null);
      Field field1 = enrollmentsGlossaryFields0.getAverageEnrollmentsPerClass();
      assertNull(field1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0);
      Field field1 = enrollmentsGlossaryFields0.getAverageClassesPerPeriod();
      assertNull(field1.getDescription());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0);
      enrollmentsGlossaryFields0.averageClassesPerDiscipline = null;
      Field field1 = enrollmentsGlossaryFields0.getAverageClassesPerDiscipline();
      assertNull(field1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0);
      enrollmentsGlossaryFields0.setAverageEnrollmentsPerPeriod((Field) null);
      Field field1 = enrollmentsGlossaryFields0.getAverageEnrollmentsPerPeriod();
      assertNull(field1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0);
      Field field1 = enrollmentsGlossaryFields0.getMin();
      assertSame(field1, field0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0);
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      enrollmentsGlossaryFields0.setAverageClassesPerDiscipline(field1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0);
      Field field1 = enrollmentsGlossaryFields0.getAverageClassesPerDiscipline();
      assertNull(field1.getName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields(field0, field0, field0, field0, field0, field0, field0);
      Field field1 = enrollmentsGlossaryFields0.getAverageEnrollmentsPerPeriod();
      assertNull(field1.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = new EnrollmentsGlossaryFields((Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null);
      Field field0 = enrollmentsGlossaryFields0.getSubjects();
      assertNull(field0);
  }
}
