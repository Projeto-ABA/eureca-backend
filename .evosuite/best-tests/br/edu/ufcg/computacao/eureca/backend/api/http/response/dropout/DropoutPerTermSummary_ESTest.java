/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:27:57 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.dropout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.dropout.DropoutPerTermSummary;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.dropout.DropoutReasonSummary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DropoutPerTermSummary_ESTest extends DropoutPerTermSummary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary((String) null, 744, dropoutReasonSummary0, 744, 744);
      dropoutPerTermSummary0.getTerm();
      assertEquals(744, dropoutPerTermSummary0.getDropoutCount());
      assertEquals(744.0, dropoutPerTermSummary0.getAverageCost(), 0.01);
      assertEquals(744.0, dropoutPerTermSummary0.getAverageTerms(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("", 953, (DropoutReasonSummary) null, 953, 953);
      dropoutPerTermSummary0.getTerm();
      assertEquals(953.0, dropoutPerTermSummary0.getAverageCost(), 0.01);
      assertEquals(953.0, dropoutPerTermSummary0.getAverageTerms(), 0.01);
      assertEquals(953, dropoutPerTermSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("", 953, (DropoutReasonSummary) null, 953, 953);
      dropoutPerTermSummary0.getReasons();
      assertEquals(953.0, dropoutPerTermSummary0.getAverageTerms(), 0.01);
      assertEquals(953.0, dropoutPerTermSummary0.getAverageCost(), 0.01);
      assertEquals(953, dropoutPerTermSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary((String) null, 0, dropoutReasonSummary0, 1230.226, 0);
      dropoutPerTermSummary0.getDropoutTerm();
      assertEquals(0, dropoutPerTermSummary0.getDropoutCount());
      assertEquals(0.0, dropoutPerTermSummary0.getAverageCost(), 0.01);
      assertEquals(1230.226, dropoutPerTermSummary0.getAverageTerms(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("", 953, (DropoutReasonSummary) null, 953, 953);
      dropoutPerTermSummary0.setDropoutTerm("A8P\"$R|5$<");
      dropoutPerTermSummary0.getDropoutTerm();
      assertEquals(953.0, dropoutPerTermSummary0.getAverageCost(), 0.01);
      assertEquals(953.0, dropoutPerTermSummary0.getAverageTerms(), 0.01);
      assertEquals(953, dropoutPerTermSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary((String) null, 0, dropoutReasonSummary0, 1230.226, 0);
      int int0 = dropoutPerTermSummary0.getDropoutCount();
      assertEquals(0, int0);
      assertEquals(0.0, dropoutPerTermSummary0.getAverageCost(), 0.01);
      assertEquals(1230.226, dropoutPerTermSummary0.getAverageTerms(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("9 a%GGfuZ9!J[FG`\"", (-440), (DropoutReasonSummary) null, (-440), (-440));
      int int0 = dropoutPerTermSummary0.getDropoutCount();
      assertEquals((-440.0), dropoutPerTermSummary0.getAverageCost(), 0.01);
      assertEquals((-440.0), dropoutPerTermSummary0.getAverageTerms(), 0.01);
      assertEquals((-440), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("`9vQR/$6V)1skpCY3'V", 0, dropoutReasonSummary0, 0, 0);
      double double0 = dropoutPerTermSummary0.getAverageTerms();
      assertEquals(0.0, dropoutPerTermSummary0.getAverageCost(), 0.01);
      assertEquals(0, dropoutPerTermSummary0.getDropoutCount());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("9 a%GGfuZ9!J[FG`\"", (-440), (DropoutReasonSummary) null, (-440), (-440));
      double double0 = dropoutPerTermSummary0.getAverageTerms();
      assertEquals((-440.0), double0, 0.01);
      assertEquals((-440), dropoutPerTermSummary0.getDropoutCount());
      assertEquals((-440.0), dropoutPerTermSummary0.getAverageCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("", 953, (DropoutReasonSummary) null, 953, 953);
      dropoutPerTermSummary0.setAverageCost(0.0);
      double double0 = dropoutPerTermSummary0.getAverageCost();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("", 953, (DropoutReasonSummary) null, 953, 953);
      dropoutPerTermSummary0.setAverageCost((-3198.024912));
      double double0 = dropoutPerTermSummary0.getAverageCost();
      assertEquals((-3198.024912), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("", 953, (DropoutReasonSummary) null, 953, 953);
      dropoutPerTermSummary0.setDropoutTerm("A8P\"$R|5$<");
      DropoutPerTermSummary dropoutPerTermSummary1 = new DropoutPerTermSummary("=89eKA9I3RD2", (-1), (DropoutReasonSummary) null, (-136.7726166711394), 953);
      int int0 = dropoutPerTermSummary0.compareTo(dropoutPerTermSummary1);
      assertEquals(953.0, dropoutPerTermSummary1.getAverageCost(), 0.01);
      assertEquals((-136.7726166711394), dropoutPerTermSummary1.getAverageTerms(), 0.01);
      assertEquals(4, int0);
      assertEquals((-1), dropoutPerTermSummary1.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("9 a%GGfuZ9!J[FG`\"", (-440), (DropoutReasonSummary) null, (-440), (-440));
      DropoutPerTermSummary dropoutPerTermSummary1 = new DropoutPerTermSummary("", 0, (DropoutReasonSummary) null, (-440), (-197.35983251806));
      dropoutPerTermSummary1.setDropoutTerm("br.edu.ufcg.computacao.eureca.backend.api.http.response.dropout.DropoutReasonSummary");
      int int0 = dropoutPerTermSummary0.compareTo(dropoutPerTermSummary1);
      assertEquals((-440.0), dropoutPerTermSummary1.getAverageTerms(), 0.01);
      assertEquals((-41), int0);
      assertEquals((-197.35983251806), dropoutPerTermSummary1.getAverageCost(), 0.01);
      assertEquals((-440), dropoutPerTermSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary((String) null, 0, dropoutReasonSummary0, 3205.1, (-850.947225));
      // Undeclared exception!
      try { 
        dropoutPerTermSummary0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.dropout.DropoutPerTermSummary", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("", 0, (DropoutReasonSummary) null, 0, 1.0);
      dropoutPerTermSummary0.getDropoutTerm();
      assertEquals(0.0, dropoutPerTermSummary0.getAverageTerms(), 0.01);
      assertEquals(1.0, dropoutPerTermSummary0.getAverageCost(), 0.01);
      assertEquals(0, dropoutPerTermSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("}ux", 2417, dropoutReasonSummary0, 2417, 2417);
      dropoutPerTermSummary0.setDropoutCount(2417);
      assertEquals(2417, dropoutPerTermSummary0.getDropoutCount());
      assertEquals(2417.0, dropoutPerTermSummary0.getAverageCost(), 0.01);
      assertEquals(2417.0, dropoutPerTermSummary0.getAverageTerms(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("}ux", 2417, dropoutReasonSummary0, 2417, 2417);
      int int0 = dropoutPerTermSummary0.getDropoutCount();
      assertEquals(2417, int0);
      assertEquals(2417.0, dropoutPerTermSummary0.getAverageTerms(), 0.01);
      assertEquals(2417.0, dropoutPerTermSummary0.getAverageCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("}ux", 2417, dropoutReasonSummary0, 2417, 2417);
      double double0 = dropoutPerTermSummary0.getAverageTerms();
      assertEquals(2417, dropoutPerTermSummary0.getDropoutCount());
      assertEquals(2417.0, double0, 0.01);
      assertEquals(2417.0, dropoutPerTermSummary0.getAverageCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("}ux", 2417, dropoutReasonSummary0, 2417, 2417);
      dropoutPerTermSummary0.setReasons((DropoutReasonSummary) null);
      assertEquals(2417.0, dropoutPerTermSummary0.getAverageCost(), 0.01);
      assertEquals(2417.0, dropoutPerTermSummary0.getAverageTerms(), 0.01);
      assertEquals(2417, dropoutPerTermSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("}ux", 2417, dropoutReasonSummary0, 2417, 2417);
      dropoutPerTermSummary0.setAverageTerms(2417);
      assertEquals(2417.0, dropoutPerTermSummary0.getAverageTerms(), 0.01);
      assertEquals(2417.0, dropoutPerTermSummary0.getAverageCost(), 0.01);
      assertEquals(2417, dropoutPerTermSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("}ux", 2417, dropoutReasonSummary0, 2417, 2417);
      double double0 = dropoutPerTermSummary0.getAverageCost();
      assertEquals(2417.0, dropoutPerTermSummary0.getAverageTerms(), 0.01);
      assertEquals(2417.0, double0, 0.01);
      assertEquals(2417, dropoutPerTermSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("}ux", 2417, dropoutReasonSummary0, 2417, 2417);
      dropoutPerTermSummary0.compareTo(dropoutPerTermSummary0);
      assertEquals(2417.0, dropoutPerTermSummary0.getAverageTerms(), 0.01);
      assertEquals(2417, dropoutPerTermSummary0.getDropoutCount());
      assertEquals(2417.0, dropoutPerTermSummary0.getAverageCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary(" $W.%>\"OL^F/w^y", 158, dropoutReasonSummary0, 158, 158);
      dropoutPerTermSummary0.getTerm();
      assertEquals(158.0, dropoutPerTermSummary0.getAverageCost(), 0.01);
      assertEquals(158.0, dropoutPerTermSummary0.getAverageTerms(), 0.01);
      assertEquals(158, dropoutPerTermSummary0.getDropoutCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DropoutReasonSummary dropoutReasonSummary0 = mock(DropoutReasonSummary.class, new ViolatedAssumptionAnswer());
      DropoutPerTermSummary dropoutPerTermSummary0 = new DropoutPerTermSummary("", 26, dropoutReasonSummary0, 444.3, 368.2698);
      // Undeclared exception!
      try { 
        dropoutPerTermSummary0.compareTo("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.edu.ufcg.computacao.eureca.backend.api.http.response.dropout.DropoutPerTermSummary
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.dropout.DropoutPerTermSummary", e);
      }
  }
}
