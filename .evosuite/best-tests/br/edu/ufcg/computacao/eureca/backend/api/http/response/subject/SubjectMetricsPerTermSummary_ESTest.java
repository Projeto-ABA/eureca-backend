/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 23:30:35 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.subject;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetricsPerTerm;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetricsPerTermSummary;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubjectMetricsPerTermSummary_ESTest extends SubjectMetricsPerTermSummary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubjectMetricsPerTermSummary subjectMetricsPerTermSummary0 = new SubjectMetricsPerTermSummary("i7j=l!A:tXsh'F4", "i7j=l!A:tXsh'F4", (String) null, "i7j=l!A:tXsh'F4", (Collection<SubjectMetricsPerTerm>) null);
      subjectMetricsPerTermSummary0.setSubjectName((String) null);
      String string0 = subjectMetricsPerTermSummary0.getSubjectName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SubjectMetricsPerTermSummary subjectMetricsPerTermSummary0 = new SubjectMetricsPerTermSummary("", "br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetricsPerTermSummary", "e<.tx/*'Y", (String) null, (Collection<SubjectMetricsPerTerm>) null);
      subjectMetricsPerTermSummary0.setSubjectName("");
      subjectMetricsPerTermSummary0.getSubjectName();
      assertEquals("e<.tx/*'Y", subjectMetricsPerTermSummary0.getSubjectCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubjectMetricsPerTermSummary subjectMetricsPerTermSummary0 = new SubjectMetricsPerTermSummary("", (String) null, (String) null, "br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetricsPerTerm", (Collection<SubjectMetricsPerTerm>) null);
      String string0 = subjectMetricsPerTermSummary0.getSubjectCode();
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetricsPerTerm", subjectMetricsPerTermSummary0.getSubjectName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubjectMetricsPerTermSummary subjectMetricsPerTermSummary0 = new SubjectMetricsPerTermSummary("q(Va[", "q(Va[", "q(Va[", "q(Va[", (Collection<SubjectMetricsPerTerm>) null);
      String string0 = subjectMetricsPerTermSummary0.getSubjectCode();
      assertEquals("q(Va[", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubjectMetricsPerTermSummary subjectMetricsPerTermSummary0 = new SubjectMetricsPerTermSummary("q(Va[", "q(Va[", "q(Va[", "q(Va[", (Collection<SubjectMetricsPerTerm>) null);
      int int0 = subjectMetricsPerTermSummary0.compareTo(subjectMetricsPerTermSummary0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubjectMetricsPerTermSummary subjectMetricsPerTermSummary0 = new SubjectMetricsPerTermSummary("", "br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetricsPerTermSummary", "e<.tx/*'Y", (String) null, (Collection<SubjectMetricsPerTerm>) null);
      subjectMetricsPerTermSummary0.setSubjectName("br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetricsPerTermSummary");
      SubjectMetricsPerTermSummary subjectMetricsPerTermSummary1 = new SubjectMetricsPerTermSummary("", "", "br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetricsPerTermSummary", "", (Collection<SubjectMetricsPerTerm>) null);
      int int0 = subjectMetricsPerTermSummary0.compareTo(subjectMetricsPerTermSummary1);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetricsPerTermSummary", subjectMetricsPerTermSummary1.getSubjectCode());
      assertEquals(92, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubjectMetricsPerTermSummary subjectMetricsPerTermSummary0 = new SubjectMetricsPerTermSummary("", "", "", "", (Collection<SubjectMetricsPerTerm>) null);
      SubjectMetricsPerTermSummary subjectMetricsPerTermSummary1 = new SubjectMetricsPerTermSummary("br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetricsPerTerm", "", "", "br.edu.ufcg.computacao.eureca.backend.core.models.Range", (Collection<SubjectMetricsPerTerm>) null);
      int int0 = subjectMetricsPerTermSummary0.compareTo(subjectMetricsPerTermSummary1);
      assertEquals("", subjectMetricsPerTermSummary1.getSubjectCode());
      assertEquals((-55), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubjectMetricsPerTermSummary subjectMetricsPerTermSummary0 = new SubjectMetricsPerTermSummary("br.edu.ufcg.computacao.eureca.backend.core.models.Range", "", (String) null, (String) null, (Collection<SubjectMetricsPerTerm>) null);
      // Undeclared exception!
      try { 
        subjectMetricsPerTermSummary0.compareTo(subjectMetricsPerTermSummary0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetricsPerTermSummary", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubjectMetricsPerTermSummary subjectMetricsPerTermSummary0 = new SubjectMetricsPerTermSummary("q(Va[", "q(Va[", "q(Va[", "q(Va[", (Collection<SubjectMetricsPerTerm>) null);
      subjectMetricsPerTermSummary0.setTerms((Collection<SubjectMetricsPerTerm>) null);
      assertEquals("q(Va[", subjectMetricsPerTermSummary0.getFrom());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubjectMetricsPerTermSummary subjectMetricsPerTermSummary0 = new SubjectMetricsPerTermSummary("q(Va[", "q(Va[", "q(Va[", "q(Va[", (Collection<SubjectMetricsPerTerm>) null);
      Collection<SubjectMetricsPerTerm> collection0 = subjectMetricsPerTermSummary0.getTerms();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubjectMetricsPerTermSummary subjectMetricsPerTermSummary0 = new SubjectMetricsPerTermSummary("R{8", "R{8", "", "k2}~6*_", (Collection<SubjectMetricsPerTerm>) null);
      String string0 = subjectMetricsPerTermSummary0.getSubjectName();
      assertEquals("k2}~6*_", string0);
      assertEquals("", subjectMetricsPerTermSummary0.getSubjectCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubjectMetricsPerTermSummary subjectMetricsPerTermSummary0 = new SubjectMetricsPerTermSummary("R{8", "R{8", "", "k2}~6*_", (Collection<SubjectMetricsPerTerm>) null);
      String string0 = subjectMetricsPerTermSummary0.getSubjectCode();
      assertEquals("", string0);
      assertEquals("k2}~6*_", subjectMetricsPerTermSummary0.getSubjectName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubjectMetricsPerTermSummary subjectMetricsPerTermSummary0 = new SubjectMetricsPerTermSummary("R{8", "R{8", "", "k2}~6*_", (Collection<SubjectMetricsPerTerm>) null);
      // Undeclared exception!
      try { 
        subjectMetricsPerTermSummary0.compareTo("5v");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetricsPerTermSummary
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetricsPerTermSummary", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SubjectMetricsPerTermSummary subjectMetricsPerTermSummary0 = new SubjectMetricsPerTermSummary("R{8", "R{8", "", "k2}~6*_", (Collection<SubjectMetricsPerTerm>) null);
      assertEquals("", subjectMetricsPerTermSummary0.getSubjectCode());
      
      subjectMetricsPerTermSummary0.setSubjectCode("5v");
      assertEquals("k2}~6*_", subjectMetricsPerTermSummary0.getSubjectName());
  }
}
