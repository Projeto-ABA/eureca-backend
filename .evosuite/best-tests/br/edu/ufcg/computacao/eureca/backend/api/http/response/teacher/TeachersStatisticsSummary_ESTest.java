/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 22:55:40 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeachersStatisticsSummary;
import br.edu.ufcg.computacao.eureca.backend.core.models.TermCount;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TeachersStatisticsSummary_ESTest extends TeachersStatisticsSummary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("", "Z4{D3zCi.", (-1716.84700562), (TermCount) null, (TermCount) null, (-1716.84700562), 1.0, 0.0, 1.0);
      String string0 = teachersStatisticsSummary0.getTo();
      assertEquals("Z4{D3zCi.", string0);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(1.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals((-1716.84700562), teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals("", teachersStatisticsSummary0.getFrom());
      assertEquals((-1716.84700562), teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(1.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("", "", 0.0, (TermCount) null, (TermCount) null, 0.0, (-1.0), (-1.0), (-1.0));
      teachersStatisticsSummary0.getTo();
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("M23q`_o ~.%58hzH", "M23q`_o ~.%58hzH", 822.517109, termCount0, termCount0, 1740.6079831, 822.517109, 0.0, 0.0);
      double double0 = teachersStatisticsSummary0.getTeachersCount();
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(822.517109, double0, 0.01);
      assertEquals(1740.6079831, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(822.517109, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("\"O-3", "\"O-3", 1.0, (TermCount) null, (TermCount) null, 1.0, 1.0, 1.0, 1.0);
      teachersStatisticsSummary0.setTeachersCount((-630.33575986));
      double double0 = teachersStatisticsSummary0.getTeachersCount();
      assertEquals((-630.33575986), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, 1633.84309396, (TermCount) null, (TermCount) null, 1059.73666267, 0.0, 0.0, 1477.942214);
      teachersStatisticsSummary0.getMin();
      assertEquals(1477.942214, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(1059.73666267, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(1633.84309396, teachersStatisticsSummary0.getTeachersCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, 0.0, (TermCount) null, (TermCount) null, 0.0, (-2103.399), (-2103.399), 0.0);
      teachersStatisticsSummary0.getFrom();
      assertEquals((-2103.399), teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals((-2103.399), teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("", "", 0.0, (TermCount) null, (TermCount) null, 0.0, 1410.3, 1269.1033264157954, (-2370.9893));
      teachersStatisticsSummary0.getFrom();
      assertEquals(1410.3, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals((-2370.9893), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(1269.1033264157954, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, 0.0, (TermCount) null, (TermCount) null, 0.0, (-2103.399), (-2103.399), 0.0);
      teachersStatisticsSummary0.setAverageSuspendedRate(3575.61019482014);
      double double0 = teachersStatisticsSummary0.getAverageSuspendedRate();
      assertEquals(3575.61019482014, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("", "", 0.0, (TermCount) null, (TermCount) null, 0.0, (-1.0), (-1.0), (-1.0));
      double double0 = teachersStatisticsSummary0.getAverageSuspendedRate();
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("", "Z4{D3zCi.", (-1716.84700562), (TermCount) null, (TermCount) null, (-1716.84700562), 1.0, 0.0, 1.0);
      assertEquals((-1716.84700562), teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      
      teachersStatisticsSummary0.setAverageSuccessRate(0.0);
      double double0 = teachersStatisticsSummary0.getAverageSuccessRate();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, 1633.84309396, (TermCount) null, (TermCount) null, 1059.73666267, 0.0, 0.0, 1477.942214);
      double double0 = teachersStatisticsSummary0.getAverageSuccessRate();
      assertEquals(1633.84309396, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(1477.942214, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(1059.73666267, double0, 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("", "", 0.0, (TermCount) null, (TermCount) null, 0.0, 0.0, 0.0, (-1.0));
      double double0 = teachersStatisticsSummary0.getAverageFailureDueToGradeRate();
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("TermCount{count=", "TermCount{count=", (-1064.0), (TermCount) null, (TermCount) null, (-1064.0), (-1064.0), (-1064.0), (-1064.0));
      double double0 = teachersStatisticsSummary0.getAverageFailureDueToGradeRate();
      assertEquals((-1064.0), teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals((-1064.0), double0, 0.01);
      assertEquals((-1064.0), teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals((-1064.0), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals((-1064.0), teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("", "Z4{D3zCi.", (-1716.84700562), (TermCount) null, (TermCount) null, (-1716.84700562), 1.0, 0.0, 1.0);
      double double0 = teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate();
      assertEquals(1.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(1.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1716.84700562), teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals("", teachersStatisticsSummary0.getFrom());
      assertEquals((-1716.84700562), teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals("Z4{D3zCi.", teachersStatisticsSummary0.getTo());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("", "", 0.0, (TermCount) null, (TermCount) null, 0.0, 1410.3, 1269.1033264157954, (-2370.9893));
      double double0 = teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate();
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(1269.1033264157954, double0, 0.01);
      assertEquals(1410.3, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals((-2370.9893), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("Al**t@2>Yyy_oX7x1", "Al**t@2>Yyy_oX7x1", 27.397150973459336, termCount0, termCount0, 27.397150973459336, 27.397150973459336, 27.397150973459336, 27.397150973459336);
      double double0 = teachersStatisticsSummary0.getAverageFailureDueToGradeRate();
      assertEquals(27.397150973459336, double0, 0.01);
      assertEquals(27.397150973459336, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(27.397150973459336, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(27.397150973459336, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(27.397150973459336, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("u1cfu!NU/i", "u1cfu!NU/i", (-1.0), termCount0, termCount0, (-1.0), (-1.0), (-1.0), (-1.0));
      teachersStatisticsSummary0.setAverageFailureDueToAbsenceRate((-1.0));
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("br.ed.ufcg.computacao.eureca.backend.api.ht~p.respnse.teacher.TeachersStatisticsSummary", "br.ed.ufcg.computacao.eureca.backend.api.ht~p.respnse.teacher.TeachersStatisticsSummary", (-984.7857272), termCount0, termCount0, (-984.7857272), (-984.7857272), (-984.7857272), (-984.7857272));
      double double0 = teachersStatisticsSummary0.getAverageSuccessRate();
      assertEquals((-984.7857272), teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals((-984.7857272), teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals((-984.7857272), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals((-984.7857272), double0, 0.01);
      assertEquals((-984.7857272), teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, 0.0, (TermCount) null, (TermCount) null, 0.0, 0.0, 0.0, 0.0);
      teachersStatisticsSummary0.getMax();
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("u1cfu!NU/i", "u1cfu!NU/i", (-1.0), termCount0, termCount0, (-1.0), (-1.0), (-1.0), (-1.0));
      teachersStatisticsSummary0.getFrom();
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, 0.0, (TermCount) null, (TermCount) null, 0.0, 0.0, 0.0, 0.0);
      teachersStatisticsSummary0.getTo();
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("u1cfu!NU/i", "u1cfu!NU/i", (-1.0), termCount0, termCount0, (-1.0), (-1.0), (-1.0), (-1.0));
      TermCount termCount1 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      teachersStatisticsSummary0.setMax(termCount1);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("br.ed.ufcg.computacao.eureca.backend.api.ht~p.respnse.teacher.TeachersStatisticsSummary", "br.ed.ufcg.computacao.eureca.backend.api.ht~p.respnse.teacher.TeachersStatisticsSummary", (-984.7857272), termCount0, termCount0, (-984.7857272), (-984.7857272), (-984.7857272), (-984.7857272));
      teachersStatisticsSummary0.setAverageFailureDueToGradeRate((-984.7857272));
      assertEquals((-984.7857272), teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals((-984.7857272), teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals((-984.7857272), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals((-984.7857272), teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals((-984.7857272), teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, 0.0, (TermCount) null, (TermCount) null, 0.0, 0.0, 0.0, 0.0);
      double double0 = teachersStatisticsSummary0.getAverageSuspendedRate();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, 0.0, (TermCount) null, (TermCount) null, 0.0, 0.0, 0.0, 0.0);
      double double0 = teachersStatisticsSummary0.getTeachersCount();
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("u1cfu!NU/i", "u1cfu!NU/i", (-1.0), termCount0, termCount0, (-1.0), (-1.0), (-1.0), (-1.0));
      double double0 = teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("br.ed.ufcg.computacao.eureca.backend.api.ht~p.respnse.teacher.TeachersStatisticsSummary", "br.ed.ufcg.computacao.eureca.backend.api.ht~p.respnse.teacher.TeachersStatisticsSummary", (-984.7857272), termCount0, termCount0, (-984.7857272), (-984.7857272), (-984.7857272), (-984.7857272));
      teachersStatisticsSummary0.setTo("br.ed.ufcg.computacao.eureca.backend.api.ht~p.respnse.teacher.TeachersStatisticsSummary");
      assertEquals((-984.7857272), teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals((-984.7857272), teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals((-984.7857272), teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals((-984.7857272), teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals((-984.7857272), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("br.ed.ufcg.computacao.eureca.backend.api.ht~p.respnse.teacher.TeachersStatisticsSummary", "br.ed.ufcg.computacao.eureca.backend.api.ht~p.respnse.teacher.TeachersStatisticsSummary", (-984.7857272), termCount0, termCount0, (-984.7857272), (-984.7857272), (-984.7857272), (-984.7857272));
      teachersStatisticsSummary0.setFrom("br.ed.ufcg.computacao.eureca.backend.api.ht~p.respnse.teacher.TeachersStatisticsSummary");
      assertEquals((-984.7857272), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals((-984.7857272), teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals((-984.7857272), teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals((-984.7857272), teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals((-984.7857272), teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, 0.0, (TermCount) null, (TermCount) null, 0.0, 0.0, 0.0, 0.0);
      teachersStatisticsSummary0.setMin((TermCount) null);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
  }
}
