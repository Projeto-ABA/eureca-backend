/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 05 22:20:31 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.models.MetricStatistics;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MetricStatistics_ESTest extends MetricStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(0.0, 0.0, 0.0, 3676.4757, 0.0, 0.0, 9);
      double double0 = metricStatistics0.getThirdQuartile();
      assertEquals(9, metricStatistics0.getSampleSize());
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
      assertEquals(0.0, metricStatistics0.getMin(), 0.01);
      assertEquals(0.0, metricStatistics0.getMax(), 0.01);
      assertEquals(3676.4757, double0, 0.01);
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1648.1005162826157);
      linkedList0.add(double0);
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      double double1 = metricStatistics0.getThirdQuartile();
      assertEquals(1648.1005162826157, metricStatistics0.getAverage(), 0.01);
      assertEquals((-1.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1631.853267);
      linkedList0.add(double0);
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      int int0 = metricStatistics0.getSampleSize();
      assertEquals(1, int0);
      assertEquals(1631.853267, metricStatistics0.getAverage(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector<Double> vector0 = new Vector<Double>();
      MetricStatistics metricStatistics0 = new MetricStatistics(vector0);
      metricStatistics0.setSampleSize((-2822));
      int int0 = metricStatistics0.getSampleSize();
      assertEquals((-2822), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(0.0, 0.0, 0.0, 3676.4757, 0.0, 0.0, 9);
      double double0 = metricStatistics0.getMin();
      assertEquals(9, metricStatistics0.getSampleSize());
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3676.4757, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getMax(), 0.01);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      metricStatistics0.setMin((-265.5655866));
      double double0 = metricStatistics0.getMin();
      assertEquals((-265.5655866), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      double double0 = metricStatistics0.getMedian();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, metricStatistics0.getMax(), 0.01);
      assertEquals(0.0, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getMin(), 0.01);
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1648.1005162826157);
      linkedList0.add(double0);
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      double double1 = metricStatistics0.getMedian();
      assertEquals(1648.1005162826157, metricStatistics0.getAverage(), 0.01);
      assertEquals((-1.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(0.0, 0.0, 0.0, (-682.498), (-369.5121500708), 0.0, 0);
      double double0 = metricStatistics0.getMax();
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(0, metricStatistics0.getSampleSize());
      assertEquals((-682.498), metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getMin(), 0.01);
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
      assertEquals((-369.5121500708), double0, 0.01);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      double double0 = metricStatistics0.getFirstQuartile();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
      assertEquals(0.0, metricStatistics0.getMin(), 0.01);
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
      assertEquals(0.0, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics((-2048.7251402647094), (-2048.7251402647094), (-2048.7251402647094), (-2048.7251402647094), 0.0, 0.0, 1706);
      double double0 = metricStatistics0.getFirstQuartile();
      assertEquals((-2048.7251402647094), metricStatistics0.getMin(), 0.01);
      assertEquals(0.0, metricStatistics0.getMax(), 0.01);
      assertEquals(1706, metricStatistics0.getSampleSize());
      assertEquals((-2048.7251402647094), double0, 0.01);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
      assertEquals((-2048.7251402647094), metricStatistics0.getMedian(), 0.01);
      assertEquals((-2048.7251402647094), metricStatistics0.getThirdQuartile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1648.1005162826157);
      linkedList0.add(double0);
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      double double1 = metricStatistics0.getAverage();
      assertEquals(1648.1005162826157, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MetricStatistics metricStatistics0 = null;
      try {
        metricStatistics0 = new MetricStatistics((List<Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.MetricStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double(0.0);
      vector0.add(double0);
      vector0.add(double0);
      vector0.add(double0);
      vector0.add(double0);
      vector0.add(double0);
      MetricStatistics metricStatistics0 = new MetricStatistics(vector0);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1631.853267);
      linkedList0.add(double0);
      linkedList0.add(double0);
      linkedList0.addLast(double0);
      linkedList0.add(double0);
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      assertEquals(1631.853267, metricStatistics0.getMedian(), 0.01);
      assertEquals(1631.853267, metricStatistics0.getAverage(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1631.853267);
      linkedList0.add(double0);
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      double double1 = metricStatistics0.getMax();
      assertEquals(1631.853267, metricStatistics0.getAverage(), 0.01);
      assertEquals(1631.853267, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
      
      metricStatistics0.setAverage((-1.0));
      double double0 = metricStatistics0.getAverage();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      metricStatistics0.setMax(1631.853267);
      assertEquals(1631.853267, metricStatistics0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(94.97192250238167, 999, 94.97192250238167, 999, 94.97192250238167, 94.97192250238167, 999);
      double double0 = metricStatistics0.getFirstQuartile();
      assertEquals(94.97192250238167, metricStatistics0.getMax(), 0.01);
      assertEquals(94.97192250238167, metricStatistics0.getMedian(), 0.01);
      assertEquals(999, metricStatistics0.getSampleSize());
      assertEquals(94.97192250238167, metricStatistics0.getMin(), 0.01);
      assertEquals(94.97192250238167, metricStatistics0.getAverage(), 0.01);
      assertEquals(999.0, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(999.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      double double0 = metricStatistics0.getAverage();
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
      assertEquals(0.0, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getMax(), 0.01);
      assertEquals(0.0, metricStatistics0.getMin(), 0.01);
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      double double0 = metricStatistics0.getThirdQuartile();
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
      assertEquals(0.0, metricStatistics0.getMin(), 0.01);
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, metricStatistics0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(94.97192250238167, 999, 94.97192250238167, 999, 94.97192250238167, 94.97192250238167, 999);
      double double0 = metricStatistics0.getMedian();
      assertEquals(999, metricStatistics0.getSampleSize());
      assertEquals(94.97192250238167, double0, 0.01);
      assertEquals(94.97192250238167, metricStatistics0.getMax(), 0.01);
      assertEquals(94.97192250238167, metricStatistics0.getMin(), 0.01);
      assertEquals(999.0, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(94.97192250238167, metricStatistics0.getAverage(), 0.01);
      assertEquals(999.0, metricStatistics0.getThirdQuartile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      double double0 = metricStatistics0.getMax();
      assertEquals(0.0, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
      assertEquals(0.0, metricStatistics0.getMin(), 0.01);
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(94.97192250238167, 999, 94.97192250238167, 999, 94.97192250238167, 94.97192250238167, 999);
      double double0 = metricStatistics0.getMin();
      assertEquals(94.97192250238167, double0, 0.01);
      assertEquals(999, metricStatistics0.getSampleSize());
      assertEquals(94.97192250238167, metricStatistics0.getMedian(), 0.01);
      assertEquals(94.97192250238167, metricStatistics0.getMax(), 0.01);
      assertEquals(999.0, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(94.97192250238167, metricStatistics0.getAverage(), 0.01);
      assertEquals(999.0, metricStatistics0.getThirdQuartile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
      
      metricStatistics0.setMedian((-1.0));
      assertEquals(0.0, metricStatistics0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      metricStatistics0.setThirdQuartile(1631.853267);
      assertEquals(1631.853267, metricStatistics0.getThirdQuartile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      int int0 = metricStatistics0.getSampleSize();
      assertEquals(0.0, metricStatistics0.getMin(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.0, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
      assertEquals(0.0, metricStatistics0.getMax(), 0.01);
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(94.97192250238167, 999, 94.97192250238167, 999, 94.97192250238167, 94.97192250238167, 999);
      assertEquals(999.0, metricStatistics0.getFirstQuartile(), 0.01);
      
      metricStatistics0.setFirstQuartile(94.97192250238167);
      assertEquals(94.97192250238167, metricStatistics0.getMin(), 0.01);
  }
}
